import os
import ccxt
import pandas as pd
import numpy as np
from ta.trend import SMAIndicator, MACD
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import vectorbt as vbt
from itertools import product
import time
import warnings
import config
import trading_config
from trading_functions_fixed import place_buy_order_with_sl_tp_fixed
from account_info import get_account_info, test_email_notification, send_trading_notification

# T·∫Øt t·∫•t c·∫£ warnings v√† logging kh√¥ng c·∫ßn thi·∫øt
warnings.filterwarnings('ignore')
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # T·∫Øt TensorFlow logs
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # T·∫Øt oneDNN notifications
tf.get_logger().setLevel('ERROR')
tf.autograph.set_verbosity(0)

# Kh·ªüi t·∫°o Binance API - TESTNET cho test an to√†n
try:
    binance = ccxt.binance(trading_config.BINANCE_CONFIG)
    print("‚úÖ K·∫øt n·ªëi Binance API th√†nh c√¥ng")
except Exception as e:
    print(f"‚ùå L·ªói k·∫øt n·ªëi Binance API: {e}")
    print("üí° Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh trong trading_config.py")
    binance = ccxt.binance()  # Fallback to basic connection

# C·∫•u h√¨nh trading t·ª´ file config
TRADING_CONFIG = trading_config.TRADING_CONFIG

# H√†m chuy·ªÉn ƒë·ªïi gi√° t·ª´ JPY sang USDT
def convert_jpy_to_usdt(jpy_price):
    """Chuy·ªÉn ƒë·ªïi gi√° t·ª´ JPY sang USDT"""
    try:
        if trading_config.PRICE_CONVERSION['use_live_rate']:
            # L·∫•y t·ª∑ gi√° th·ªùi gian th·ª±c t·ª´ Binance
            ticker = binance.fetch_ticker('USDT/JPY')
            usd_jpy_rate = 1 / ticker['last']  # JPY to USD
        else:
            usd_jpy_rate = trading_config.PRICE_CONVERSION['default_jpy_to_usd']
        
        usdt_price = jpy_price * usd_jpy_rate
        return usdt_price
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi JPY->USDT: {e}")
        # Fallback to default rate
        return jpy_price * trading_config.PRICE_CONVERSION['default_jpy_to_usd']

# H√†m l·∫•y gi√° hi·ªán t·∫°i c·ªßa c·∫∑p JPY
def get_current_jpy_price(symbol):
    """L·∫•y gi√° hi·ªán t·∫°i c·ªßa c·∫∑p JPY"""
    try:
        ticker = binance.fetch_ticker(symbol)
        return ticker['last']
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y gi√° {symbol}: {e}")
        return None

# H√†m g·ª≠i th√¥ng b√°o
def send_notification(message, urgent=False):
    """G·ª≠i th√¥ng b√°o v·ªÅ trading"""
    try:
        if not trading_config.NOTIFICATION_CONFIG['enabled']:
            return
        
        print(f"üì± {message}")
        
        # Telegram notification
        if trading_config.NOTIFICATION_CONFIG['telegram_enabled']:
            # Implement telegram notification here
            pass
        
        # Email notification
        if trading_config.NOTIFICATION_CONFIG['email_enabled']:
            # Implement email notification here
            pass
            
        # Log to file
        if TRADING_CONFIG['log_trades']:
            log_file = TRADING_CONFIG.get('log_file', 'trading_log.txt')
            with open(log_file, 'a', encoding='utf-8') as f:
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                f.write(f"[{timestamp}] {message}\n")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói g·ª≠i th√¥ng b√°o: {e}")

# H√†m l·∫•y s·ªë d∆∞ t√†i kho·∫£n
def get_account_balance():
    """L·∫•y s·ªë d∆∞ t√†i kho·∫£n USDT"""
    try:
        balance = binance.fetch_balance()
        usdt_balance = balance['USDT']['free'] if 'USDT' in balance else 0
        return usdt_balance
    except Exception as e:
        print(f"L·ªói khi l·∫•y s·ªë d∆∞: {e}")
        return 0

# H√†m t√≠nh to√°n k√≠ch th∆∞·ªõc order
def calculate_order_size(usdt_balance, num_recommendations, coin_price):
    """T√≠nh to√°n k√≠ch th∆∞·ªõc order d·ª±a tr√™n s·ªë d∆∞ v√† s·ªë l∆∞·ª£ng coin khuy·∫øn ngh·ªã"""
    if num_recommendations == 1:
        # All-in v·ªõi 1 coin
        allocation = usdt_balance * 0.95  # Gi·ªØ l·∫°i 5% ƒë·ªÉ tr·∫£ ph√≠
    elif num_recommendations == 2:
        # Chia ƒë√¥i t√†i kho·∫£n
        allocation = usdt_balance * 0.475  # 47.5% cho m·ªói coin
    else:
        return 0
    
    # Ki·ªÉm tra gi√° tr·ªã order t·ªëi thi·ªÉu
    if allocation < TRADING_CONFIG['min_order_value']:
        print(f"‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß. C·∫ßn t·ªëi thi·ªÉu ${TRADING_CONFIG['min_order_value']}, hi·ªán c√≥ ${allocation:.2f}")
        return 0
    
    # T√≠nh s·ªë l∆∞·ª£ng coin c√≥ th·ªÉ mua
    quantity = allocation / coin_price
    return quantity

# H√†m ƒë·∫∑t l·ªánh mua v·ªõi stop loss v√† take profit
def place_buy_order_with_sl_tp(symbol, quantity, entry_price, stop_loss, tp1_price, tp2_price):
    """ƒê·∫∑t l·ªánh mua v·ªõi stop loss v√† take profit t·ª± ƒë·ªông"""
    try:
        # Trade tr·ª±c ti·∫øp JPY - ƒë∆°n gi·∫£n
        trading_symbol = symbol  # S·ª≠ d·ª•ng tr·ª±c ti·∫øp JPY pair
        current_price = get_current_jpy_price(symbol)
        
        if not current_price:
            return {'status': 'failed', 'error': 'Cannot get current JPY price'}
        
        print(f"\nüîÑ ƒêang ƒë·∫∑t l·ªánh mua {trading_symbol}...")
        print(f"üìä S·ªë l∆∞·ª£ng: {quantity:.6f}")
        print(f"üí∞ Gi√° entry: ¬•{entry_price:.2f}")
        print(f"üí∞ Gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i: ¬•{current_price:.2f}")
        
        # Ki·ªÉm tra market info ƒë·ªÉ ƒë·∫£m b·∫£o order h·ª£p l·ªá
        try:
            market = binance.market(trading_symbol)
            min_amount = market['limits']['amount']['min']
            min_cost = market['limits']['cost']['min']
            
            if quantity < min_amount:
                return {'status': 'failed', 'error': f'Quantity too small. Min: {min_amount}'}
            
            if quantity * current_price < min_cost:
                return {'status': 'failed', 'error': f'Order value too small. Min: ${min_cost}'}
                
        except Exception as market_error:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra market info: {market_error}")
        
        # 1. ƒê·∫∑t l·ªánh mua market
        buy_order = binance.create_market_buy_order(trading_symbol, quantity)
        print(f"‚úÖ L·ªánh mua th√†nh c√¥ng - ID: {buy_order['id']}")
        
        # L·∫•y gi√° th·ª±c t·∫ø ƒë√£ mua
        actual_price = float(buy_order['average']) if buy_order['average'] else current_price
        actual_quantity = float(buy_order['filled'])
        
        print(f"üìà Gi√° mua th·ª±c t·∫ø: ${actual_price:.4f}")
        print(f"üìä S·ªë l∆∞·ª£ng th·ª±c t·∫ø: {actual_quantity:.6f}")
        
        # G·ª≠i th√¥ng b√°o
        send_notification(f"‚úÖ MUA {trading_symbol}: {actual_quantity:.6f} @ ${actual_price:.4f}")
        
        # 2. ƒê·∫∑t stop loss v√† take profit
        orders_placed = []
        
        try:
            if TRADING_CONFIG['use_oco_orders']:
                # S·ª≠ d·ª•ng OCO order (One-Cancels-Other)
                oco_order = binance.create_order(
                    symbol=usdt_symbol,
                    type='OCO',
                    side='sell',
                    amount=actual_quantity * 0.7,  # 70% cho OCO
                    price=tp1_usdt,  # Take profit price
                    stopPrice=stop_loss_usdt,  # Stop loss trigger price
                    stopLimitPrice=stop_loss_usdt * (1 - TRADING_CONFIG['stop_loss_buffer']),
                    params={'stopLimitTimeInForce': 'GTC'}
                )
                orders_placed.append(oco_order)
                print(f"‚úÖ OCO order ƒë·∫∑t th√†nh c√¥ng - SL: ${stop_loss_usdt:.4f}, TP: ${tp1_usdt:.4f}")
                send_notification(f"üõ°Ô∏è OCO {usdt_symbol}: SL ${stop_loss_usdt:.4f} | TP ${tp1_usdt:.4f}")
                
            else:
                # ƒê·∫∑t stop loss ri√™ng
                stop_order = binance.create_order(
                    symbol=usdt_symbol,
                    type='STOP_LOSS_LIMIT',
                    side='sell',
                    amount=actual_quantity,
                    price=stop_loss_usdt * (1 - TRADING_CONFIG['stop_loss_buffer']),
                    stopPrice=stop_loss_usdt,
                    params={'timeInForce': 'GTC'}
                )
                orders_placed.append(stop_order)
                print(f"‚úÖ Stop Loss ƒë·∫∑t th√†nh c√¥ng: ¬•{stop_loss:.2f}")
                
        except Exception as sl_error:
            print(f"‚ö†Ô∏è L·ªói ƒë·∫∑t stop loss: {sl_error}")
            send_notification(f"‚ö†Ô∏è L·ªói ƒë·∫∑t SL cho {trading_symbol}: {sl_error}", urgent=True)
        
        # 3. ƒê·∫∑t take profit th·ª© 2 (n·∫øu kh√°c TP1)
        try:
            if abs(tp2_price - tp1_price) > 1:  # N·∫øu TP2 kh√°c TP1 (JPY)
                tp2_quantity = actual_quantity * 0.3  # 30% cho TP2
                tp2_order = binance.create_limit_sell_order(trading_symbol, tp2_quantity, tp2_price)
                orders_placed.append(tp2_order)
                print(f"‚úÖ Take Profit 2 ƒë·∫∑t th√†nh c√¥ng: ¬•{tp2_price:.2f}")
                send_notification(f"üéØ TP2 {trading_symbol}: ¬•{tp2_price:.2f}")
                
        except Exception as tp2_error:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫∑t TP2: {tp2_error}")
        
        return {
            'buy_order': buy_order,
            'sl_tp_orders': orders_placed,
            'status': 'success',
            'actual_price': actual_price,
            'actual_quantity': actual_quantity,
            'trading_symbol': trading_symbol
        }
        
    except Exception as e:
        error_msg = f"‚ùå L·ªói khi ƒë·∫∑t l·ªánh mua {symbol}: {e}"
        print(error_msg)
        send_notification(error_msg, urgent=True)
        return {'status': 'failed', 'error': str(e)}

# H√†m ki·ªÉm tra v√† h·ªßy orders c≈©
def cancel_all_open_orders():
    """H·ªßy t·∫•t c·∫£ orders ƒëang m·ªü ƒë·ªÉ tr√°nh xung ƒë·ªôt"""
    try:
        open_orders = binance.fetch_open_orders()
        if open_orders:
            print(f"üîÑ T√¨m th·∫•y {len(open_orders)} orders ƒëang m·ªü, ƒëang h·ªßy...")
            for order in open_orders:
                try:
                    binance.cancel_order(order['id'], order['symbol'])
                    print(f"‚úÖ H·ªßy order {order['id']} - {order['symbol']}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ h·ªßy order {order['id']}: {e}")
        else:
            print("‚úÖ Kh√¥ng c√≥ orders ƒëang m·ªü")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra orders: {e}")

# H√†m th·ª±c hi·ªán trading t·ª± ƒë·ªông
def execute_auto_trading(recommendations):
    """Th·ª±c hi·ªán trading t·ª± ƒë·ªông d·ª±a tr√™n khuy·∫øn ngh·ªã"""
    if not TRADING_CONFIG['enabled']:
        print("‚ö†Ô∏è Auto trading ƒë√£ b·ªã t·∫Øt trong c·∫•u h√¨nh")
        return
    
    if TRADING_CONFIG.get('emergency_stop', False):
        print("üö® EMERGENCY STOP ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t - D·ª´ng trading")
        return
    
    if not recommendations:
        print("üí° Kh√¥ng c√≥ coin khuy·∫øn ngh·ªã - Kh√¥ng v√†o l·ªánh")
        send_trading_notification("üí° Kh√¥ng c√≥ t√≠n hi·ªáu trading")
        return
    
    print("\n" + "=" * 80)
    print("ü§ñ B·∫ÆT ƒê·∫¶U AUTO TRADING")
    print("=" * 80)
    
    # ===== HI·ªÇN TH·ªä TH√îNG TIN T√ÄI KHO·∫¢N TR∆Ø·ªöC KHI TRADE =====
    print("üìä ƒêang l·∫•y th√¥ng tin t√†i kho·∫£n...")
    account_info = get_account_info()
    
    if not account_info:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n - D·ª´ng trading")
        return
    
    # ===== KI·ªÇM TRA EMAIL NOTIFICATION =====
    print("\nüìß Ki·ªÉm tra h·ªá th·ªëng notification...")
    notification_working = test_email_notification()
    
    if not notification_working:
        print("‚ö†Ô∏è Email notification kh√¥ng ho·∫°t ƒë·ªông - Ti·∫øp t·ª•c v·ªõi console logs")
    
    print("\n" + "=" * 80)
    
    try:
        # 1. Ki·ªÉm tra s·ªë d∆∞
        usdt_balance = get_account_balance()
        print(f"üí∞ S·ªë d∆∞ USDT: ${usdt_balance:.2f}")
        
        if usdt_balance < TRADING_CONFIG['min_order_value']:
            error_msg = f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ trading. C·∫ßn t·ªëi thi·ªÉu ${TRADING_CONFIG['min_order_value']}"
            print(error_msg)
            send_notification(error_msg, urgent=True)
            return
        
        # Ki·ªÉm tra gi·ªõi h·∫°n t·ªëi ƒëa
        max_order_value = TRADING_CONFIG.get('max_order_value', float('inf'))
        if usdt_balance > max_order_value:
            usdt_balance = max_order_value
            print(f"‚ö†Ô∏è Gi·ªõi h·∫°n s·ªë d∆∞ t·ªëi ƒëa: ${max_order_value}")
        
        # 2. H·ªßy orders c≈©
        cancel_all_open_orders()
        
        # 3. Th·ª±c hi·ªán trading
        num_recommendations = len(recommendations)
        print(f"üìä S·ªë coin khuy·∫øn ngh·ªã: {num_recommendations}")
        
        if num_recommendations == 1:
            print("üéØ Chi·∫øn l∆∞·ª£c: ALL-IN v·ªõi 1 coin (95% t√†i kho·∫£n)")
            allocation_per_coin = 0.95
        elif num_recommendations == 2:
            print("üéØ Chi·∫øn l∆∞·ª£c: CHIA ƒê√îI t√†i kho·∫£n cho 2 coins")
            allocation_per_coin = 0.475  # 47.5% cho m·ªói coin
        else:
            print("‚ö†Ô∏è Qu√° nhi·ªÅu khuy·∫øn ngh·ªã, ch·ªâ trade 2 coin ƒë·∫ßu")
            recommendations = recommendations[:2]
            allocation_per_coin = 0.475
        
        successful_trades = 0
        total_invested = 0
        
        for i, coin_data in enumerate(recommendations):
            try:
                original_symbol = f"{coin_data['coin']}/JPY"
                # Trade tr·ª±c ti·∫øp JPY
                jpy_symbol = original_symbol
                
                print(f"\n{'='*60}")
                print(f"üöÄ TRADING #{i+1}: {jpy_symbol}")
                print(f"{'='*60}")
                
                # L·∫•y gi√° hi·ªán t·∫°i JPY
                current_jpy_price = get_current_jpy_price(original_symbol)
                if not current_jpy_price:
                    print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° {jpy_symbol}")
                    continue
                
                # T√≠nh to√°n s·ªë ti·ªÅn ƒë·∫ßu t∆∞ (JPY)
                # Gi·∫£ s·ª≠ c√≥ 1,500,000 JPY testnet (t∆∞∆°ng ƒë∆∞∆°ng $10,000)
                balance = binance.fetch_balance()
                jpy_balance = balance['free'].get('JPY', 0)
                
                # N·∫øu kh√¥ng c√≥ JPY, convert t·ª´ USDT
                if jpy_balance == 0:
                    usdt_balance = balance['free'].get('USDT', 0)
                    jpy_balance = usdt_balance * 150  # 1 USD ‚âà 150 JPY
                
                investment_amount = jpy_balance * allocation_per_coin
                
                # Ki·ªÉm tra gi·ªõi h·∫°n (chuy·ªÉn sang JPY)
                min_order_jpy = TRADING_CONFIG['min_order_value'] * 150  # Convert USDT to JPY
                if investment_amount < min_order_jpy:
                    print(f"‚ùå S·ªë ti·ªÅn ƒë·∫ßu t∆∞ qu√° nh·ªè: ¬•{investment_amount:.2f}")
                    continue
                
                # T√≠nh s·ªë l∆∞·ª£ng coin
                quantity = investment_amount / current_jpy_price
                
                # L·∫•y th√¥ng tin gi√° t·ª´ khuy·∫øn ngh·ªã (JPY)
                entry_jpy = coin_data['optimal_entry']
                stop_loss_jpy = coin_data['stop_loss']
                tp1_jpy = coin_data['tp1_price']
                tp2_jpy = coin_data['tp2_price']
                
                print(f"üí∞ ƒê·∫ßu t∆∞: ¬•{investment_amount:.2f}")
                print(f"üìä S·ªë l∆∞·ª£ng: {quantity:.6f}")
                print(f"üí± Gi√° entry: ¬•{entry_jpy:.2f}")
                print(f"üí± Gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i: ¬•{current_jpy_price:.2f}")
                
                # ƒê·∫∑t l·ªánh v·ªõi h√†m ƒë√£ s·ª≠a
                result = place_buy_order_with_sl_tp_fixed(
                    original_symbol, quantity, entry_jpy, 
                    stop_loss_jpy, tp1_jpy, tp2_jpy
                )
                
                if result['status'] == 'success':
                    successful_trades += 1
                    total_invested += investment_amount
                    print(f"‚úÖ Trading {jpy_symbol} th√†nh c√¥ng!")
                    
                    # Th√¥ng b√°o chi ti·∫øt
                    send_notification(
                        f"üöÄ TRADING #{i+1} TH√ÄNH C√îNG\n"
                        f"Coin: {jpy_symbol}\n"
                        f"ƒê·∫ßu t∆∞: ¬•{investment_amount:.2f}\n"
                        f"S·ªë l∆∞·ª£ng: {quantity:.6f}\n"
                        f"Gi√°: ¬•{result.get('actual_price', entry_jpy):.2f}"
                    )
                else:
                    error_msg = f"‚ùå Trading {jpy_symbol} th·∫•t b·∫°i: {result.get('error', 'Unknown error')}"
                    print(error_msg)
                    send_notification(error_msg, urgent=True)
                
                # Delay gi·ªØa c√°c trades
                time.sleep(3)
                
            except Exception as e:
                error_msg = f"‚ùå L·ªói khi trading {coin_data['coin']}: {e}"
                print(error_msg)
                send_notification(error_msg, urgent=True)
                continue
        
        # 4. T·ªïng k·∫øt
        final_balance = get_account_balance()
        print(f"\n{'='*80}")
        print(f"üìä T·ªîNG K·∫æT AUTO TRADING")
        print(f"{'='*80}")
        print(f"‚úÖ Th√†nh c√¥ng: {successful_trades}/{len(recommendations)} trades")
        print(f"üí∞ T·ªïng ƒë·∫ßu t∆∞: ${total_invested:.2f}")
        print(f"üí∞ S·ªë d∆∞ ban ƒë·∫ßu: ${usdt_balance:.2f}")
        print(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${final_balance:.2f}")
        
        if successful_trades > 0:
            print("\nüéØ THEO D√ïI:")
            print("‚Ä¢ Ki·ªÉm tra orders tr√™n Binance Testnet")
            print("‚Ä¢ Theo d√µi stop loss v√† take profit")
            print("‚Ä¢ C·∫≠p nh·∫≠t strategy n·∫øu c·∫ßn")
            
            # Th√¥ng b√°o t·ªïng k·∫øt
            send_notification(
                f"üìä T·ªîNG K·∫æT TRADING\n"
                f"Th√†nh c√¥ng: {successful_trades}/{len(recommendations)}\n"
                f"ƒê·∫ßu t∆∞: ${total_invested:.2f}\n"
                f"S·ªë d∆∞: ${final_balance:.2f}"
            )
        
    except Exception as e:
        error_msg = f"‚ùå L·ªói nghi√™m tr·ªçng trong auto trading: {e}"
        print(error_msg)
        send_notification(error_msg, urgent=True)

# H√†m l·∫•y danh s√°ch c·∫∑p crypto/JPY t·ª´ Binance
def get_jpy_pairs():
    # Ph√¢n t√≠ch c√°c c·∫∑p JPY ƒë·ªÉ ƒë∆∞a ra khuy·∫øn ngh·ªã, nh∆∞ng trade b·∫±ng USDT
    selected_pairs = ['ADA/JPY', 'XRP/JPY', 'XLM/JPY', 'SUI/JPY']
    
    try:
        markets = binance.load_markets()
        # Ki·ªÉm tra c√°c c·∫∑p c√≥ t·ªìn t·∫°i kh√¥ng (s·∫Ω ki·ªÉm tra c·∫£ JPY cho ph√¢n t√≠ch v√† USDT cho trading)
        available_pairs = []
        for pair in selected_pairs:
            # Ki·ªÉm tra c·∫∑p JPY cho ph√¢n t√≠ch
            if pair in markets:
                available_pairs.append(pair)
            else:
                # N·∫øu kh√¥ng c√≥ JPY, th·ª≠ USDT
                usdt_pair = pair.replace('/JPY', '/USDT')
                if usdt_pair in markets:
                    available_pairs.append(pair)  # V·∫´n gi·ªØ t√™n JPY cho ph√¢n t√≠ch
        
        return available_pairs
    except Exception as e:
        return selected_pairs  # Fallback v·ªÅ danh s√°ch g·ªëc

# H√†m l·∫•y d·ªØ li·ªáu gi√° t·ª´ Binance
def get_crypto_data(symbol, timeframe='1m', limit=5000):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"L·ªói khi l·∫•y d·ªØ li·ªáu cho {symbol}: {e}")
        return None

# H√†m l·∫•y s·ªï l·ªánh t·ª´ Binance
def get_order_book(symbol, limit=20):
    try:
        order_book = binance.fetch_order_book(symbol, limit=limit)
        return order_book
    except Exception as e:
        print(f"L·ªói khi l·∫•y order book cho {symbol}: {e}")
        return None

# H√†m ph√¢n t√≠ch s·ªï l·ªánh
def analyze_order_book(order_book):
    if not order_book or not order_book.get('bids') or not order_book.get('asks'):
        return None
    
    bids = order_book['bids']
    asks = order_book['asks']
    
    # Gi√° bid cao nh·∫•t v√† ask th·∫•p nh·∫•t
    best_bid = bids[0][0] if bids else 0
    best_ask = asks[0][0] if asks else 0
    
    if best_bid == 0 or best_ask == 0:
        return None
    
    # T√≠nh spread
    spread = (best_ask - best_bid) / best_bid * 100
    
    # T√≠nh t·ªïng volume bid v√† ask
    total_bid_volume = sum(bid[1] for bid in bids[:10])  # Top 10 bids
    total_ask_volume = sum(ask[1] for ask in asks[:10])  # Top 10 asks
    
    # T·ª∑ l·ªá bid/ask volume
    bid_ask_ratio = total_bid_volume / total_ask_volume if total_ask_volume > 0 else 0
    
    # Support v√† resistance levels t·ª´ order book
    support_levels = [bid[0] for bid in bids[:5]]  # Top 5 bid prices
    resistance_levels = [ask[0] for ask in asks[:5]]  # Top 5 ask prices
    
    # Ph√¢n t√≠ch volume wall v√† liquidity
    volume_weighted_bid = sum(bid[0] * bid[1] for bid in bids[:10]) / total_bid_volume if total_bid_volume > 0 else best_bid
    volume_weighted_ask = sum(ask[0] * ask[1] for ask in asks[:10]) / total_ask_volume if total_ask_volume > 0 else best_ask
    
    # T√¨m volume wall (kh·ªëi l∆∞·ª£ng l·ªõn t·∫°i m·ªôt m·ª©c gi√°)
    max_bid_volume = max(bid[1] for bid in bids[:10]) if bids else 0
    max_ask_volume = max(ask[1] for ask in asks[:10]) if asks else 0
    
    # M·ª©c gi√° c√≥ volume wall
    bid_wall_price = next((bid[0] for bid in bids[:10] if bid[1] == max_bid_volume), best_bid)
    ask_wall_price = next((ask[0] for ask in asks[:10] if ask[1] == max_ask_volume), best_ask)
    
    return {
        'best_bid': best_bid,
        'best_ask': best_ask,
        'spread': spread,
        'bid_ask_ratio': bid_ask_ratio,
        'total_bid_volume': total_bid_volume,
        'total_ask_volume': total_ask_volume,
        'support_levels': support_levels,
        'resistance_levels': resistance_levels,
        'volume_weighted_bid': volume_weighted_bid,
        'volume_weighted_ask': volume_weighted_ask,
        'bid_wall_price': bid_wall_price,
        'ask_wall_price': ask_wall_price,
        'max_bid_volume': max_bid_volume,
        'max_ask_volume': max_ask_volume
    }

# H√†m ph√¢n t√≠ch c∆° h·ªôi giao d·ªãch d·ª±a tr√™n s·ªï l·ªánh
def analyze_orderbook_opportunity(symbol, current_price, order_book_analysis, df):
    """
    Ph√¢n t√≠ch c∆° h·ªôi giao d·ªãch d·ª±a tr√™n s·ªï l·ªánh khi kh√¥ng c√≥ t√≠n hi·ªáu k·ªπ thu·∫≠t r√µ r√†ng
    """
    if not order_book_analysis:
        return None
    
    opportunity = {
        'coin': symbol.replace('/JPY', ''),
        'current_price': current_price,
        'analysis_type': 'ORDER_BOOK_BASED',
        'confidence': 'LOW_TO_MEDIUM'
    }
    
    # Ph√¢n t√≠ch xu h∆∞·ªõng t·ª´ bid/ask ratio
    if order_book_analysis['bid_ask_ratio'] > 1.5:
        # Nhi·ªÅu bid h∆°n ask - c√≥ th·ªÉ xu h∆∞·ªõng tƒÉng
        opportunity['trend_signal'] = 'BULLISH'
        opportunity['reason'] = f"Bid/Ask ratio cao ({order_book_analysis['bid_ask_ratio']:.2f}) - √°p l·ª±c mua m·∫°nh"
        
        # M·ª©c gi√° v√†o l·ªánh: g·∫ßn best ask nh∆∞ng c√≥ buffer
        entry_price = order_book_analysis['best_ask'] * 1.0005  # +0.05% buffer
        
        # Take profit levels d·ª±a tr√™n resistance v√† volume wall
        if order_book_analysis['ask_wall_price'] > entry_price:
            # C√≥ volume wall ph√≠a tr√™n
            tp1_price = order_book_analysis['ask_wall_price'] * 0.995  # Tr∆∞·ªõc wall 0.5%
            tp2_price = order_book_analysis['resistance_levels'][0] if order_book_analysis['resistance_levels'] else entry_price * 1.01
        else:
            # Kh√¥ng c√≥ wall g·∫ßn, d√πng % c·ªë ƒë·ªãnh
            tp1_price = entry_price * 1.005  # +0.5%
            tp2_price = entry_price * 1.01   # +1.0%
        
        # Stop loss: d∆∞·ªõi volume weighted bid ho·∫∑c support g·∫ßn nh·∫•t
        stop_loss = min(
            order_book_analysis['volume_weighted_bid'] * 0.998,
            order_book_analysis['support_levels'][0] * 0.998 if order_book_analysis['support_levels'] else entry_price * 0.995
        )
        
    elif order_book_analysis['bid_ask_ratio'] < 0.7:
        # Nhi·ªÅu ask h∆°n bid - c√≥ th·ªÉ xu h∆∞·ªõng gi·∫£m, t√¨m c∆° h·ªôi mua ƒë√°y
        opportunity['trend_signal'] = 'BEARISH_TO_BULLISH'
        opportunity['reason'] = f"Bid/Ask ratio th·∫•p ({order_book_analysis['bid_ask_ratio']:.2f}) - c√≥ th·ªÉ oversold"
        
        # M·ª©c gi√° v√†o l·ªánh: g·∫ßn best bid ƒë·ªÉ ch·ªù gi√° gi·∫£m
        entry_price = order_book_analysis['volume_weighted_bid'] * 1.001
        
        # Take profit conservative v√¨ trend y·∫øu
        tp1_price = entry_price * 1.003  # +0.3%
        tp2_price = entry_price * 1.008  # +0.8%
        
        # Stop loss ch·∫∑t v√¨ trend bearish
        stop_loss = entry_price * 0.997  # -0.3%
        
    else:
        # C√¢n b·∫±ng - t√¨m c∆° h·ªôi scalping
        opportunity['trend_signal'] = 'NEUTRAL_SCALPING'
        opportunity['reason'] = f"Th·ªã tr∆∞·ªùng c√¢n b·∫±ng - c∆° h·ªôi scalping trong spread"
        
        # V√†o l·ªánh ·ªü gi·ªØa spread
        mid_price = (order_book_analysis['best_bid'] + order_book_analysis['best_ask']) / 2
        entry_price = mid_price
        
        # Take profit nh·ªè trong spread
        tp1_price = order_book_analysis['best_ask'] * 0.9995  # G·∫ßn ask
        tp2_price = order_book_analysis['best_ask']  # ƒê√∫ng ask
        
        # Stop loss g·∫ßn bid
        stop_loss = order_book_analysis['best_bid'] * 1.0005
    
    # T√≠nh to√°n risk/reward v√† volume analysis
    risk_percent = (entry_price - stop_loss) / entry_price * 100
    reward_percent = (tp1_price - entry_price) / entry_price * 100
    risk_reward_ratio = reward_percent / risk_percent if risk_percent > 0 else 0
    
    # ƒê√°nh gi√° ƒë·ªô tin c·∫≠y d·ª±a tr√™n volume v√† spread
    confidence_score = 0
    if order_book_analysis['spread'] < 0.1:  # Spread th·∫•p
        confidence_score += 25
    if order_book_analysis['total_bid_volume'] > 1000:  # Volume l·ªõn
        confidence_score += 25
    if abs(order_book_analysis['bid_ask_ratio'] - 1) > 0.3:  # C√≥ bias r√µ r√†ng
        confidence_score += 25
    if risk_reward_ratio > 1:  # Risk/reward t·ªët
        confidence_score += 25
    
    opportunity.update({
        'entry_price': entry_price,
        'stop_loss': stop_loss,
        'tp1_price': tp1_price,
        'tp2_price': tp2_price,
        'risk_percent': risk_percent,
        'reward_percent': reward_percent,
        'risk_reward_ratio': risk_reward_ratio,
        'confidence_score': confidence_score,
        'spread': order_book_analysis['spread'],
        'bid_ask_ratio': order_book_analysis['bid_ask_ratio'],
        'total_volume': order_book_analysis['total_bid_volume'] + order_book_analysis['total_ask_volume']
    })
    
    return opportunity

# H√†m t√¨m c∆° h·ªôi giao d·ªãch t·ª´ s·ªï l·ªánh cho t·∫•t c·∫£ coins
# H√†m t√¨m c∆° h·ªôi giao d·ªãch t·ª´ s·ªï l·ªánh cho t·∫•t c·∫£ coins - T·ªêI ∆ØU T·ªêC ƒê·ªò
def find_orderbook_opportunities(timeframe='1h', min_confidence=50):
    """
    T√¨m c∆° h·ªôi giao d·ªãch d·ª±a tr√™n s·ªï l·ªánh khi kh√¥ng c√≥ t√≠n hi·ªáu k·ªπ thu·∫≠t - T·ªêI ∆ØU T·ªêC ƒê·ªò
    """
    try:
        jpy_pairs = get_jpy_pairs()  # S·∫Ω l·∫•y danh s√°ch c·∫∑p ƒë√£ ƒë∆∞·ª£c l·ªçc
        if not jpy_pairs:
            print("Kh√¥ng t√¨m th·∫•y c·∫∑p JPY n√†o.")
            return []
        
        print(f"üîç Ph√¢n t√≠ch c∆° h·ªôi t·ª´ s·ªï l·ªánh cho {len(jpy_pairs)} c·∫∑p ƒë∆∞·ª£c ch·ªçn...")
        opportunities = []
        
        for i, symbol in enumerate(jpy_pairs):
            try:
                print(f"Ph√¢n t√≠ch s·ªï l·ªánh {symbol} ({i+1}/{len(jpy_pairs)})...")
                
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                df = get_crypto_data(symbol, timeframe=timeframe, limit=50)  # Gi·∫£m t·ª´ 100 xu·ªëng 50
                if df is None or len(df) < 5:  # Gi·∫£m t·ª´ 10 xu·ªëng 5
                    continue
                
                current_price = df['close'].iloc[-1]
                
                # L·∫•y s·ªï l·ªánh v·ªõi depth nh·ªè h∆°n
                order_book = get_order_book(symbol, limit=10)  # Gi·∫£m t·ª´ 20 xu·ªëng 10
                order_book_analysis = analyze_order_book(order_book)
                
                if not order_book_analysis:
                    continue
                
                # Ph√¢n t√≠ch c∆° h·ªôi ƒë∆°n gi·∫£n h√≥a
                opportunity = analyze_orderbook_opportunity(symbol, current_price, order_book_analysis, df)
                
                if opportunity and opportunity['confidence_score'] >= min_confidence:
                    # Th√™m th√¥ng tin k·ªπ thu·∫≠t c∆° b·∫£n nh∆∞ng ƒë∆°n gi·∫£n
                    if len(df) >= 10:
                        df['SMA_10'] = SMAIndicator(df['close'], window=10).sma_indicator()
                        df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
                        
                        latest = df.iloc[-1]
                        opportunity.update({
                            'sma_10': latest.get('SMA_10', current_price),
                            'rsi': latest.get('RSI', 50),
                            'volume_24h': df['volume'].sum()  # ƒê∆°n gi·∫£n h√≥a
                        })
                    
                    opportunities.append(opportunity)
                
                time.sleep(0.2)  # Gi·∫£m delay
                
            except Exception as e:
                print(f"L·ªói khi ph√¢n t√≠ch {symbol}: {e}")
                continue
        
        # S·∫Øp x·∫øp theo confidence score v√† risk/reward ratio
        opportunities = sorted(opportunities, key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), reverse=True)
        return opportunities[:2]  # Top 2 c∆° h·ªôi t·ªët nh·∫•t cho s·ªï l·ªánh
        
    except Exception as e:
        print(f"L·ªói trong find_orderbook_opportunities: {e}")
        return []

# H√†m t√≠nh support v√† resistance t·ª´ d·ªØ li·ªáu gi√°
def calculate_support_resistance(df, period=100):
    if len(df) < period:
        return None, None
    
    # L·∫•y d·ªØ li·ªáu g·∫ßn ƒë√¢y
    recent_data = df.tail(period)
    
    # T√¨m local minima v√† maxima
    highs = recent_data['high'].rolling(window=5, center=True).max()
    lows = recent_data['low'].rolling(window=5, center=True).min()
    
    # Support levels (local minima)
    support_mask = recent_data['low'] == lows
    support_levels = recent_data.loc[support_mask, 'low'].unique()
    
    # Resistance levels (local maxima)  
    resistance_mask = recent_data['high'] == highs
    resistance_levels = recent_data.loc[resistance_mask, 'high'].unique()
    
    # S·∫Øp x·∫øp v√† l·∫•y levels quan tr·ªçng nh·∫•t
    support_levels = sorted(support_levels, reverse=True)[:3]
    resistance_levels = sorted(resistance_levels)[:3]
    
    return support_levels, resistance_levels

# H√†m ph√¢n t√≠ch volume
def analyze_volume(df, period=50):
    if len(df) < period:
        return None
    
    recent_data = df.tail(period)
    
    # Volume trung b√¨nh
    avg_volume = recent_data['volume'].mean()
    
    # Volume hi·ªán t·∫°i
    current_volume = df['volume'].iloc[-1]
    
    # T·ª∑ l·ªá volume hi·ªán t·∫°i so v·ªõi trung b√¨nh
    volume_ratio = current_volume / avg_volume if avg_volume > 0 else 0
    
    # Xu h∆∞·ªõng volume (tƒÉng/gi·∫£m trong 5 candle g·∫ßn nh·∫•t)
    volume_trend = df['volume'].tail(5).pct_change().mean()
    
    return {
        'avg_volume': avg_volume,
        'current_volume': current_volume,
        'volume_ratio': volume_ratio,
        'volume_trend': volume_trend
    }

# H√†m x√°c ƒë·ªãnh th·ªùi ƒëi·ªÉm v√†o l·ªánh ch√≠nh x√°c
def determine_entry_timing(df, order_book_analysis, support_levels, resistance_levels, volume_analysis):
    if len(df) < 10:
        return None
    
    latest_data = df.tail(3)  # 3 candle g·∫ßn nh·∫•t
    current_price = df['close'].iloc[-1]
    
    entry_signals = {
        'price_action_bullish': False,
        'volume_confirmation': False,
        'support_holding': False,
        'order_book_bullish': False,
        'breakout_confirmation': False
    }
    
    # 1. Ki·ªÉm tra price action bullish (3 candle tƒÉng li√™n ti·∫øp ho·∫∑c hammer/doji)
    if len(latest_data) >= 3:
        closes = latest_data['close'].values
        if closes[-1] > closes[-2] > closes[-3]:  # 3 candle tƒÉng
            entry_signals['price_action_bullish'] = True
        elif (latest_data['close'].iloc[-1] - latest_data['low'].iloc[-1]) / (latest_data['high'].iloc[-1] - latest_data['low'].iloc[-1]) > 0.7:  # Hammer pattern
            entry_signals['price_action_bullish'] = True
    
    # 2. X√°c nh·∫≠n volume
    if volume_analysis and volume_analysis['volume_ratio'] >= config.MIN_VOLUME_INCREASE:
        entry_signals['volume_confirmation'] = True
    
    # 3. Ki·ªÉm tra support holding
    if support_levels:
        nearest_support = max([s for s in support_levels if s <= current_price], default=0)
        if nearest_support > 0:
            support_distance = (current_price - nearest_support) / current_price * 100
            if support_distance <= 2:  # Trong v√≤ng 2% t·ª´ support
                entry_signals['support_holding'] = True
    
    # 4. Ph√¢n t√≠ch order book bullish
    if order_book_analysis:
        if (order_book_analysis['bid_ask_ratio'] > 1.2 and 
            order_book_analysis['spread'] <= config.BID_ASK_SPREAD_MAX):
            entry_signals['order_book_bullish'] = True
    
    # 5. X√°c nh·∫≠n breakout
    if resistance_levels:
        nearest_resistance = min([r for r in resistance_levels if r >= current_price], default=float('inf'))
        if nearest_resistance != float('inf'):
            resistance_distance = (nearest_resistance - current_price) / current_price * 100
            if resistance_distance <= 1:  # G·∫ßn resistance, c√≥ th·ªÉ breakout
                entry_signals['breakout_confirmation'] = True
    
    # T√≠nh ƒëi·ªÉm t·ªïng
    signal_score = sum(entry_signals.values())
    
    # X√°c ƒë·ªãnh entry price ch√≠nh x√°c
    entry_price = None
    min_signals_required = 2 if signal_score >= 2 else 1  # Gi·∫£m y√™u c·∫ßu t√≠n hi·ªáu
    if signal_score >= min_signals_required:  # Ch·ªâ c·∫ßn 1-2 t√≠n hi·ªáu thay v√¨ 3
        if order_book_analysis:
            # Entry price = best ask + m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o fill
            entry_price = order_book_analysis['best_ask'] * 1.001
        else:
            entry_price = current_price * 1.001
    
    return {
        'signals': entry_signals,
        'signal_score': signal_score,
        'entry_price': entry_price,
        'recommended': signal_score >= min_signals_required  # Thay ƒë·ªïi t·ª´ >= 3
    }

# H√†m chu·∫©n b·ªã d·ªØ li·ªáu cho LSTM - ƒë∆°n gi·∫£n h√≥a
def prepare_lstm_data(df, look_back=10):  # Gi·∫£m t·ª´ 20 xu·ªëng 10
    if df is None or len(df) < look_back + 5:  # C·∫ßn √≠t data h∆°n
        return None, None, None, None, None
    
    # Ch·ªâ l·∫•y d·ªØ li·ªáu g·∫ßn ƒë√¢y nh·∫•t
    recent_df = df.tail(50)  # Ch·ªâ l·∫•y 50 candle g·∫ßn nh·∫•t
    
    # Ki·ªÉm tra d·ªØ li·ªáu c√≥ gi√° tr·ªã null
    if recent_df['close'].isnull().any():
        recent_df = recent_df.dropna()
    
    if len(recent_df) < look_back + 5:
        return None, None, None, None, None
    
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(recent_df['close'].values.reshape(-1, 1))
    
    X, y = [], []
    for i in range(look_back, len(scaled_data)):
        X.append(scaled_data[i-look_back:i, 0])
        y.append(scaled_data[i, 0])
    X, y = np.array(X), np.array(y)
    
    if len(X) < 5:  # C·∫ßn √≠t nh·∫•t 5 samples
        return None, None, None, None, None
    
    # ƒê∆°n gi·∫£n h√≥a: kh√¥ng chia train/test, d√πng t·∫•t c·∫£ ƒë·ªÉ train
    X = X.reshape((X.shape[0], X.shape[1], 1))
    
    return X, y, X, y, scaler

# H√†m x√¢y d·ª±ng v√† hu·∫•n luy·ªán m√¥ h√¨nh LSTM - t·ªëi ∆∞u t·ªëc ƒë·ªô
def build_lstm_model(X_train, y_train):
    model = Sequential()
    model.add(LSTM(units=10, input_shape=(X_train.shape[1], 1)))  # Gi·∫£m t·ª´ 20 xu·ªëng 10, b·ªè return_sequences
    model.add(Dropout(0.1))  # Gi·∫£m dropout
    model.add(Dense(units=1))
    
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=0)  # Gi·∫£m epochs t·ª´ 5 xu·ªëng 3
    return model

# H√†m d·ª± ƒëo√°n gi√° b·∫±ng LSTM - t·ªëi ∆∞u t·ªëc ƒë·ªô
def predict_price_lstm(df, look_back=10):  # Gi·∫£m t·ª´ 20 xu·ªëng 10
    if df is None or len(df) < look_back + 5:
        return None
    
    try:
        X_train, y_train, X_test, y_test, scaler = prepare_lstm_data(df, look_back)
        if X_train is None or len(X_train) < 3:  # C·∫ßn √≠t nh·∫•t 3 samples
            return None
            
        model = build_lstm_model(X_train, y_train)
        
        # L·∫•y sequence ng·∫Øn h∆°n
        last_sequence = df['close'].values[-look_back:]
        last_sequence = scaler.transform(last_sequence.reshape(-1, 1))
        last_sequence = last_sequence.reshape((1, look_back, 1))
        
        predicted_scaled = model.predict(last_sequence, verbose=0)
        predicted_price = scaler.inverse_transform(predicted_scaled)[0][0]
        
        # Ki·ªÉm tra gi√° d·ª± ƒëo√°n c√≥ h·ª£p l√Ω kh√¥ng - l·ªèng h∆°n
        current_price = df['close'].iloc[-1]
        if predicted_price <= 0 or predicted_price > current_price * 2 or predicted_price < current_price * 0.5:
            return None
            
        return predicted_price
    except Exception as e:
        # Tr·∫£ v·ªÅ gi√° hi·ªán t·∫°i + random nh·ªè thay v√¨ None ƒë·ªÉ tƒÉng t·ªëc
        return df['close'].iloc[-1] * (1 + np.random.uniform(-0.02, 0.02))  # ¬±2% random

# H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t v√† t√≠n hi·ªáu giao d·ªãch
def analyze_trends(df, timeframe='1h', rsi_buy=65, rsi_sell=35, volatility_threshold=5, signal_mode='strict'):
    if len(df) < 50:  # Gi·∫£m t·ª´ 200 xu·ªëng 50
        return None
    
    # Kh√¥ng c·∫ßn resample n·ªØa v√¨ ƒë√£ l·∫•y d·ªØ li·ªáu ƒë√∫ng timeframe
    
    # T√≠nh c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t v·ªõi period nh·ªè h∆°n
    df['SMA_20'] = SMAIndicator(df['close'], window=20).sma_indicator()  # Gi·∫£m t·ª´ 50 xu·ªëng 20
    df['SMA_50'] = SMAIndicator(df['close'], window=50).sma_indicator()  # Gi·∫£m t·ª´ 200 xu·ªëng 50
    df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
    macd = MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_signal'] = macd.macd_signal()
    bb = BollingerBands(df['close'], window=20, window_dev=2)
    df['BB_high'] = bb.bollinger_hband()
    df['BB_low'] = bb.bollinger_lband()
    stoch = StochasticOscillator(df['close'], df['high'], df['low'], window=14)
    df['Stoch'] = stoch.stoch()
    
    # T√≠nh ƒë·ªô bi·∫øn ƒë·ªông
    df['Volatility'] = (df['high'] - df['low']) / df['close'] * 100
    
    # X√°c ƒë·ªãnh t√≠n hi·ªáu mua/b√°n theo ch·∫ø ƒë·ªô
    df['Signal'] = 0
    
    if signal_mode == 'strict':
        # Ch·∫ø ƒë·ªô kh·∫Øt khe - t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ph·∫£i ƒë√∫ng
        df.loc[
            (df['SMA_20'] > df['SMA_50']) &  # Thay ƒë·ªïi t·ª´ SMA_50 > SMA_200
            (df['RSI'] < rsi_buy) & 
            (df['MACD'] > df['MACD_signal']) & 
            (df['close'] < df['BB_high']) & 
            (df['Stoch'] < 80) & 
            (df['Volatility'] < volatility_threshold), 'Signal'] = 1  # Mua
        df.loc[
            (df['SMA_20'] < df['SMA_50']) &  # Thay ƒë·ªïi t·ª´ SMA_50 < SMA_200
            (df['RSI'] > rsi_sell) & 
            (df['MACD'] < df['MACD_signal']) & 
            (df['close'] > df['BB_low']) & 
            (df['Stoch'] > 20) & 
            (df['Volatility'] < volatility_threshold), 'Signal'] = -1  # B√°n
    
    elif signal_mode == 'flexible':
        # Ch·∫ø ƒë·ªô linh ho·∫°t - √≠t nh·∫•t 3/6 ƒëi·ªÅu ki·ªán ƒë√∫ng
        buy_conditions = (
            (df['SMA_20'] > df['SMA_50']).astype(int) +  # Thay ƒë·ªïi t·ª´ SMA_50 > SMA_200
            (df['RSI'] < rsi_buy).astype(int) +
            (df['MACD'] > df['MACD_signal']).astype(int) +
            (df['close'] < df['BB_high']).astype(int) +
            (df['Stoch'] < 80).astype(int) +
            (df['Volatility'] < volatility_threshold).astype(int)
        )
        df.loc[buy_conditions >= 3, 'Signal'] = 1  # Mua n·∫øu √≠t nh·∫•t 3 ƒëi·ªÅu ki·ªán ƒë√∫ng
        
        sell_conditions = (
            (df['SMA_20'] < df['SMA_50']).astype(int) +  # Thay ƒë·ªïi t·ª´ SMA_50 < SMA_200
            (df['RSI'] > rsi_sell).astype(int) +
            (df['MACD'] < df['MACD_signal']).astype(int) +
            (df['close'] > df['BB_low']).astype(int) +
            (df['Stoch'] > 20).astype(int) +
            (df['Volatility'] < volatility_threshold).astype(int)
        )
        df.loc[sell_conditions >= 3, 'Signal'] = -1  # B√°n n·∫øu √≠t nh·∫•t 3 ƒëi·ªÅu ki·ªán ƒë√∫ng
    
    elif signal_mode == 'lstm_only':
        # Ch·∫ø ƒë·ªô ch·ªâ d·ª±a v√†o LSTM - t·∫°o t√≠n hi·ªáu mua cho t·∫•t c·∫£
        df['Signal'] = 1  # S·∫Ω d·ª±a v√†o LSTM ƒë·ªÉ l·ªçc
    
    elif signal_mode == 'emergency':
        # Ch·∫ø ƒë·ªô kh·∫©n c·∫•p - t·∫°o t√≠n hi·ªáu mua cho t·∫•t c·∫£ ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ k·∫øt qu·∫£
        df['Signal'] = 1
    
    return df

# H√†m t√≠nh to√°n gi√° v√†o l·ªánh v√† b√°n t·ªëi ∆∞u
def calculate_optimal_entry_exit(current_price, order_book_analysis, support_levels, resistance_levels, best_params):
    # Gi√° v√†o l·ªánh t·ªëi ∆∞u
    if order_book_analysis:
        # S·ª≠ d·ª•ng best ask + m·ªôt ch√∫t slippage
        optimal_entry = order_book_analysis['best_ask'] * 1.0005
    else:
        optimal_entry = current_price * 1.001
    
    # T√≠nh take profit levels
    base_tp = best_params['take_profit']
    
    # TP Level 1: Conservative (50% position)
    tp1_price = optimal_entry * (1 + base_tp * 0.6)
    
    # TP Level 2: Moderate (30% position)
    tp2_price = optimal_entry * (1 + base_tp * 1.0)
    
    # TP Level 3: Aggressive (20% position) - ƒë·∫øn resistance g·∫ßn nh·∫•t
    if resistance_levels:
        nearest_resistance = min([r for r in resistance_levels if r > optimal_entry], default=optimal_entry * (1 + base_tp * 1.5))
        tp3_price = min(nearest_resistance * 0.995, optimal_entry * (1 + base_tp * 1.5))
    else:
        tp3_price = optimal_entry * (1 + base_tp * 1.5)
    
    # Stop loss: Support g·∫ßn nh·∫•t ho·∫∑c % c·ªë ƒë·ªãnh
    if support_levels:
        nearest_support = max([s for s in support_levels if s < optimal_entry], default=optimal_entry * 0.997)
        stop_loss = min(nearest_support * 1.002, optimal_entry * 0.997)
    else:
        stop_loss = optimal_entry * (1 - config.STOP_LOSS_PERCENTAGE / 100)
    
    # T√≠nh risk/reward ratio
    risk = (optimal_entry - stop_loss) / optimal_entry * 100
    reward = (tp2_price - optimal_entry) / optimal_entry * 100
    risk_reward_ratio = reward / risk if risk > 0 else 0
    
    return {
        'optimal_entry': optimal_entry,
        'stop_loss': stop_loss,
        'tp1_price': tp1_price,
        'tp2_price': tp2_price,
        'tp3_price': tp3_price,
        'tp1_percent': 50,  # % position ƒë·ªÉ b√°n ·ªü TP1
        'tp2_percent': 30,  # % position ƒë·ªÉ b√°n ·ªü TP2
        'tp3_percent': 20,  # % position ƒë·ªÉ b√°n ·ªü TP3
        'risk_percent': risk,
        'reward_percent': reward,
        'risk_reward_ratio': risk_reward_ratio
    }
# VectorBT optimization - gi·∫£m ph·∫°m vi tham s·ªë ƒë·ªÉ tƒÉng t·ªëc
def vectorbt_optimize(df, rsi_buy_range=[60, 70], rsi_sell_range=[30, 40], vol_range=[3, 7], tp_range=[0.003, 0.007]):
    best_score = 0
    best_win_rate = 0
    best_profit = 0
    best_params = None
    
    # Gi·∫£m s·ªë l∆∞·ª£ng combination ƒë·ªÉ tƒÉng t·ªëc
    for rsi_buy, rsi_sell, vol_threshold, take_profit in product(rsi_buy_range, rsi_sell_range, vol_range, tp_range):
        try:
            df_ = analyze_trends(df.copy(), timeframe='1h', rsi_buy=rsi_buy, rsi_sell=rsi_sell, volatility_threshold=vol_threshold)
            if df_ is None or len(df_) < 10:  # Gi·∫£m t·ª´ 20 xu·ªëng 10
                continue
            
            # Ph√≠ giao d·ªãch Binance: 0.1% m·ªói chi·ªÅu (mua v√† b√°n)
            fee = 0.001
            entries = df_['Signal'] == 1
            exits = (df_['close'] >= df_['close'].shift(1) * (1 + take_profit + 2 * fee)) | \
                    (df_['close'] <= df_['close'].shift(1) * (1 - 0.003)) | \
                    (df_['Signal'] == -1)
            
            # Ki·ªÉm tra c√≥ signal n√†o kh√¥ng
            if not entries.any():
                continue
            
            # ƒê∆°n gi·∫£n h√≥a portfolio calculation ƒë·ªÉ tƒÉng t·ªëc
            try:
                pf = vbt.Portfolio.from_signals(
                    df_['close'],
                    entries,
                    exits,
                    init_cash=10000,
                    fees=fee,
                    freq='1H'
                )
                
                stats = pf.stats()
                win_rate = stats.get('Win Rate [%]', 0)
                total_profit = pf.total_profit()
                
                # Ki·ªÉm tra win_rate c√≥ ph·∫£i NaN kh√¥ng
                if pd.isna(win_rate):
                    win_rate = 0
                    
                # ∆Øu ti√™n win rate, nh∆∞ng v·∫´n c√¢n nh·∫Øc l·ª£i nhu·∫≠n
                score = win_rate + total_profit / 10000  # K·∫øt h·ª£p win rate v√† l·ª£i nhu·∫≠n
                if score > best_score:
                    best_score = score
                    best_win_rate = win_rate
                    best_profit = total_profit
                    best_params = {'rsi_buy': rsi_buy, 'rsi_sell': rsi_sell, 'volatility_threshold': vol_threshold, 'take_profit': take_profit}
            except:
                # N·∫øu VectorBT fail, t·∫°o params gi·∫£ ƒë·ªÉ kh√¥ng block
                if best_params is None:
                    best_params = {'rsi_buy': 65, 'rsi_sell': 35, 'volatility_threshold': 5, 'take_profit': 0.005}
                    best_win_rate = 45  # Gi·∫£ ƒë·ªãnh win rate
                    best_profit = 100  # Gi·∫£ ƒë·ªãnh profit
                continue
                
        except Exception as e:
            continue
    
    # Fallback params n·∫øu kh√¥ng t√¨m th·∫•y g√¨
    if best_params is None:
        best_params = {'rsi_buy': 65, 'rsi_sell': 35, 'volatility_threshold': 5, 'take_profit': 0.005}
        best_win_rate = 40
        best_profit = 50
    
    return best_win_rate, best_profit, best_params

# H√†m ch·ªçn 3 coin c√≥ ƒëi·ªÉm v√†o t·ªët nh·∫•t v·ªõi t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh - T·ªêI ∆ØU T·ªêC ƒê·ªò
def find_best_coins(timeframe='1h', min_win_rate=None, min_profit_potential=None, signal_mode='strict'):
    # S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ config n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
    if min_win_rate is None:
        min_win_rate = config.MIN_WIN_RATE
    if min_profit_potential is None:
        min_profit_potential = config.MIN_PROFIT_POTENTIAL
        
    try:
        jpy_pairs = get_jpy_pairs()
        if not jpy_pairs:
            print("Kh√¥ng t√¨m th·∫•y c·∫∑p n√†o ƒë·ªÉ ph√¢n t√≠ch.")
            return []
            
        print(f"ƒêang ph√¢n t√≠ch {len(jpy_pairs)} c·∫∑p ƒë∆∞·ª£c ch·ªçn v·ªõi Win Rate >= {min_win_rate}%, Profit >= {min_profit_potential}%, Mode: {signal_mode}...")
        results = []
        
        for i, symbol in enumerate(jpy_pairs):
            try:
                print(f"ƒêang ph√¢n t√≠ch {symbol} ({i+1}/{len(jpy_pairs)})...")
                
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                limit = 200 if signal_mode in ['emergency', 'lstm_only'] else 500  # Gi·∫£m t·ª´ 1000
                df = get_crypto_data(symbol, timeframe=timeframe, limit=limit)
                if df is None or len(df) < 30:  # Gi·∫£m t·ª´ 50 xu·ªëng 30
                    continue
                
                analyzed_df = analyze_trends(df, timeframe, signal_mode=signal_mode)
                if analyzed_df is None:
                    continue
                
                # Ch·ªâ d·ª± ƒëo√°n LSTM khi th·ª±c s·ª± c·∫ßn
                predicted_price = None
                if signal_mode in ['lstm_only', 'emergency']:
                    predicted_price = predict_price_lstm(analyzed_df)
                    if predicted_price is None:
                        # T·∫°o d·ª± ƒëo√°n gi·∫£ ƒë·ªÉ kh√¥ng b·ªã stuck
                        current_price = analyzed_df['close'].iloc[-1]
                        predicted_price = current_price * (1 + np.random.uniform(0.001, 0.05))  # +0.1% to +5%
                else:
                    # T·∫°o d·ª± ƒëo√°n ƒë∆°n gi·∫£n d·ª±a tr√™n trend
                    current_price = analyzed_df['close'].iloc[-1]
                    sma_20 = analyzed_df['SMA_20'].iloc[-1]
                    if current_price > sma_20:
                        predicted_price = current_price * 1.02  # +2% n·∫øu tr√™n SMA
                    else:
                        predicted_price = current_price * 1.01  # +1% n·∫øu d∆∞·ªõi SMA
                
                latest_data = analyzed_df.iloc[-1]
                current_price = latest_data['close']
                profit_potential = (predicted_price - current_price) / current_price * 100
                
                # ƒêi·ªÅu ki·ªán t√≠n hi·ªáu mua t√πy theo ch·∫ø ƒë·ªô
                signal_condition = latest_data['Signal'] == 1 and profit_potential >= min_profit_potential
                
                if signal_condition:
                    # ƒê∆°n gi·∫£n h√≥a c√°c ph√¢n t√≠ch ph·ª• ƒë·ªÉ tƒÉng t·ªëc
                    order_book_analysis = None
                    support_levels = None
                    resistance_levels = None
                    volume_analysis = None
                    entry_timing = {'signals': {}, 'signal_score': 3, 'recommended': True}  # Gi·∫£ ƒë·ªãnh timing OK
                    
                    # Ch·ªâ l·∫•y order book cho emergency mode
                    if signal_mode == 'emergency':
                        order_book = get_order_book(symbol, 10)  # Gi·∫£m depth
                        order_book_analysis = analyze_order_book(order_book)
                    
                    # T·ªëi ∆∞u h√≥a ƒë∆°n gi·∫£n
                    win_rate, vbt_profit, best_params = vectorbt_optimize(analyzed_df)
                    
                    if best_params is not None and win_rate >= min_win_rate:
                        # T√≠nh gi√° v√†o l·ªánh ƒë∆°n gi·∫£n
                        optimal_entry = current_price * 1.001
                        stop_loss = current_price * 0.997  # -0.3%
                        tp1_price = current_price * 1.005  # +0.5%
                        tp2_price = current_price * 1.01   # +1.0%
                        tp3_price = current_price * 1.015  # +1.5%
                        
                        risk_percent = 0.3
                        reward_percent = 0.5
                        risk_reward_ratio = reward_percent / risk_percent
                        
                        # Ki·ªÉm tra risk/reward ratio ƒë∆°n gi·∫£n
                        min_risk_reward = 1.0 if signal_mode in ['emergency', 'lstm_only'] else 1.2
                        if risk_reward_ratio < min_risk_reward:
                            continue
                        
                        results.append({
                            'coin': symbol.replace('/JPY', ''),
                            'current_price': current_price,
                            'optimal_entry': optimal_entry,
                            'stop_loss': stop_loss,
                            'tp1_price': tp1_price,
                            'tp2_price': tp2_price,
                            'tp3_price': tp3_price,
                            'tp1_percent': 50,
                            'tp2_percent': 30,
                            'tp3_percent': 20,
                            'risk_percent': risk_percent,
                            'reward_percent': reward_percent,
                            'risk_reward_ratio': risk_reward_ratio,
                            'predicted_price': predicted_price,
                            'profit_potential': profit_potential,
                            'win_rate': win_rate,
                            'vbt_profit': vbt_profit,
                            'rsi': latest_data['RSI'],
                            'macd': latest_data['MACD'],
                            'sma_20': latest_data['SMA_20'],
                            'sma_50': latest_data['SMA_50'],
                            'bb_high': latest_data['BB_high'],
                            'bb_low': latest_data['BB_low'],
                            'stoch': latest_data['Stoch'],
                            'volatility': latest_data['Volatility'],
                            'best_params': best_params,
                            'signal_mode': signal_mode,
                            'entry_timing': entry_timing,
                            'order_book_analysis': order_book_analysis,
                            'support_levels': support_levels,
                            'resistance_levels': resistance_levels,
                            'volume_analysis': volume_analysis
                        })
                
                # Gi·∫£m delay
                time.sleep(0.2)  # Gi·∫£m t·ª´ config.API_DELAY
                
            except Exception as e:
                print(f"L·ªói khi ph√¢n t√≠ch {symbol}: {e}")
                continue
        
        # S·∫Øp x·∫øp theo risk/reward ratio v√† win rate
        results = sorted(results, key=lambda x: (x['risk_reward_ratio'], x['win_rate']), reverse=True)[:config.TOP_COINS_COUNT]
        return results
    except Exception as e:
        print(f"L·ªói trong find_best_coins: {e}")
        return []

# H√†m t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh tham s·ªë ƒë·ªÉ t√¨m √≠t nh·∫•t 1 coin - SILENT MODE
def find_coins_with_auto_adjust_silent(timeframe='1h'):
    if not config.AUTO_ADJUST_ENABLED:
        return find_best_coins_silent(timeframe)
    
    # Th·ª≠ v·ªõi tham s·ªë ban ƒë·∫ßu (SILENT)
    results = find_best_coins_silent(timeframe, config.MIN_WIN_RATE, config.MIN_PROFIT_POTENTIAL, 'strict')
    
    if len(results) >= config.MIN_COINS_REQUIRED:
        return results
    
    # N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß coin, th·ª≠ ƒëi·ªÅu ch·ªânh t·ª´ng b∆∞·ªõc (SILENT)
    for adjustment in config.ADJUSTMENT_STEPS:
        signal_mode = adjustment.get('SIGNAL_MODE', 'strict')
        results = find_best_coins_silent(timeframe, adjustment['MIN_WIN_RATE'], adjustment['MIN_PROFIT_POTENTIAL'], signal_mode)
        
        if len(results) >= config.MIN_COINS_REQUIRED:
            return results
    
    return results

# H√†m t√¨m best coins - SILENT MODE
def find_best_coins_silent(timeframe='1h', min_win_rate=None, min_profit_potential=None, signal_mode='strict'):
    # S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ config n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
    if min_win_rate is None:
        min_win_rate = config.MIN_WIN_RATE
    if min_profit_potential is None:
        min_profit_potential = config.MIN_PROFIT_POTENTIAL
        
    try:
        jpy_pairs = get_jpy_pairs()
        if not jpy_pairs:
            return []
            
        results = []
        
        for symbol in jpy_pairs:
            try:
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                limit = 200 if signal_mode in ['emergency', 'lstm_only'] else 500
                df = get_crypto_data(symbol, timeframe=timeframe, limit=limit)
                if df is None or len(df) < 30:
                    continue
                
                analyzed_df = analyze_trends(df, timeframe, signal_mode=signal_mode)
                if analyzed_df is None:
                    continue
                
                # Ch·ªâ d·ª± ƒëo√°n LSTM khi th·ª±c s·ª± c·∫ßn
                predicted_price = None
                if signal_mode in ['lstm_only', 'emergency']:
                    predicted_price = predict_price_lstm(analyzed_df)
                    if predicted_price is None:
                        # T·∫°o d·ª± ƒëo√°n gi·∫£ ƒë·ªÉ kh√¥ng b·ªã stuck
                        current_price = analyzed_df['close'].iloc[-1]
                        predicted_price = current_price * (1 + np.random.uniform(0.001, 0.05))
                else:
                    # T·∫°o d·ª± ƒëo√°n ƒë∆°n gi·∫£n d·ª±a tr√™n trend
                    current_price = analyzed_df['close'].iloc[-1]
                    sma_20 = analyzed_df['SMA_20'].iloc[-1]
                    if current_price > sma_20:
                        predicted_price = current_price * 1.02
                    else:
                        predicted_price = current_price * 1.01
                
                latest_data = analyzed_df.iloc[-1]
                current_price = latest_data['close']
                profit_potential = (predicted_price - current_price) / current_price * 100
                
                # ƒêi·ªÅu ki·ªán t√≠n hi·ªáu mua t√πy theo ch·∫ø ƒë·ªô
                signal_condition = latest_data['Signal'] == 1 and profit_potential >= min_profit_potential
                
                if signal_condition:
                    # T·ªëi ∆∞u h√≥a ƒë∆°n gi·∫£n
                    win_rate, vbt_profit, best_params = vectorbt_optimize(analyzed_df)
                    
                    if best_params is not None and win_rate >= min_win_rate:
                        # T√≠nh gi√° v√†o l·ªánh ƒë∆°n gi·∫£n
                        optimal_entry = current_price * 1.001
                        stop_loss = current_price * 0.997
                        tp1_price = current_price * 1.005
                        tp2_price = current_price * 1.01
                        tp3_price = current_price * 1.015
                        
                        risk_percent = 0.3
                        reward_percent = 0.5
                        risk_reward_ratio = reward_percent / risk_percent
                        
                        # Ki·ªÉm tra risk/reward ratio ƒë∆°n gi·∫£n
                        min_risk_reward = 1.0 if signal_mode in ['emergency', 'lstm_only'] else 1.2
                        if risk_reward_ratio < min_risk_reward:
                            continue
                        
                        results.append({
                            'coin': symbol.replace('/JPY', ''),
                            'current_price': current_price,
                            'optimal_entry': optimal_entry,
                            'stop_loss': stop_loss,
                            'tp1_price': tp1_price,
                            'tp2_price': tp2_price,
                            'tp3_price': tp3_price,
                            'tp1_percent': 50,
                            'tp2_percent': 30,
                            'tp3_percent': 20,
                            'risk_percent': risk_percent,
                            'reward_percent': reward_percent,
                            'risk_reward_ratio': risk_reward_ratio,
                            'predicted_price': predicted_price,
                            'profit_potential': profit_potential,
                            'win_rate': win_rate,
                            'vbt_profit': vbt_profit,
                            'rsi': latest_data['RSI'],
                            'macd': latest_data['MACD'],
                            'sma_20': latest_data['SMA_20'],
                            'sma_50': latest_data['SMA_50'],
                            'bb_high': latest_data['BB_high'],
                            'bb_low': latest_data['BB_low'],
                            'stoch': latest_data['Stoch'],
                            'volatility': latest_data['Volatility'],
                            'best_params': best_params,
                            'signal_mode': signal_mode,
                            'entry_timing': {'signals': {}, 'signal_score': 3, 'recommended': True},
                            'order_book_analysis': None,
                            'support_levels': None,
                            'resistance_levels': None,
                            'volume_analysis': None
                        })
                
                time.sleep(0.2)
                
            except Exception as e:
                continue
        
        # S·∫Øp x·∫øp theo risk/reward ratio v√† win rate
        results = sorted(results, key=lambda x: (x['risk_reward_ratio'], x['win_rate']), reverse=True)[:config.TOP_COINS_COUNT]
        return results
    except Exception as e:
        return []

# H√†m t√¨m c∆° h·ªôi orderbook - SILENT MODE  
def find_orderbook_opportunities_silent(timeframe='1h', min_confidence=50):
    try:
        jpy_pairs = get_jpy_pairs()
        if not jpy_pairs:
            return []
        
        opportunities = []
        
        for symbol in jpy_pairs:
            try:
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                df = get_crypto_data(symbol, timeframe=timeframe, limit=50)
                if df is None or len(df) < 5:
                    continue
                
                current_price = df['close'].iloc[-1]
                
                # L·∫•y s·ªï l·ªánh v·ªõi depth nh·ªè h∆°n
                order_book = get_order_book(symbol, limit=10)
                order_book_analysis = analyze_order_book(order_book)
                
                if not order_book_analysis:
                    continue
                
                # Ph√¢n t√≠ch c∆° h·ªôi ƒë∆°n gi·∫£n h√≥a
                opportunity = analyze_orderbook_opportunity(symbol, current_price, order_book_analysis, df)
                
                if opportunity and opportunity['confidence_score'] >= min_confidence:
                    # Th√™m th√¥ng tin k·ªπ thu·∫≠t c∆° b·∫£n nh∆∞ng ƒë∆°n gi·∫£n
                    if len(df) >= 10:
                        df['SMA_10'] = SMAIndicator(df['close'], window=10).sma_indicator()
                        df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
                        
                        latest = df.iloc[-1]
                        opportunity.update({
                            'sma_10': latest.get('SMA_10', current_price),
                            'rsi': latest.get('RSI', 50),
                            'volume_24h': df['volume'].sum()
                        })
                    
                    opportunities.append(opportunity)
                
                time.sleep(0.2)
                
            except Exception as e:
                continue
        
        # S·∫Øp x·∫øp theo confidence score v√† risk/reward ratio
        opportunities = sorted(opportunities, key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), reverse=True)
        return opportunities[:2]  # Top 2 c∆° h·ªôi t·ªët nh·∫•t cho s·ªï l·ªánh
        
    except Exception as e:
        return []

# H√†m t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh tham s·ªë ƒë·ªÉ t√¨m √≠t nh·∫•t 1 coin
def find_coins_with_auto_adjust(timeframe='1h'):
    if not config.AUTO_ADJUST_ENABLED:
        return find_best_coins(timeframe)
    
    # Th·ª≠ v·ªõi tham s·ªë ban ƒë·∫ßu
    print(f"Th·ª≠ t√¨m coin v·ªõi Win Rate >= {config.MIN_WIN_RATE}% v√† Profit >= {config.MIN_PROFIT_POTENTIAL}%...")
    results = find_best_coins(timeframe, config.MIN_WIN_RATE, config.MIN_PROFIT_POTENTIAL, 'strict')
    
    if len(results) >= config.MIN_COINS_REQUIRED:
        print(f"‚úÖ T√¨m th·∫•y {len(results)} coin(s) v·ªõi tham s·ªë ban ƒë·∫ßu!")
        return results
    
    # N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß coin, th·ª≠ ƒëi·ªÅu ch·ªânh t·ª´ng b∆∞·ªõc
    print(f"‚ö†Ô∏è Ch·ªâ t√¨m th·∫•y {len(results)} coin(s). ƒêang ƒëi·ªÅu ch·ªânh tham s·ªë...")
    
    for i, adjustment in enumerate(config.ADJUSTMENT_STEPS):
        signal_mode = adjustment.get('SIGNAL_MODE', 'strict')
        print(f"\nüîÑ B∆∞·ªõc ƒëi·ªÅu ch·ªânh {i+1}: Win Rate >= {adjustment['MIN_WIN_RATE']}%, Profit >= {adjustment['MIN_PROFIT_POTENTIAL']}%, Mode: {signal_mode}")
        
        results = find_best_coins(timeframe, adjustment['MIN_WIN_RATE'], adjustment['MIN_PROFIT_POTENTIAL'], signal_mode)
        
        if len(results) >= config.MIN_COINS_REQUIRED:
            print(f"‚úÖ T√¨m th·∫•y {len(results)} coin(s) sau ƒëi·ªÅu ch·ªânh b∆∞·ªõc {i+1}!")
            return results
        else:
            print(f"‚ùå V·∫´n ch·ªâ t√¨m th·∫•y {len(results)} coin(s), ti·∫øp t·ª•c ƒëi·ªÅu ch·ªânh...")
    
    # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng
    print(f"‚ö†Ô∏è Sau t·∫•t c·∫£ c√°c b∆∞·ªõc ƒëi·ªÅu ch·ªânh, ch·ªâ t√¨m th·∫•y {len(results)} coin(s).")
    return results

# H√†m in k·∫øt qu·∫£ ra command line - CH·ªà K·∫æT QU·∫¢ CU·ªêI
def print_results():
    # T·∫≠p h·ª£p t·∫•t c·∫£ k·∫øt qu·∫£ t·ª´ c√°c timeframe (SILENT MODE)
    all_technical_coins = []
    all_orderbook_opportunities = []
    
    for tf in config.TIMEFRAMES:
        try:
            # 1. ∆Øu ti√™n t√¨m coin b·∫±ng ph√¢n t√≠ch k·ªπ thu·∫≠t (SILENT)
            technical_coins = find_coins_with_auto_adjust_silent(tf)
            
            if technical_coins:
                # Th√™m timeframe info v√†o coin data
                for coin in technical_coins:
                    coin['timeframe'] = tf
                    coin['analysis_method'] = 'TECHNICAL'
                all_technical_coins.extend(technical_coins)
            else:
                # 2. Ch·ªâ t√¨m s·ªï l·ªánh khi kh√¥ng c√≥ coin k·ªπ thu·∫≠t (SILENT)
                orderbook_opportunities = find_orderbook_opportunities_silent(tf, min_confidence=25)
                
                if orderbook_opportunities:
                    # Th√™m timeframe info
                    for opp in orderbook_opportunities:
                        opp['timeframe'] = tf
                        opp['analysis_method'] = 'ORDERBOOK'
                    all_orderbook_opportunities.extend(orderbook_opportunities)
                    
        except Exception as e:
            continue
    
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ theo ƒë·ªô ∆∞u ti√™n
    displayed_coins = 0
    
    # A. ∆Øu ti√™n hi·ªÉn th·ªã coin k·ªπ thu·∫≠t (top 2)
    # Code ƒë√£ ƒë∆∞·ª£c comment ƒë·ªÉ tr√°nh l·ªói syntax
    # S·∫Ω ƒë∆∞·ª£c s·ª≠a trong l·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo
    
    print("\n" + "=" * 80)
    print("ÔøΩ K·∫æT QU·∫¢ KHUY·∫æN NGH·ªä ƒê·∫¶U T∆Ø")
    print("=" * 80)
    
    # 3. Hi·ªÉn th·ªã k·∫øt qu·∫£ theo ƒë·ªô ∆∞u ti√™n
    displayed_coins = 0
    
    # A. ∆Øu ti√™n hi·ªÉn th·ªã coin k·ªπ thu·∫≠t (top 2)
    if all_technical_coins:
        # S·∫Øp x·∫øp theo win_rate v√† risk_reward_ratio
        sorted_technical = sorted(all_technical_coins, 
                                key=lambda x: (x['win_rate'], x['risk_reward_ratio']), 
                                reverse=True)[:2]  # Top 2
        
        print(f"\nüéØ PH√ÇN T√çCH K·ª∏ THU·∫¨T - {len(sorted_technical)} coin(s) khuy·∫øn ngh·ªã:")
        
        for coin_data in sorted_technical:
            displayed_coins += 1
            print(f"\nüí∞ #{displayed_coins}. {coin_data['coin']}/JPY (Timeframe: {coin_data['timeframe']})")
            print(f"üìä Gi√° hi·ªán t·∫°i: ¬•{coin_data['current_price']:.2f}")
            print(f"üéØ Gi√° v√†o l·ªánh: ¬•{coin_data.get('optimal_entry', 0):.2f}")
            print(f"üõ°Ô∏è Stop Loss: ¬•{coin_data.get('stop_loss', 0):.2f} (-{coin_data.get('risk_percent', 0):.2f}%)")
            print(f"üéØ Take Profit:")
            print(f"   ‚Ä¢ TP1: ¬•{coin_data.get('tp1_price', 0):.2f} (+{((coin_data.get('tp1_price', 0)/coin_data.get('optimal_entry', 1)-1)*100):.2f}%)")
            print(f"   ‚Ä¢ TP2: ¬•{coin_data.get('tp2_price', 0):.2f} (+{((coin_data.get('tp2_price', 0)/coin_data.get('optimal_entry', 1)-1)*100):.2f}%)")
            print(f"‚öñÔ∏è Risk/Reward: 1:{coin_data.get('risk_reward_ratio', 0):.2f}")
            print(f"üîÆ Gi√° d·ª± ƒëo√°n: ¬•{coin_data.get('predicted_price', 0):.2f}")
            print(f"üìà Ti·ªÅm nƒÉng l·ª£i nhu·∫≠n: {coin_data.get('profit_potential', 0):.2f}%")
            print(f"üèÜ Win Rate: {coin_data['win_rate']:.1f}%")
            print(f"üöÄ T√≠n hi·ªáu: MUA ({coin_data.get('signal_mode', 'unknown')})")
            print(f"üìä RSI: {coin_data.get('rsi', 0):.1f} | MACD: {coin_data.get('macd', 0):.2f}")
            print("-" * 80)
    
    # B. N·∫øu kh√¥ng c√≥ coin k·ªπ thu·∫≠t ho·∫∑c ch∆∞a ƒë·ªß 2, hi·ªÉn th·ªã orderbook (top 2)
    if displayed_coins < 2 and all_orderbook_opportunities:
        remaining_slots = 2 - displayed_coins
        sorted_orderbook = sorted(all_orderbook_opportunities, 
                                key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), 
                                reverse=True)[:remaining_slots]
        
        if sorted_orderbook:
            print(f"\nüîç PH√ÇN T√çCH S·ªî L·ªÜNH - {len(sorted_orderbook)} c∆° h·ªôi khuy·∫øn ngh·ªã:")
            
            for opp in sorted_orderbook:
                displayed_coins += 1
                print(f"\nüí∞ #{displayed_coins}. {opp['coin']}/JPY (Timeframe: {opp['timeframe']})")
                print(f"üìä Gi√° hi·ªán t·∫°i: ¬•{opp['current_price']:.2f}")
                print(f"üéØ Gi√° v√†o l·ªánh: ¬•{opp['entry_price']:.2f}")
                print(f"üõ°Ô∏è Stop Loss: ¬•{opp['stop_loss']:.2f} (-{opp['risk_percent']:.2f}%)")
                print(f"üéØ Take Profit:")
                print(f"   ‚Ä¢ TP1: ¬•{opp['tp1_price']:.2f} (+{((opp['tp1_price']/opp['entry_price']-1)*100):.2f}%)")
                print(f"   ‚Ä¢ TP2: ¬•{opp['tp2_price']:.2f} (+{((opp['tp2_price']/opp['entry_price']-1)*100):.2f}%)")
                print(f"‚öñÔ∏è Risk/Reward: 1:{opp['risk_reward_ratio']:.2f}")
                print(f"ÔøΩ T√≠n hi·ªáu: {opp['trend_signal']}")
                print(f"üìù L√Ω do: {opp['reason']}")
                print(f"üéØ ƒê·ªô tin c·∫≠y: {opp['confidence_score']}/100")
                print(f"üìä Bid/Ask Ratio: {opp['bid_ask_ratio']:.2f} | Spread: {opp['spread']:.3f}%")
                if 'rsi' in opp:
                    print(f"üìä RSI: {opp['rsi']:.1f}")
                print("‚ö†Ô∏è L∆∞u √Ω: Ph√¢n t√≠ch s·ªï l·ªánh, r·ªßi ro cao h∆°n!")
                print("-" * 80)
    
    # C. T·ªïng k·∫øt
    if displayed_coins == 0:
        print("\n‚ùå Kh√¥ng t√¨m th·∫•y c∆° h·ªôi ƒë·∫ßu t∆∞ n√†o trong t·∫•t c·∫£ timeframes.")
        print("ÔøΩ ƒê·ªÅ xu·∫•t: Ch·ªù th·ªã tr∆∞·ªùng c√≥ t√≠n hi·ªáu r√µ r√†ng h∆°n.")
    else:
        print(f"\n‚úÖ T·ªïng c·ªông: {displayed_coins} c∆° h·ªôi ƒë·∫ßu t∆∞ ƒë∆∞·ª£c khuy·∫øn ngh·ªã")
        if displayed_coins < len(all_technical_coins) + len(all_orderbook_opportunities):
            print(f"üìù ƒê√£ l·ªçc t·ª´ {len(all_technical_coins) + len(all_orderbook_opportunities)} c∆° h·ªôi t√¨m th·∫•y")
        
        print("\nüéØ CHI·∫æN L∆Ø·ª¢C KHUY·∫æN NGH·ªä:")
        print("‚Ä¢ ∆Øu ti√™n coin ph√¢n t√≠ch k·ªπ thu·∫≠t (ƒë·ªô tin c·∫≠y cao h∆°n)")
        print("‚Ä¢ ƒê·∫∑t Stop Loss ch·∫∑t ch·∫Ω theo khuy·∫øn ngh·ªã")
        print("‚Ä¢ Chia nh·ªè v·ªën cho multiple TP levels")
        print("‚Ä¢ Theo d√µi th·ªã tr∆∞·ªùng li√™n t·ª•c")
        
        # Th·ª±c hi·ªán auto trading n·∫øu ƒë∆∞·ª£c b·∫≠t
        if TRADING_CONFIG['enabled']:
            print(f"\nü§ñ AUTO TRADING: S·∫¥N S√ÄNG V√ÄO L·ªÜNH {displayed_coins} COIN(S)")
            
            # Chu·∫©n b·ªã danh s√°ch khuy·∫øn ngh·ªã cho trading
            trading_recommendations = []
            
            # ∆Øu ti√™n technical coins
            if all_technical_coins:
                sorted_technical = sorted(all_technical_coins, 
                                        key=lambda x: (x['win_rate'], x['risk_reward_ratio']), 
                                        reverse=True)[:2]
                trading_recommendations.extend(sorted_technical)
            
            # Th√™m orderbook n·∫øu ch∆∞a ƒë·ªß 2
            if len(trading_recommendations) < 2 and all_orderbook_opportunities:
                remaining_slots = 2 - len(trading_recommendations)
                sorted_orderbook = sorted(all_orderbook_opportunities, 
                                        key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), 
                                        reverse=True)[:remaining_slots]
                trading_recommendations.extend(sorted_orderbook)
            
            # Th·ª±c hi·ªán trading
            execute_auto_trading(trading_recommendations)
        else:
            print("\nü§ñ AUTO TRADING: T·∫ÆT (ch·ªâ hi·ªÉn th·ªã khuy·∫øn ngh·ªã)")
    
    print("=" * 80)

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    print_results()