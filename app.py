import os
import ccxt
import pandas as pd
import numpy as np
from ta.trend import SMAIndicator, MACD
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands
from sklearn.preprocessing import MinMaxScaler
# import tensorflow as tf  # Comment out for production - not essential
# from tensorflow.keras.models import Sequential
# from tensorflow.keras.layers import LSTM, Dense, Dropout
# import vectorbt as vbt  # Comment out for production - not essential
from itertools import product
import time
import warnings
import glob
import json
import threading
from datetime import datetime
import config
import trading_config
from trading_functions_fixed import place_buy_order_with_sl_tp_fixed
from account_info import get_account_info, test_email_notification, send_trading_notification
from position_manager import position_manager
import threading
import json
import json
import time

# T·∫Øt t·∫•t c·∫£ warnings v√† logging kh√¥ng c·∫ßn thi·∫øt
warnings.filterwarnings('ignore')
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # T·∫Øt TensorFlow logs - commented for production
# os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'  # T·∫Øt oneDNN notifications - commented for production
# tf.get_logger().setLevel('ERROR')  # commented for production
# tf.autograph.set_verbosity(0)  # commented for production

# Kh·ªüi t·∫°o Binance API - TESTNET cho test an to√†n
try:
    binance = ccxt.binance(trading_config.BINANCE_CONFIG)
except Exception as e:
    print(f"‚ùå L·ªói k·∫øt n·ªëi Binance API: {e}")
    print("üí° Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh trong trading_config.py")
    binance = ccxt.binance()  # Fallback to basic connection

# C·∫•u h√¨nh trading t·ª´ file config
TRADING_CONFIG = trading_config.TRADING_CONFIG

# Global dictionary ƒë·ªÉ l∆∞u tr·ªØ c√°c l·ªánh c·∫ßn theo d√µi
ACTIVE_ORDERS = {}
ORDER_MONITOR_THREAD = None
MONITOR_RUNNING = False

# Bi·∫øn ki·ªÉm so√°t auto-retrading ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
AUTO_RETRADING_ENABLED = True
RETRADING_COOLDOWN = 30  # Cooldown 30 gi√¢y gi·ªØa c√°c l·∫ßn auto-retrade
LAST_RETRADE_TIME = 0

# Bi·∫øn ki·ªÉm so√°t error handling v√† system reliability
SYSTEM_ERROR_COUNT = 0
LAST_ERROR_TIME = 0
LAST_ERROR_EMAIL_TIME = 0  # Th√™m bi·∫øn ƒë·ªÉ track email cooldown
BOT_RUNNING = True

# H√†m cleanup log files v·ªõi schedule t·ª± ƒë·ªông
def cleanup_old_logs():
    """T·ª± ƒë·ªông d·ªçn d·∫πp log c≈© ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng"""
    try:
        if not TRADING_CONFIG.get('auto_cleanup_logs', True):
            return
        
        log_file = TRADING_CONFIG.get('log_file', 'trading_log.txt')
        max_size_mb = TRADING_CONFIG.get('max_log_size_mb', 50)
        retention_days = TRADING_CONFIG.get('log_retention_days', 7)
        
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        if os.path.exists(log_file):
            file_size_mb = os.path.getsize(log_file) / (1024 * 1024)
            
            if file_size_mb > max_size_mb:
                # Backup log c≈© v√† t·∫°o file m·ªõi
                timestamp = time.strftime('%Y%m%d_%H%M%S')
                backup_file = f"{log_file}.backup_{timestamp}"
                
                # ƒê·ªçc 1000 d√≤ng cu·ªëi ƒë·ªÉ gi·ªØ l·∫°i
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # Backup to√†n b·ªô file c≈©
                os.rename(log_file, backup_file)
                
                # T·∫°o file m·ªõi v·ªõi 1000 d√≤ng cu·ªëi
                with open(log_file, 'w', encoding='utf-8') as f:
                    if len(lines) > 1000:
                        f.writelines(lines[-1000:])
                    else:
                        f.writelines(lines)
                
                print(f"üìÇ Log cleanup: Backup {backup_file}, gi·ªØ l·∫°i {min(len(lines), 1000)} d√≤ng g·∫ßn nh·∫•t")
        
        # X√≥a backup files c≈© h∆°n retention_days
        backup_pattern = f"{log_file}.backup_*"
        current_time = time.time()
        retention_seconds = retention_days * 24 * 3600
        
        for backup_file in glob.glob(backup_pattern):
            try:
                file_time = os.path.getmtime(backup_file)
                if current_time - file_time > retention_seconds:
                    os.remove(backup_file)
                    print(f"üóëÔ∏è ƒê√£ x√≥a backup log c≈©: {backup_file}")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x√≥a backup log {backup_file}: {e}")
                
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói cleanup logs: {e}")

# H√†m g·ª≠i email th√¥ng b√°o l·ªói h·ªá th·ªëng
def send_system_error_notification(error_msg, error_type="SYSTEM_ERROR"):
    """G·ª≠i email th√¥ng b√°o l·ªói h·ªá th·ªëng nghi√™m tr·ªçng v·ªõi cooldown"""
    global LAST_ERROR_EMAIL_TIME
    
    try:
        if not TRADING_CONFIG.get('send_error_emails', True):
            return
        
        # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam email
        current_time = time.time()
        cooldown = TRADING_CONFIG.get('error_email_cooldown', 300)
        
        if current_time - LAST_ERROR_EMAIL_TIME < cooldown:
            print(f"üìß Email l·ªói trong cooldown ({cooldown}s)")
            return
        
        # C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i email cu·ªëi
        LAST_ERROR_EMAIL_TIME = current_time
        
        detailed_message = f"""
üö® C·∫¢NH B√ÅO L·ªñI H·ªÜ TH·ªêNG TRADING BOT

üî¥ Lo·∫°i l·ªói: {error_type}
‚è∞ Th·ªùi gian: {time.strftime('%Y-%m-%d %H:%M:%S')}
  Chi ti·∫øt l·ªói:
{error_msg}

üìà Tr·∫°ng th√°i hi·ªán t·∫°i:
‚Ä¢ Bot status: {"RUNNING" if BOT_RUNNING else "STOPPED"}
‚Ä¢ Error count: {SYSTEM_ERROR_COUNT}
‚Ä¢ Active orders: {len(ACTIVE_ORDERS)}

‚ö†Ô∏è N·∫øu l·ªói l·∫∑p l·∫°i, vui l√≤ng ki·ªÉm tra h·ªá th·ªëng manual.
        """
        
        # G·ª≠i email v·ªõi subject c·ª• th·ªÉ
        try:
            # S·ª≠ d·ª•ng h√†m email v·ªõi urgent=True ƒë·ªÉ hi·ªÉn th·ªã üö® URGENT
            send_trading_notification(f"üö® {error_type}: {error_msg[:100]}...", urgent=True)
            print(f"üìß ƒê√£ g·ª≠i email th√¥ng b√°o l·ªói h·ªá th·ªëng: {error_type}")
        except Exception as email_error:
            print(f"‚ö†Ô∏è L·ªói g·ª≠i email th√¥ng b√°o h·ªá th·ªëng: {email_error}")
            # Fallback: √≠t nh·∫•t in message
            print(detailed_message)
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói trong send_system_error_notification: {e}")
        print(f"üì± Fallback error message: {error_type} - {error_msg}")

# H√†m x·ª≠ l√Ω l·ªói h·ªá th·ªëng v·ªõi auto-recovery
def handle_system_error(error, function_name, max_retries=None):
    """X·ª≠ l√Ω l·ªói h·ªá th·ªëng v·ªõi kh·∫£ nƒÉng t·ª± ph·ª•c h·ªìi"""
    global SYSTEM_ERROR_COUNT, LAST_ERROR_TIME, BOT_RUNNING
    
    try:
        if max_retries is None:
            max_retries = TRADING_CONFIG.get('max_error_retries', 3)
        
        SYSTEM_ERROR_COUNT += 1
        LAST_ERROR_TIME = time.time()
        
        error_msg = f"L·ªói trong {function_name}: {str(error)}"
        print(f"üö® {error_msg}")
        
        # Log chi ti·∫øt
        if TRADING_CONFIG['log_trades']:
            log_file = TRADING_CONFIG.get('log_file', 'trading_log.txt')
            with open(log_file, 'a', encoding='utf-8') as f:
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                f.write(f"[{timestamp}] üö® SYSTEM ERROR in {function_name}: {str(error)}\n")
                f.write(f"[{timestamp}] Error count: {SYSTEM_ERROR_COUNT}, Retries available: {max_retries - (SYSTEM_ERROR_COUNT % max_retries)}\n")
        
        # G·ª≠i email n·∫øu l·ªói nghi√™m tr·ªçng ho·∫∑c l·∫∑p l·∫°i nhi·ªÅu
        if SYSTEM_ERROR_COUNT % 5 == 1 or SYSTEM_ERROR_COUNT > 10:
            send_system_error_notification(error_msg, f"ERROR_IN_{function_name.upper()}")
        
        # Auto recovery logic
        if TRADING_CONFIG.get('auto_restart_on_error', True):
            retry_delay = TRADING_CONFIG.get('error_retry_delay', 60)
            
            if SYSTEM_ERROR_COUNT % max_retries == 0:
                print(f" Th·ª≠ kh√¥i ph·ª•c sau {retry_delay} gi√¢y... (L·∫ßn th·ª≠: {SYSTEM_ERROR_COUNT // max_retries})")
                time.sleep(retry_delay)
                
                # Reset error count n·∫øu ƒë√£ ch·ªù ƒë·ªß l√¢u
                if time.time() - LAST_ERROR_TIME > retry_delay * 2:
                    SYSTEM_ERROR_COUNT = 0
                    print("‚úÖ Reset error count - H·ªá th·ªëng ·ªïn ƒë·ªãnh tr·ªü l·∫°i")
            
            return True  # Ti·∫øp t·ª•c ch·∫°y
        else:
            print("üõë Auto restart b·ªã t·∫Øt - D·ª´ng bot")
            BOT_RUNNING = False
            return False
            
    except Exception as nested_error:
        print(f"üö® L·ªói nghi√™m tr·ªçng trong error handler: {nested_error}")
        BOT_RUNNING = False
        return False

# Decorator ƒë·ªÉ wrap c√°c h√†m quan tr·ªçng v·ªõi error handling
def system_error_handler(function_name=None, critical=False):
    """Decorator ƒë·ªÉ t·ª± ƒë·ªông x·ª≠ l√Ω l·ªói h·ªá th·ªëng"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            nonlocal function_name
            if function_name is None:
                function_name = func.__name__
            
            try:
                return func(*args, **kwargs)
            except Exception as e:
                success = handle_system_error(e, function_name)
                
                if critical and not success:
                    raise  # Re-raise n·∫øu l√† h√†m critical v√† kh√¥ng th·ªÉ recovery
                
                # Return None ho·∫∑c default value ƒë·ªÉ kh√¥ng crash
                return None
        return wrapper
    return decorator

# H√†m ƒë√°nh gi√° v√† s·∫Øp x·∫øp coins theo ƒë·ªô ∆∞u ti√™n
def evaluate_coin_priority(coin_data):
    """T√≠nh ƒëi·ªÉm ∆∞u ti√™n cho coin d·ª±a tr√™n nhi·ªÅu y·∫øu t·ªë"""
    try:
        score = 0
        
        # Confidence score (0-100)
        confidence = coin_data.get('confidence_score', 0)
        score += confidence * 0.4  # 40% tr·ªçng s·ªë
        
        # Risk/Reward ratio (c√†ng cao c√†ng t·ªët)
        risk_reward = coin_data.get('risk_reward_ratio', 0)
        score += min(risk_reward * 20, 50)  # Cap t·∫°i 50 ƒëi·ªÉm, 50% tr·ªçng s·ªë
        
        # Volume factor (volume l·ªõn = t√≠nh thanh kho·∫£n cao)
        total_volume = coin_data.get('total_volume', 0)
        if total_volume > 10000:
            score += 20
        elif total_volume > 5000:
            score += 10
        elif total_volume > 1000:
            score += 5
        
        # Spread factor (spread th·∫•p = t·ªët h∆°n)
        spread = coin_data.get('spread', 999)
        if spread < 0.1:
            score += 15
        elif spread < 0.2:
            score += 10
        elif spread < 0.5:
            score += 5
        
        # Trend signal bonus
        trend_signal = coin_data.get('trend_signal', '')
        if 'BULLISH' in trend_signal:
            score += 15
        elif 'NEUTRAL' in trend_signal:
            score += 5
        
        return max(score, 0)  # ƒê·∫£m b·∫£o kh√¥ng √¢m
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ƒë√°nh gi√° coin {coin_data.get('coin', 'Unknown')}: {e}")
        return 0

# H√†m chuy·ªÉn ƒë·ªïi gi√° t·ª´ JPY sang USDT
def convert_jpy_to_usdt(jpy_price):
    """Chuy·ªÉn ƒë·ªïi gi√° t·ª´ JPY sang USDT"""
    try:
        if trading_config.PRICE_CONVERSION['use_live_rate']:
            # L·∫•y t·ª∑ gi√° th·ªùi gian th·ª±c t·ª´ Binance
            ticker = binance.fetch_ticker('USDT/JPY')
            usd_jpy_rate = 1 / ticker['last']  # JPY to USD
        else:
            usd_jpy_rate = trading_config.PRICE_CONVERSION['default_jpy_to_usd']
        
        usdt_price = jpy_price * usd_jpy_rate
        return usdt_price
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi JPY->USDT: {e}")
        # Fallback to default rate
        return jpy_price * trading_config.PRICE_CONVERSION['default_jpy_to_usd']

# H√†m l·∫•y gi√° hi·ªán t·∫°i c·ªßa c·∫∑p JPY
def get_current_jpy_price(symbol):
    """L·∫•y gi√° hi·ªán t·∫°i c·ªßa c·∫∑p JPY"""
    try:
        ticker = binance.fetch_ticker(symbol)
        return ticker['last']
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y gi√° {symbol}: {e}")
        return None

# H√†m g·ª≠i th√¥ng b√°o
def send_notification(message, urgent=False):
    """G·ª≠i th√¥ng b√°o v·ªÅ trading v·ªõi email ƒë·∫ßy ƒë·ªß"""
    try:
        # Ch·ªâ in l·ªói v√† k·∫øt qu·∫£ quan tr·ªçng
        if "‚ùå" in message or "‚úÖ" in message or "üí∞" in message:
            print(f"üì± {message}")
        
        # G·ª≠i email th√¥ng qua h√†m ƒë√£ c√≥ trong account_info (silent)
        try:
            send_trading_notification(message, urgent)
        except Exception as email_error:
            pass  # Silent email error
        
        # Log to file (silent)
        if TRADING_CONFIG['log_trades']:
            log_file = TRADING_CONFIG.get('log_file', 'trading_log.txt')
            try:
                with open(log_file, 'a', encoding='utf-8') as f:
                    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
                    f.write(f"[{timestamp}] {message}\n")
            except Exception as log_error:
                pass  # Silent log error
                
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói g·ª≠i th√¥ng b√°o: {e}")

# H√†m trigger trading cycle m·ªõi khi c√≥ l·ªánh b√°n kh·ªõp
@system_error_handler("trigger_new_trading_cycle")
def trigger_new_trading_cycle():
    """T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu chu k·ª≥ trading m·ªõi khi l·ªánh b√°n ƒë∆∞·ª£c kh·ªõp"""
    global LAST_RETRADE_TIME
    
    try:
        # Ki·ªÉm tra xem auto-retrading c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
        if not AUTO_RETRADING_ENABLED:
            print(" Auto-retrading ƒë√£ b·ªã t·∫Øt")
            return
        
        # Ki·ªÉm tra cooldown ƒë·ªÉ tr√°nh spam trading
        current_time = time.time()
        if current_time - LAST_RETRADE_TIME < RETRADING_COOLDOWN:
            remaining_cooldown = RETRADING_COOLDOWN - (current_time - LAST_RETRADE_TIME)
            print(f"‚è≥ Cooldown: Ch·ªù {remaining_cooldown:.0f}s tr∆∞·ªõc khi trading ti·∫øp...")
            return
        
        print("üîç ƒêang t√¨m ki·∫øm c∆° h·ªôi ƒë·∫ßu t∆∞ m·ªõi...")
        
        # X·ª≠ l√Ω t·ªìn kho n·∫øu c√≥
        print("üîÑ Ki·ªÉm tra v√† x·ª≠ l√Ω coin t·ªìn kho...")
        inventory_handled = handle_inventory_coins()
        
        # Ki·ªÉm tra s·ªë d∆∞ hi·ªán t·∫°i sau x·ª≠ l√Ω t·ªìn kho
        current_balance = get_account_balance()
        print(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: ¬•{current_balance:,.2f}")
        
        # Ch·ªâ c·∫ßn c√≥ s·ªë d∆∞ l√† c√≥ th·ªÉ trading
        if current_balance > 0:
            print("‚úÖ C√≥ s·ªë d∆∞ - B·∫Øt ƒë·∫ßu ph√¢n t√≠ch...")
            
            # C·∫≠p nh·∫≠t th·ªùi gian retrade cu·ªëi c√πng
            LAST_RETRADE_TIME = current_time
            
            # G·ªçi h√†m print_results ƒë·ªÉ t√¨m v√† th·ª±c hi·ªán trading m·ªõi
            print_results()
            
        else:
            print("‚ö†Ô∏è Kh√¥ng c√≥ s·ªë d∆∞ ƒë·ªÉ trading")
            
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi trigger trading cycle m·ªõi: {e}")

# H√†m ƒë·ªÉ b·∫≠t/t·∫Øt auto-retrading
def set_auto_retrading(enabled=True):
    """B·∫≠t/t·∫Øt ch·ª©c nƒÉng auto-retrading"""
    global AUTO_RETRADING_ENABLED
    AUTO_RETRADING_ENABLED = enabled
    status = "B·∫¨T" if enabled else "T·∫ÆT"
    print(f" Auto-retrading ƒë√£ ƒë∆∞·ª£c {status}")

# H√†m ƒë·ªÉ ƒë·∫∑t cooldown time
def set_retrading_cooldown(seconds=30):
    """ƒê·∫∑t th·ªùi gian cooldown gi·ªØa c√°c l·∫ßn auto-retrade"""
    global RETRADING_COOLDOWN
    RETRADING_COOLDOWN = seconds
    print(f"‚è≥ Retrading cooldown ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh {seconds} gi√¢y")

# H√†m c·∫≠p nh·∫≠t position khi l·ªánh b√°n ƒë∆∞·ª£c kh·ªõp
def update_position_on_sell(symbol, quantity_sold, sell_price):
    """C·∫≠p nh·∫≠t position manager khi c√≥ l·ªánh b√°n ƒë∆∞·ª£c kh·ªõp"""
    try:
        position_info = position_manager.get_position(symbol)
        if position_info:
            # T√≠nh P&L
            avg_price = position_info['average_price']
            pnl = (sell_price - avg_price) * quantity_sold
            pnl_percent = (sell_price - avg_price) / avg_price * 100
            
            print(f"üìä B√°n {symbol}: {quantity_sold:.6f} @ ¬•{sell_price:.4f}")
            print(f"   üí∞ Gi√° TB: ¬•{avg_price:.4f} | P&L: ¬•{pnl:+.2f} ({pnl_percent:+.2f}%)")
            
            # C·∫≠p nh·∫≠t position
            remaining_position = position_manager.remove_position(symbol, quantity_sold)
            
            return {
                'pnl_jpy': pnl,
                'pnl_percent': pnl_percent,
                'avg_entry': avg_price,
                'remaining_position': remaining_position
            }
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y position cho {symbol} - c√≥ th·ªÉ ƒë√£ b√°n h·∫øt")
            return None
            
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t position: {e}")
        return None

# H√†m hi·ªÉn th·ªã t·ªïng quan positions
def show_positions_summary():
    """Hi·ªÉn th·ªã t·ªïng quan t·∫•t c·∫£ positions hi·ªán c√≥"""
    try:
        summary = position_manager.get_position_summary()
        print(f"\n{summary}")
        
        # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng position v·ªõi SL/TP t∆∞∆°ng ·ª©ng
        all_positions = position_manager.get_all_positions()
        if all_positions:
            print("\nüìã CHI TI·∫æT POSITIONS V√Ä SL/TP:")
            for coin, pos in all_positions.items():
                symbol = pos['symbol']
                sl_tp_info = position_manager.calculate_sl_tp_prices(symbol)
                if sl_tp_info:
                    print(f"   üéØ {coin}:")
                    print(f"      üì¶ Quantity: {pos['total_quantity']:.6f}")
                    print(f"      üí∞ Gi√° TB: ¬•{pos['average_price']:.4f}")
                    print(f"      üõ°Ô∏è SL: ¬•{sl_tp_info['stop_loss']:.4f}")
                    print(f"      üéØ TP: ¬•{sl_tp_info['tp_price']:.4f}")
        
    except Exception as e:
        print(f"‚ùå L·ªói hi·ªÉn th·ªã positions: {e}")

# H√†m ki·ªÉm tra tr·∫°ng th√°i l·ªánh
def check_order_status(order_id, symbol):
    """Ki·ªÉm tra tr·∫°ng th√°i c·ªßa m·ªôt l·ªánh c·ª• th·ªÉ"""
    try:
        order = binance.fetch_order(order_id, symbol)
        return {
            'id': order['id'],
            'symbol': order['symbol'],
            'status': order['status'],
            'type': order['type'],
            'side': order['side'],
            'amount': order['amount'],
            'filled': order['filled'],
            'remaining': order['remaining'],
            'price': order['price'],
            'average': order['average'],
            'cost': order['cost'],
            'timestamp': order['timestamp'],
            'datetime': order['datetime']
        }
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra order {order_id}: {e}")
        return None

# H√†m theo d√µi t·∫•t c·∫£ l·ªánh ƒëang ho·∫°t ƒë·ªông
@system_error_handler("monitor_active_orders", critical=True)
def monitor_active_orders():
    """Thread function ƒë·ªÉ theo d√µi t·∫•t c·∫£ l·ªánh ƒëang ho·∫°t ƒë·ªông"""
    global MONITOR_RUNNING
    
    order_monitor_interval = TRADING_CONFIG.get('monitor_interval', 30)
    order_monitor_error_sleep = TRADING_CONFIG.get('error_sleep_interval', 60)
    print(f" Monitor interval: {order_monitor_interval}s | Error sleep: {order_monitor_error_sleep}s")
    
    # Cleanup logs khi b·∫Øt ƒë·∫ßu monitor
    cleanup_old_logs()
    
    while MONITOR_RUNNING and BOT_RUNNING:
        try:
            if not ACTIVE_ORDERS:
                time.sleep(10)  # N·∫øu kh√¥ng c√≥ l·ªánh n√†o, sleep 10 gi√¢y
                continue
            
            orders_to_remove = []
            
            # T·∫°o copy c·ªßa dictionary ƒë·ªÉ tr√°nh l·ªói "dictionary changed size during iteration"
            active_orders_copy = dict(ACTIVE_ORDERS)
            
            for order_id, order_info in active_orders_copy.items():
                try:
                    # Ki·ªÉm tra tr·∫°ng th√°i l·ªánh
                    current_status = check_order_status(order_id, order_info['symbol'])
                    
                    if current_status is None:
                        continue
                    
                    # C·∫≠p nh·∫≠t th√¥ng tin
                    ACTIVE_ORDERS[order_id]['last_checked'] = time.time()
                    
                    # Ki·ªÉm tra n·∫øu l·ªánh ƒë√£ ƒë∆∞·ª£c kh·ªõp (filled) ho·∫∑c ƒë√£ h·ªßy
                    if current_status['status'] in ['closed', 'filled']:
                        # L·ªánh ƒë√£ kh·ªõp ho√†n to√†n
                        filled_info = {
                            'order_id': order_id,
                            'symbol': current_status['symbol'],
                            'order_type': f"{current_status['type']} {current_status['side']}".upper(),
                            'filled_quantity': current_status['filled'],
                            'filled_price': current_status['average'] or current_status['price'],
                            'total_received': current_status['cost'],
                            'filled_time': current_status['datetime'],
                            'buy_price': order_info.get('buy_price'),
                            'profit_loss': 'N/A',
                            'profit_percentage': 'N/A'
                        }
                        
                        # T√≠nh l·ª£i nhu·∫≠n n·∫øu c√≥ gi√° mua
                        if order_info.get('buy_price') and current_status['side'] == 'sell':
                            buy_price = order_info['buy_price']
                            sell_price = current_status['average'] or current_status['price']
                            profit = (sell_price - buy_price) * current_status['filled']
                            profit_percent = ((sell_price - buy_price) / buy_price) * 100
                            
                            filled_info['profit_loss'] = f"¬•{profit:,.2f}"
                            filled_info['profit_percentage'] = f"{profit_percent:+.2f}%"
                        
                        # ƒê√°nh d·∫•u ƒë·ªÉ x√≥a kh·ªèi danh s√°ch theo d√µi
                        orders_to_remove.append(order_id)
                        
                        print(f"‚úÖ L·ªánh {order_id} ƒë√£ kh·ªõp: {current_status['symbol']} - {current_status['filled']:.6f} @ ¬•{current_status['average']:.4f}")
                    
                    elif current_status['status'] in ['canceled', 'expired', 'rejected']:
                        # L·ªánh ƒë√£ b·ªã h·ªßy/t·ª´ ch·ªëi
                        print(f"‚ùå L·ªánh {order_id} ƒë√£ b·ªã {current_status['status']}: {current_status['symbol']}")
                        orders_to_remove.append(order_id)
                    
                    elif current_status['filled'] > order_info.get('last_filled', 0):
                        # L·ªánh kh·ªõp m·ªôt ph·∫ßn
                        ACTIVE_ORDERS[order_id]['last_filled'] = current_status['filled']
                        print(f" L·ªánh {order_id} kh·ªõp m·ªôt ph·∫ßn: {current_status['filled']:.6f}/{current_status['amount']:.6f}")
                
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra l·ªánh {order_id}: {e}")
                    continue
            
            # X√≥a c√°c l·ªánh ƒë√£ ho√†n th√†nh kh·ªèi danh s√°ch theo d√µi
            for order_id in orders_to_remove:
                del ACTIVE_ORDERS[order_id]
                print(f"üóëÔ∏è ƒê√£ x√≥a l·ªánh {order_id} kh·ªèi danh s√°ch theo d√µi")
            
            # L∆∞u danh s√°ch l·ªánh v√†o file ƒë·ªÉ backup
            save_active_orders_to_file()
            
            # Sleep theo c·∫•u h√¨nh tr∆∞·ªõc khi ki·ªÉm tra l·∫ßn ti·∫øp theo
            time.sleep(order_monitor_interval)
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói trong monitor_active_orders: {e}")
            time.sleep(order_monitor_error_sleep)  # Sleep l√¢u h∆°n n·∫øu c√≥ l·ªói

# H√†m th√™m l·ªánh v√†o danh s√°ch theo d√µi
def add_order_to_monitor(order_id, symbol, order_type, buy_price=None):
    """Th√™m l·ªánh v√†o danh s√°ch theo d√µi"""
    global ORDER_MONITOR_THREAD, MONITOR_RUNNING
    
    ACTIVE_ORDERS[order_id] = {
        'symbol': symbol,
        'order_type': order_type,
        'buy_price': buy_price,
        'added_time': time.time(),
        'last_checked': time.time(),
        'last_filled': 0
    }
    
    # L∆∞u ngay v√†o file (silent)
    save_active_orders_to_file()
    
    # Kh·ªüi ƒë·ªông thread monitor n·∫øu ch∆∞a ch·∫°y (silent)
    if not MONITOR_RUNNING:
        MONITOR_RUNNING = True
        ORDER_MONITOR_THREAD = threading.Thread(target=monitor_active_orders, daemon=True)
        ORDER_MONITOR_THREAD.start()

# H√†m l∆∞u danh s√°ch l·ªánh v√†o file
def save_active_orders_to_file():
    """L∆∞u danh s√°ch l·ªánh ƒëang theo d√µi v√†o file"""
    try:
        with open('active_orders.json', 'w', encoding='utf-8') as f:
            json.dump(ACTIVE_ORDERS, f, indent=2, ensure_ascii=False)
    except Exception:
        pass  # Silent save

# H√†m ƒë·ªçc danh s√°ch l·ªánh t·ª´ file
def load_active_orders_from_file():
    """ƒê·ªçc danh s√°ch l·ªánh t·ª´ file khi kh·ªüi ƒë·ªông"""
    global ACTIVE_ORDERS
    try:
        with open('active_orders.json', 'r', encoding='utf-8') as f:
            ACTIVE_ORDERS = json.load(f)
        
        # Kh·ªüi ƒë·ªông monitor n·∫øu c√≥ l·ªánh
        if ACTIVE_ORDERS:
            global MONITOR_RUNNING, ORDER_MONITOR_THREAD
            if not MONITOR_RUNNING:
                MONITOR_RUNNING = True
                ORDER_MONITOR_THREAD = threading.Thread(target=monitor_active_orders, daemon=True)
                ORDER_MONITOR_THREAD.start()
                print(" ƒê√£ kh·ªüi ƒë·ªông order monitoring thread t·ª´ backup")
    except FileNotFoundError:
        print("üìÇ Kh√¥ng t√¨m th·∫•y file backup, b·∫Øt ƒë·∫ßu v·ªõi danh s√°ch l·ªánh tr·ªëng")
        ACTIVE_ORDERS = {}
        # T·∫°o file m·ªõi
        save_active_orders_to_file()
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ƒë·ªçc active orders: {e}")
        ACTIVE_ORDERS = {}
        # T·∫°o file m·ªõi
        save_active_orders_to_file()

# H√†m d·ª´ng monitor
def stop_order_monitor():
    """D·ª´ng order monitoring thread"""
    global MONITOR_RUNNING
    MONITOR_RUNNING = False
    print("üõë ƒê√£ d·ª´ng order monitoring thread")

# H√†m ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß ƒë·ªÉ ƒë·∫∑t l·ªánh kh√¥ng
def validate_balance_for_order(symbol, quantity, price):
    """Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß ƒë·ªÉ ƒë·∫∑t l·ªánh kh√¥ng"""
    try:
        # L·∫•y s·ªë d∆∞ hi·ªán t·∫°i
        current_balance = get_account_balance()
        
        # T√≠nh to√°n gi√° tr·ªã l·ªánh
        order_value = quantity * price
        
        # Th√™m buffer 1% cho fee v√† slippage
        required_balance = order_value * 1.01
        
        if current_balance >= required_balance:
            return {
                'valid': True, 
                'current_balance': current_balance,
                'required': required_balance,
                'order_value': order_value
            }
        else:
            return {
                'valid': False,
                'current_balance': current_balance,
                'required': required_balance,
                'order_value': order_value,
                'shortage': required_balance - current_balance
            }
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra s·ªë d∆∞: {e}")
        return {'valid': False, 'error': str(e)}

# H√†m l·∫•y s·ªë d∆∞ t√†i kho·∫£n
def get_account_balance():
    """L·∫•y s·ªë d∆∞ t√†i kho·∫£n JPY"""
    try:
        balance = binance.fetch_balance()
        jpy_balance = balance['JPY']['free'] if 'JPY' in balance else 0
        return jpy_balance
    except Exception as e:
        print(f"L·ªói khi l·∫•y s·ªë d∆∞: {e}")
        return 0

# H√†m t√≠nh to√°n k√≠ch th∆∞·ªõc order
def calculate_order_size(jpy_balance, num_recommendations, coin_price):
    """All-in to√†n b·ªô s·ªë d∆∞ JPY cho m·ªói l·ªánh."""
    if jpy_balance <= 0:
        print(f"‚ö†Ô∏è S·ªë d∆∞ JPY kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t l·ªánh. Hi·ªán c√≥ ¬•{jpy_balance:,.2f}")
        return 0
    
    # Chia ƒë·ªÅu s·ªë d∆∞ cho s·ªë recommendations ho·∫∑c all-in n·∫øu ch·ªâ c√≥ 1
    if num_recommendations <= 1:
        quantity = jpy_balance / coin_price
    else:
        balance_per_coin = jpy_balance / num_recommendations
        quantity = balance_per_coin / coin_price
    
    return quantity

# H√†m t√≠nh to√°n s·ªë l∆∞·ª£ng t·ªëi ƒëa d·ª±a tr√™n thanh kho·∫£n s·ªï l·ªánh
def calculate_max_quantity_from_liquidity(symbol, planned_quantity, order_book_analysis=None, side='buy'):
    """
    T√≠nh to√°n s·ªë l∆∞·ª£ng t·ªëi ƒëa c√≥ th·ªÉ mua/b√°n d·ª±a tr√™n thanh kho·∫£n s·ªï l·ªánh
    ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng g√¢y t√°c ƒë·ªông qu√° l·ªõn ƒë·∫øn th·ªã tr∆∞·ªùng
    
    Args:
        symbol: Symbol c·∫ßn trade
        planned_quantity: S·ªë l∆∞·ª£ng d·ª± ƒë·ªãnh
        order_book_analysis: Ph√¢n t√≠ch order book (optional)
        side: 'buy' ho·∫∑c 'sell'
    """
    try:
        # L·∫•y s·ªï l·ªánh n·∫øu ch∆∞a c√≥
        if order_book_analysis is None:
            order_book = get_order_book(symbol, limit=20)
            order_book_analysis = analyze_order_book(order_book)
        
        if not order_book_analysis:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thanh kho·∫£n cho {symbol}")
            # Fallback: gi·∫£m 50% s·ªë l∆∞·ª£ng d·ª± ƒë·ªãnh ƒë·ªÉ an to√†n
            return planned_quantity * 0.5, "No liquidity data - reduced by 50%"
        
        # L·∫•y th√¥ng tin thanh kho·∫£n theo side
        if side == 'buy':
            # Mua c·∫ßn thanh kho·∫£n b√°n (ask)
            available_liquidity = order_book_analysis['available_liquidity_sell']
            total_volume = order_book_analysis['total_ask_volume']
            liquidity_type = "sell-side (asks)"
        else:
            # B√°n c·∫ßn thanh kho·∫£n mua (bid)
            available_liquidity = order_book_analysis['available_liquidity_buy']
            total_volume = order_book_analysis['total_bid_volume']
            liquidity_type = "buy-side (bids)"
        
        spread = order_book_analysis['spread']
        
        # C√°c gi·ªõi h·∫°n an to√†n
        MAX_LIQUIDITY_USAGE = 0.15  # Kh√¥ng s·ª≠ d·ª•ng qu√° 15% thanh kho·∫£n c√≥ s·∫µn
        MAX_VOLUME_IMPACT = 0.10    # Kh√¥ng v∆∞·ª£t qu√° 10% t·ªïng volume
        MAX_SPREAD_TOLERANCE = 0.5  # N·∫øu spread > 0.5% th√¨ gi·∫£m size
        
        # T√≠nh to√°n c√°c gi·ªõi h·∫°n
        max_by_liquidity = available_liquidity * MAX_LIQUIDITY_USAGE
        max_by_volume = total_volume * MAX_VOLUME_IMPACT
        
        # ƒêi·ªÅu ch·ªânh theo spread
        spread_factor = 1.0
        if spread > MAX_SPREAD_TOLERANCE:
            spread_factor = max(0.5, 1 - (spread - MAX_SPREAD_TOLERANCE) / 2)
        
        # L·∫•y gi·ªõi h·∫°n nh·ªè nh·∫•t
        max_quantity_base = min(max_by_liquidity, max_by_volume, planned_quantity)
        max_quantity = max_quantity_base * spread_factor
        
        # ƒê·∫£m b·∫£o kh√¥ng nh·ªè h∆°n minimum order
        min_order_quantity = 0.001  # Minimum quantity
        if max_quantity < min_order_quantity:
            max_quantity = min_order_quantity
        
        # T·∫°o th√¥ng b√°o v·ªÅ l√Ω do ƒëi·ªÅu ch·ªânh
        adjustment_reason = []
        if max_quantity < planned_quantity:
            if max_quantity == max_by_liquidity * spread_factor:
                adjustment_reason.append(f"Liquidity limit ({MAX_LIQUIDITY_USAGE*100}% of {available_liquidity:.6f})")
            if max_quantity == max_by_volume * spread_factor:
                adjustment_reason.append(f"Volume impact limit ({MAX_VOLUME_IMPACT*100}% of {total_volume:.6f})")
            if spread_factor < 1.0:
                adjustment_reason.append(f"High spread adjustment ({spread:.3f}% > {MAX_SPREAD_TOLERANCE}%)")
        
        reason = " & ".join(adjustment_reason) if adjustment_reason else "No adjustment needed"
        
        return max_quantity, reason
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi t√≠nh to√°n thanh kho·∫£n cho {symbol}: {e}")
        # Fallback: gi·∫£m 30% ƒë·ªÉ an to√†n
        return planned_quantity * 0.7, f"Error calculating liquidity: {e}"

# H√†m ki·ªÉm tra t√°c ƒë·ªông th·ªã tr∆∞·ªùng tr∆∞·ªõc khi ƒë·∫∑t l·ªánh
def check_market_impact(symbol, quantity, order_book_analysis=None, side='buy'):
    """
    Ki·ªÉm tra t√°c ƒë·ªông c·ªßa l·ªánh ƒë·ªëi v·ªõi th·ªã tr∆∞·ªùng
    
    Args:
        symbol: Symbol c·∫ßn trade
        quantity: S·ªë l∆∞·ª£ng l·ªánh
        order_book_analysis: Ph√¢n t√≠ch order book (optional)
        side: 'buy' ho·∫∑c 'sell'
    """
    try:
        if order_book_analysis is None:
            order_book = get_order_book(symbol, limit=20)
            order_book_analysis = analyze_order_book(order_book)
        
        if not order_book_analysis:
            return {"impact": "unknown", "warning": "Cannot analyze market impact"}
        
        # L·∫•y th√¥ng tin thanh kho·∫£n theo side
        if side == 'buy':
            # Mua s·∫Ω t√°c ƒë·ªông ƒë·∫øn ask side
            available_liquidity = order_book_analysis['available_liquidity_sell']
            total_volume = order_book_analysis['total_ask_volume']
            side_name = "ask"
        else:
            # B√°n s·∫Ω t√°c ƒë·ªông ƒë·∫øn bid side
            available_liquidity = order_book_analysis['available_liquidity_buy']
            total_volume = order_book_analysis['total_bid_volume']
            side_name = "bid"
        
        spread = order_book_analysis['spread']
        
        # T√≠nh % s·ª≠ d·ª•ng thanh kho·∫£n
        liquidity_usage = (quantity / available_liquidity * 100) if available_liquidity > 0 else 100
        volume_usage = (quantity / total_volume * 100) if total_volume > 0 else 100
        
        # ƒê√°nh gi√° m·ª©c ƒë·ªô t√°c ƒë·ªông
        impact_level = "low"
        warnings = []
        
        if liquidity_usage > 15:
            impact_level = "high"
            warnings.append(f"High {side_name} liquidity usage: {liquidity_usage:.1f}%")
        elif liquidity_usage > 8:
            impact_level = "medium"
            warnings.append(f"Medium {side_name} liquidity usage: {liquidity_usage:.1f}%")
        
        if volume_usage > 10:
            impact_level = "high"
            warnings.append(f"High {side_name} volume impact: {volume_usage:.1f}%")
        elif volume_usage > 5:
            if impact_level != "high":
                impact_level = "medium"
            warnings.append(f"Medium {side_name} volume impact: {volume_usage:.1f}%")
        
        if spread > 0.5:
            if impact_level == "low":
                impact_level = "medium"
            warnings.append(f"Wide spread: {spread:.3f}%")
        
        return {
            "impact": impact_level,
            "liquidity_usage": liquidity_usage,
            "volume_usage": volume_usage,
            "spread": spread,
            "warnings": warnings,
            "side": side_name
        }
        
    except Exception as e:
        return {"impact": "unknown", "warning": f"Error analyzing impact: {e}"}

# H√†m ƒë·∫∑t l·ªánh mua v·ªõi stop loss v√† take profit
def place_buy_order_with_sl_tp(symbol, quantity, entry_price, stop_loss, tp_price):
    """ƒê·∫∑t l·ªánh mua v·ªõi stop loss v√† take profit t·ª± ƒë·ªông - ch·ªâ 1 TP"""
    try:
        # Trade tr·ª±c ti·∫øp JPY - ƒë∆°n gi·∫£n
        trading_symbol = symbol  # S·ª≠ d·ª•ng tr·ª±c ti·∫øp JPY pair
        current_price = get_current_jpy_price(symbol)
        
        if not current_price:
            return {'status': 'failed', 'error': 'Cannot get current JPY price'}
        
        # Ki·ªÉm tra thanh kho·∫£n v√† ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng
        order_book = get_order_book(symbol, limit=20)
        order_book_analysis = analyze_order_book(order_book)
        
        # T√≠nh to√°n s·ªë l∆∞·ª£ng t·ªëi ƒëa an to√†n d·ª±a tr√™n thanh kho·∫£n
        safe_quantity, liquidity_reason = calculate_max_quantity_from_liquidity(
            symbol, quantity, order_book_analysis
        )
        
        # Ki·ªÉm tra t√°c ƒë·ªông th·ªã tr∆∞·ªùng (silent)
        market_impact = check_market_impact(symbol, safe_quantity, order_book_analysis)
        
        # S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng ƒë√£ ƒëi·ªÅu ch·ªânh
        final_quantity = safe_quantity
        
        # Ki·ªÉm tra market info ƒë·ªÉ ƒë·∫£m b·∫£o order h·ª£p l·ªá (silent)
        try:
            market = binance.market(trading_symbol)
            min_amount = market['limits']['amount']['min']
            min_cost = market['limits']['cost']['min']
            
            if final_quantity < min_amount:
                return {'status': 'failed', 'error': f'Quantity too small. Min: {min_amount}'}
            
            if final_quantity * current_price < min_cost:
                return {'status': 'failed', 'error': f'Order value too small. Min: ¬•{min_cost}'}
                
        except Exception as market_error:
            pass  # Silent check
        
        # Ki·ªÉm tra s·ªë d∆∞ tr∆∞·ªõc khi ƒë·∫∑t l·ªánh
        balance_check = validate_balance_for_order(trading_symbol, final_quantity, current_price)
        
        if not balance_check['valid']:
            if 'shortage' in balance_check:
                print(f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß: ¬•{balance_check['current_balance']:,.2f} < ¬•{balance_check['required']:,.2f}")
                return {'status': 'failed', 'error': 'insufficient_balance'}
            else:
                return {'status': 'failed', 'error': 'balance_check_error'}
        
        print(f"üí∞ S·ªë d∆∞: ¬•{balance_check['current_balance']:,.2f}")
        print(f"üéØ ƒê·∫∑t l·ªánh {trading_symbol}: Entry ¬•{entry_price:.2f} | SL ¬•{stop_loss:.2f} | TP ¬•{tp_price:.2f}")
        
        # 1. ƒê·∫∑t l·ªánh mua market
        try:
            buy_order = binance.create_market_buy_order(trading_symbol, final_quantity)
            
            # L·∫•y gi√° th·ª±c t·∫ø ƒë√£ mua
            actual_price = float(buy_order['average']) if buy_order['average'] else current_price
            actual_quantity = float(buy_order['filled'])
            
            print(f"‚úÖ MUA TH√ÄNH C√îNG: {actual_quantity:.6f} @ ¬•{actual_price:.2f}")
            
            # L∆∞u th√¥ng tin mua v√†o position manager
            position_info = position_manager.add_buy_order(
                trading_symbol, 
                actual_quantity, 
                actual_price, 
                buy_order['id']
            )
            
            # T√≠nh l·∫°i SL/TP d·ª±a tr√™n gi√° trung b√¨nh t·ª´ position manager
            if position_info:
                avg_based_prices = position_manager.calculate_sl_tp_prices(trading_symbol)
                if avg_based_prices:
                    # S·ª≠ d·ª•ng gi√° SL/TP t·ª´ position manager (d·ª±a tr√™n gi√° trung b√¨nh)
                    stop_loss = avg_based_prices['stop_loss']
                    tp_price = avg_based_prices['tp1_price']  # Ch·ªâ d√πng TP1 l√†m TP duy nh·∫•t
                    
                    print(f"üìä SL/TP d·ª±a tr√™n gi√° TB ¬•{avg_based_prices['average_entry']:.4f}:")
                    print(f"   üõ°Ô∏è SL: ¬•{stop_loss:.4f} | üéØ TP: ¬•{tp_price:.4f}")
            
        except Exception as buy_error:
            error_str = str(buy_error).lower()
            
            # X·ª≠ l√Ω l·ªói ƒë·∫∑t l·ªánh
            if any(keyword in error_str for keyword in ['insufficient', 'balance', 'not enough']):
                print(f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß: {trading_symbol}")
                return {'status': 'failed', 'error': 'insufficient_balance'}
            elif 'min notional' in error_str:
                print(f"‚ùå Gi√° tr·ªã l·ªánh qu√° nh·ªè: {trading_symbol}")
                return {'status': 'failed', 'error': 'min_notional'}
            else:
                print(f"‚ùå L·ªói ƒë·∫∑t l·ªánh: {trading_symbol} - {buy_error}")
                return {'status': 'failed', 'error': str(buy_error)}
        
        # G·ª≠i email notification (silent)
        try:
            from account_info import send_buy_success_notification
            from datetime import datetime
            
            buy_notification_data = {
                'symbol': trading_symbol,
                'quantity': actual_quantity,
                'price': actual_price,
                'total': actual_quantity * actual_price,
                'order_id': buy_order['id'],
                'balance_before': 'N/A',
                'balance_after': 'N/A',
                'stop_loss': stop_loss,
                'tp': tp_price,  # Ch·ªâ 1 TP
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            send_buy_success_notification(buy_notification_data)
            
        except Exception:
            pass  # Silent email
        
        # 2. ƒê·∫∑t stop loss v√† take profit v·ªõi s·ªë l∆∞·ª£ng th·ª±c t·∫ø
        orders_placed = []
        oco_success = False
        available_coin = actual_quantity  # M·∫∑c ƒë·ªãnh
        
        # Ki·ªÉm tra s·ªë d∆∞ ADA sau khi mua (ƒë·ª£i settle)
        try:
            time.sleep(3)  # ƒê·ª£i 5 gi√¢y cho giao d·ªãch settle ho√†n to√†n
            balance = binance.fetch_balance()
            coin_name = trading_symbol.split('/')[0]  # L·∫•y ADA t·ª´ ADA/JPY
            available_coin = balance.get(coin_name, {}).get('free', 0)
            
            print(f"üí∞ S·ªë d∆∞ {coin_name} kh·∫£ d·ª•ng: {available_coin:.6f}")
            
            # ƒêi·ªÅu ch·ªânh quantity n·∫øu c·∫ßn thi·∫øt
            if available_coin < actual_quantity:
                print(f"‚ö†Ô∏è ƒêi·ªÅu ch·ªânh quantity: {actual_quantity:.6f} ‚Üí {available_coin:.6f}")
                actual_quantity = available_coin * 0.99  # Gi·ªØ l·∫°i 1% buffer
                available_coin = actual_quantity  # C·∫≠p nh·∫≠t available_coin
                
        except Exception as balance_error:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra s·ªë d∆∞: {balance_error}")
            available_coin = actual_quantity * 0.95  # Fallback: gi·ªØ 5% buffer
        
        # Th·ª≠ ƒë·∫∑t OCO order tr∆∞·ªõc (n·∫øu ƒë∆∞·ª£c b·∫≠t)
        if TRADING_CONFIG['use_oco_orders']:
            try:
                oco_order = binance.create_order(
                    symbol=trading_symbol,
                    type='OCO',
                    side='sell',
                    amount=actual_quantity * 0.95,  # 95% cho OCO
                    price=tp_price,  # Take profit price
                    params={
                        'stopPrice': stop_loss,  # Stop loss trigger price
                        'stopLimitPrice': stop_loss * (1 - TRADING_CONFIG['stop_loss_buffer']),
                        'stopLimitTimeInForce': 'GTC'
                    }
                )
                orders_placed.append(oco_order)
                oco_success = True
                print(f"‚úÖ OCO: SL ¬•{stop_loss:.2f} | TP ¬•{tp_price:.2f}")
                
                # Th√™m OCO order v√†o danh s√°ch theo d√µi (silent)
                add_order_to_monitor(oco_order['id'], trading_symbol, "OCO (SL/TP)", actual_price)
                
            except Exception as oco_error:
                pass  # Chuy·ªÉn sang ƒë·∫∑t l·ªánh ri√™ng l·∫ª
        
        # N·∫øu OCO th·∫•t b·∫°i ho·∫∑c kh√¥ng ƒë∆∞·ª£c b·∫≠t, ƒë·∫∑t l·ªánh ri√™ng l·∫ª
        if not oco_success:
            # PH√ÇN CHIA ƒê∆†N GI·∫¢N: CH·ªà SL + TP (tr√°nh l·ªói NOTIONAL)
            total_reserve = available_coin * 0.95  # Ch·ªâ s·ª≠ d·ª•ng 95% s·ªë d∆∞
            sl_quantity = total_reserve * 0.6      # 60% cho stop loss
            tp_quantity = total_reserve * 0.4      # 40% cho TP
            
            print(f"üìä Ph√¢n chia l·ªánh b√°n: SL={sl_quantity:.6f} | TP={tp_quantity:.6f}")
            print("üí° Ch·ªâ ƒë·∫∑t 1 TP ƒë·ªÉ ƒë·∫£m b·∫£o l√£i sau ph√≠")
            
            # Ki·ªÉm tra gi√° tr·ªã minimum notional cho TP
            min_notional = 5.0  # Binance minimum l√† 5 JPY
            tp_notional = tp_quantity * tp_price
            
            # N·∫øu TP v·∫´n nh·ªè h∆°n min_notional, g·ªôp v√†o SL
            if tp_notional < min_notional:
                print(f"‚ö†Ô∏è TP notional qu√° th·∫•p ({tp_notional:.2f} < {min_notional}), chuy·ªÉn v√†o SL")
                sl_quantity = total_reserve  # All-in v√†o SL
                tp_quantity = 0
            
            # 1. ƒê·∫∑t Stop Loss
            try:
                stop_order = binance.create_order(
                    symbol=trading_symbol,
                    type='STOP_LOSS_LIMIT',
                    side='sell',
                    amount=sl_quantity,
                    price=stop_loss * (1 - TRADING_CONFIG.get('stop_loss_buffer', 0.001)),
                    params={
                        'stopPrice': stop_loss,
                        'timeInForce': 'GTC'
                    }
                )
                orders_placed.append(stop_order)
                print(f"‚úÖ SL: ¬•{stop_loss:.2f} (Quantity: {sl_quantity:.6f})")
                add_order_to_monitor(stop_order['id'], trading_symbol, "STOP_LOSS", actual_price)
                
            except Exception as sl_error:
                print(f"‚ùå L·ªói ƒë·∫∑t SL: {sl_error}")
                print(f"  üîç Chi ti·∫øt: Symbol={trading_symbol}, Quantity={sl_quantity:.6f}, Price=¬•{stop_loss:.2f}")
            
            # 2. ƒê·∫∑t Take Profit (n·∫øu c√≥ ƒë·ªß notional)
            if tp_quantity > 0:
                try:
                    tp_notional_value = tp_quantity * tp_price
                    
                    if tp_notional_value >= min_notional:
                        tp_order = binance.create_limit_sell_order(
                            trading_symbol, 
                            tp_quantity,
                            tp_price
                        )
                        orders_placed.append(tp_order)
                        print(f"‚úÖ TP: ¬•{tp_price:.2f} (Quantity: {tp_quantity:.6f})")
                        add_order_to_monitor(tp_order['id'], trading_symbol, "TAKE_PROFIT", actual_price)
                    else:
                        print(f"‚ö†Ô∏è TP b·ªè qua: Gi√° tr·ªã ¬•{tp_notional_value:.2f} < minimum ¬•{min_notional}")
                        print("ÔøΩ Ch·ªâ c√≥ Stop Loss ƒë∆∞·ª£c ƒë·∫∑t - qu·∫£n l√Ω TP th·ªß c√¥ng")
                    
                except Exception as tp_error:
                    print(f"‚ùå L·ªói ƒë·∫∑t TP: {tp_error}")
                    print("‚ö†Ô∏è Ch·ªâ c√≥ Stop Loss ƒë∆∞·ª£c ƒë·∫∑t - qu·∫£n l√Ω TP th·ªß c√¥ng")
        
        # Ki·ªÉm tra s·ªë d∆∞ sau khi ƒë·∫∑t l·ªánh
        final_balance = get_account_balance()
        print(f"üí∞ S·ªë d∆∞ sau: ¬•{final_balance:,.2f}")
        
        # Th√¥ng b√°o k·∫øt qu·∫£
        total_orders = len(orders_placed)
        if total_orders > 0:
            print(f"‚úÖ ƒê·∫∑t {total_orders} l·ªánh b√°n th√†nh c√¥ng")
        else:
            print(f"‚ùå Kh√¥ng ƒë·∫∑t ƒë∆∞·ª£c l·ªánh b√°n n√†o")
        
        # G·ª≠i email ƒë·∫∑t l·ªánh b√°n (silent)
        try:
            from account_info import send_sell_order_placed_notification
            
            sell_order_notification_data = {
                'symbol': trading_symbol,
                'original_quantity': actual_quantity,
                'buy_price': actual_price,
                'stop_loss': stop_loss,
                'sl_order_id': orders_placed[0]['id'] if orders_placed else 'N/A',
                'tp1_order_id': orders_placed[1]['id'] if len(orders_placed) > 1 else 'N/A',
                'tp1_price': tp1_price,
                'tp1_quantity': tp1_quantity if tp1_quantity > 0 else 0,
                'tp2_order_id': 'N/A',  # Kh√¥ng c√≤n TP2
                'tp2_price': 0,         # Kh√¥ng c√≤n TP2
                'tp2_quantity': 0,      # Kh√¥ng c√≤n TP2
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'note': 'Ch·ªâ ƒë·∫∑t TP1 ƒë·ªÉ tr√°nh l·ªói NOTIONAL'
            }
            
            send_sell_order_placed_notification(sell_order_notification_data)
            
        except Exception:
            pass  # Silent email
        
        return {
            'buy_order': buy_order,
            'sl_tp_orders': orders_placed,
            'status': 'success',
            'actual_price': actual_price,
            'actual_quantity': actual_quantity,
            'trading_symbol': trading_symbol,
            'original_quantity': quantity,
            'adjusted_quantity': final_quantity,
            'liquidity_reason': liquidity_reason,
            'market_impact': market_impact
        }
        
    except Exception as e:
        error_msg = f"‚ùå L·ªói khi ƒë·∫∑t l·ªánh mua {symbol}: {e}"
        print(error_msg)
        send_notification(error_msg, urgent=True)
        return {'status': 'failed', 'error': str(e)}

# H√†m ki·ªÉm tra v√† x·ª≠ l√Ω coin t·ªìn kho
def handle_inventory_coins():
    """Ki·ªÉm tra v√† ƒë·∫∑t l·ªánh b√°n cho c√°c coin ƒëang t·ªìn kho"""
    try:
        balance = binance.fetch_balance()
        inventory_coins = []
        
        # L·∫•y danh s√°ch coin c√≥ s·ªë d∆∞ > 0 (kh√¥ng t√≠nh JPY v√† USDT)
        for coin, balance_info in balance.items():
            # B·ªè qua c√°c key kh√¥ng ph·∫£i l√† coin
            if coin in ['JPY', 'USDT', 'free', 'used', 'total', 'info']:
                continue
            
            # Ki·ªÉm tra balance_info c√≥ ph·∫£i l√† dict kh√¥ng
            if not isinstance(balance_info, dict):
                continue
                
            free_balance = balance_info.get('free', 0)
            if free_balance > 0:
                # Ki·ªÉm tra xem c√≥ symbol JPY kh√¥ng
                symbol = f"{coin}/JPY"
                try:
                    # Ki·ªÉm tra symbol c√≥ t·ªìn t·∫°i kh√¥ng
                    current_price = get_current_jpy_price(symbol)
                    if current_price:
                        inventory_coins.append({
                            'coin': coin,
                            'symbol': symbol,
                            'quantity': free_balance,
                            'current_price': current_price,
                            'value_jpy': free_balance * current_price
                        })
                except Exception:
                    pass  # Coin kh√¥ng c√≥ c·∫∑p JPY
        
        if not inventory_coins:
            print("‚úÖ Kh√¥ng c√≥ coin t·ªìn kho")
            return True
        
        print(f"üì¶ Ph√°t hi·ªán {len(inventory_coins)} coin t·ªìn kho:")
        total_inventory_value = 0
        
        for coin_info in inventory_coins:
            value_jpy = coin_info['value_jpy']
            total_inventory_value += value_jpy
            print(f"   üí∞ {coin_info['coin']}: {coin_info['quantity']:.6f} ‚âà ¬•{value_jpy:,.2f}")
        
        print(f"üìä T·ªïng gi√° tr·ªã t·ªìn kho: ¬•{total_inventory_value:,.2f}")
        
        # ƒê·∫∑t l·ªánh b√°n market cho t·∫•t c·∫£ coin t·ªìn kho
        successful_sales = 0
        total_sold_value = 0
        skipped_coins = []
        
        for coin_info in inventory_coins:
            try:
                symbol = coin_info['symbol']
                quantity = coin_info['quantity'] * 0.995  # Gi·ªØ l·∫°i 0.5% buffer
                
                # Ki·ªÉm tra position ƒë·ªÉ t√≠nh SL/TP d·ª±a tr√™n gi√° trung b√¨nh
                position_info = position_manager.get_position(symbol)
                if position_info:
                    avg_price = position_info['average_price']
                    print(f"   üìä {coin_info['coin']}: Gi√° TB ¬•{avg_price:.4f} | Gi√° hi·ªán t·∫°i ¬•{coin_info['current_price']:.4f}")
                    
                    # T√≠nh P&L
                    pnl_percent = (coin_info['current_price'] - avg_price) / avg_price * 100
                    pnl_status = "üìà" if pnl_percent > 0 else "üìâ"
                    print(f"   {pnl_status} P&L: {pnl_percent:+.2f}%")
                
                # L·∫•y th√¥ng tin market
                try:
                    market = binance.market(symbol)
                    min_amount = market['limits']['amount']['min']
                    min_cost = market['limits']['cost']['min']
                except Exception as market_error:
                    print(f"   ‚ö†Ô∏è {coin_info['coin']}: Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin market - {market_error}")
                    continue
                
                # Ki·ªÉm tra minimum requirements
                if quantity < min_amount:
                    print(f"   ‚ö†Ô∏è {coin_info['coin']}: S·ªë l∆∞·ª£ng qu√° nh·ªè ({quantity:.6f} < {min_amount})")
                    skipped_coins.append({
                        'coin': coin_info['coin'],
                        'quantity': quantity,
                        'value': coin_info['value_jpy'],
                        'reason': 'minimum_amount'
                    })
                    continue
                
                current_value = quantity * coin_info['current_price']
                if current_value < min_cost:
                    print(f"   ‚ö†Ô∏è {coin_info['coin']}: Gi√° tr·ªã qu√° nh·ªè (¬•{current_value:.2f} < ¬•{min_cost})")
                    skipped_coins.append({
                        'coin': coin_info['coin'],
                        'quantity': quantity,
                        'value': coin_info['value_jpy'],
                        'reason': 'minimum_cost'
                    })
                    continue
                
                # ƒê·∫∑t l·ªánh b√°n market
                sell_order = binance.create_market_sell_order(symbol, quantity)
                actual_quantity = float(sell_order['filled'])
                actual_price = float(sell_order['average']) if sell_order['average'] else coin_info['current_price']
                sold_value = actual_quantity * actual_price
                
                successful_sales += 1
                total_sold_value += sold_value
                
                print(f"   ‚úÖ B√ÅN {coin_info['coin']}: {actual_quantity:.6f} @ ¬•{actual_price:.2f} = ¬•{sold_value:,.2f}")
                
                # X√≥a position sau khi b√°n
                position_manager.remove_position(symbol, actual_quantity)
                
            except Exception as sell_error:
                print(f"   ‚ùå L·ªói b√°n {coin_info['coin']}: {sell_error}")
                skipped_coins.append({
                    'coin': coin_info['coin'],
                    'quantity': coin_info['quantity'],
                    'value': coin_info['value_jpy'],
                    'reason': f'error: {sell_error}'
                })
        
        # T·ªïng k·∫øt v√† c·∫£nh b√°o
        if successful_sales > 0:
            print(f"üèÜ ƒê√É B√ÅN TH√ÄNH C√îNG: {successful_sales}/{len(inventory_coins)} coin")
            print(f"üí∞ T·ªïng thu v·ªÅ: ¬•{total_sold_value:,.2f}")
            
            # G·ª≠i th√¥ng b√°o
            send_notification(f"üè¶ ƒê√£ thanh l√Ω t·ªìn kho: {successful_sales} coin ‚Üí ¬•{total_sold_value:,.2f}")
            
            # ƒê·ª£i 3 gi√¢y ƒë·ªÉ s·ªë d∆∞ c·∫≠p nh·∫≠t
            time.sleep(3)
        
        # C·∫£nh b√°o v·ªÅ coin kh√¥ng b√°n ƒë∆∞·ª£c
        if skipped_coins:
            total_skipped_value = sum(coin['value'] for coin in skipped_coins)
            print(f"‚ö†Ô∏è C·∫¢NH B√ÅO: {len(skipped_coins)} coin kh√¥ng th·ªÉ b√°n (T·ªïng ‚âà ¬•{total_skipped_value:.2f}):")
            for coin in skipped_coins:
                print(f"   ‚Ä¢ {coin['coin']}: {coin['quantity']:.6f} ‚âà ¬•{coin['value']:.2f} - {coin['reason']}")
            print("   üí° ƒê√¢y l√† 'dust' - coin s·ªë l∆∞·ª£ng qu√° nh·ªè. Binance s·∫Ω t·ª± ƒë·ªông d·ªçn d·∫πp ƒë·ªãnh k·ª≥.")
            
            # G·ª≠i th√¥ng b√°o v·ªÅ dust
            if total_skipped_value > 1:  # Ch·ªâ th√¥ng b√°o n·∫øu > ¬•1
                send_notification(f"‚ö†Ô∏è Coin dust kh√¥ng th·ªÉ b√°n: {len(skipped_coins)} coin ‚âà ¬•{total_skipped_value:.2f}")
        
        return successful_sales > 0 or len(skipped_coins) == 0
            
    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω t·ªìn kho: {e}")
        return False

# H√†m ki·ªÉm tra v√† h·ªßy orders c≈©
def cancel_all_open_orders():
    """H·ªßy t·∫•t c·∫£ orders ƒëang m·ªü ƒë·ªÉ tr√°nh xung ƒë·ªôt"""
    try:
        binance.options["warnOnFetchOpenOrdersWithoutSymbol"] = False
        open_orders = binance.fetch_open_orders()
        if open_orders:
            print(f"üóëÔ∏è H·ªßy {len(open_orders)} l·ªánh ƒëang ch·ªù...")
            for order in open_orders:
                try:
                    binance.cancel_order(order['id'], order['symbol'])
                    print(f"   ‚úÖ H·ªßy l·ªánh {order['symbol']}: {order['type']} {order['side']}")
                except Exception:
                    pass  # Silent cancel
        else:
            print("‚úÖ Kh√¥ng c√≥ orders ƒëang m·ªü")
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra orders: {e}")

# H√†m th·ª±c hi·ªán trading t·ª± ƒë·ªông
@system_error_handler("execute_auto_trading", critical=True)
def execute_auto_trading(recommendations):
    """Th·ª±c hi·ªán trading t·ª± ƒë·ªông d·ª±a tr√™n khuy·∫øn ngh·ªã"""
    global BOT_RUNNING
    
    if not BOT_RUNNING:
        print("üõë Bot ƒë√£ d·ª´ng - Kh√¥ng th·ª±c hi·ªán trading")
        return
        
    if not TRADING_CONFIG['enabled']:
        print("‚ùå Auto trading ƒë√£ t·∫Øt")
        return
    
    if TRADING_CONFIG.get('emergency_stop', False):
        print("üö® EMERGENCY STOP")
        return
    
    if not recommendations:
        print("üí° Kh√¥ng c√≥ t√≠n hi·ªáu trading")
        return
    
    # Ki·ªÉm tra t√†i kho·∫£n (silent)
    account_info = get_account_info()
    if not account_info:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n")
        return
    
    # Ki·ªÉm tra email (silent)
    test_email_notification()
        
    try:
        # 1. Ki·ªÉm tra s·ªë d∆∞ JPY
        jpy_balance = get_account_balance()
        print(f"üí∞ S·ªë d∆∞ JPY: ¬•{jpy_balance:,.2f}")
        
        # 2. H·ªßy orders c≈© v√† x·ª≠ l√Ω coin t·ªìn kho
        print("üîÑ B∆Ø·ªöC 1: X·ª¨ L√ù L·ªÜNH C≈® V√Ä T·ªíN KHO")
        cancel_all_open_orders()
        
        # 3. X·ª≠ l√Ω coin t·ªìn kho (b√°n h·∫øt ƒë·ªÉ c√≥ JPY trading m·ªõi)
        print("üîÑ B∆Ø·ªöC 2: THANH L√ù T·ªíN KHO")
        inventory_handled = handle_inventory_coins()
        
        # 4. C·∫≠p nh·∫≠t l·∫°i s·ªë d∆∞ JPY sau khi thanh l√Ω t·ªìn kho
        jpy_balance = get_account_balance()
        print(f"üí∞ S·ªë d∆∞ JPY sau thanh l√Ω: ¬•{jpy_balance:,.2f}")
        
        if jpy_balance <= 0:
            print("‚ùå Kh√¥ng c√≥ s·ªë d∆∞ ƒë·ªÉ trading sau thanh l√Ω")
            return
        
        # 5. L·ªçc recommendations c√≥ gi√° h·ª£p l·ªá
        print("üîÑ B∆Ø·ªöC 3: PH√ÇN T√çCH C∆† H·ªòI M·ªöI")
        valid_recommendations = []
        for coin_data in recommendations:
            original_symbol = f"{coin_data['coin']}/JPY"
            current_jpy_price = get_current_jpy_price(original_symbol)
            if current_jpy_price:
                coin_data['current_price'] = current_jpy_price
                valid_recommendations.append(coin_data)
        
        num_coins = len(valid_recommendations)
        if num_coins == 0:
            print("‚ùå Kh√¥ng c√≥ coin n√†o c√≥ gi√° h·ª£p l·ªá")
            return
        
        # 6. Ki·ªÉm tra xem c√≥ ph·∫£i c√πng 1 coin kh√¥ng (ƒë·ªÉ all-in)
        print("üîÑ B∆Ø·ªöC 4: TH·ª∞C HI·ªÜN TRADING M·ªöI")
        unique_coins = set(coin_data['coin'] for coin_data in valid_recommendations)
        is_same_coin = len(unique_coins) == 1
        
        if is_same_coin:
            single_coin = list(unique_coins)[0]
            print(f"üéØ PH√ÅT HI·ªÜN C√ôNG 1 COIN: {single_coin}")
            print(f"üìä C√≥ {num_coins} t√≠n hi·ªáu cho {single_coin} ‚Üí ALL-IN to√†n b·ªô s·ªë d∆∞!")
            allocation_per_coin = 0.95  # All-in 95% s·ªë d∆∞
        else:
            print(f"üìä C√≥ {len(unique_coins)} coins kh√°c nhau ‚Üí Chia ƒë·ªÅu s·ªë d∆∞")
            allocation_per_coin = 0.95 / num_coins
        
        # C·∫≠p nh·∫≠t recommendations v·ªõi danh s√°ch ƒë√£ l·ªçc
        recommendations = valid_recommendations
        
        successful_trades = 0
        total_invested = 0
        
        # N·∫øu c√πng 1 coin, ch·ªâ trade 1 l·∫ßn v·ªõi to√†n b·ªô s·ªë d∆∞
        if is_same_coin:
            # Ch·ªçn recommendation t·ªët nh·∫•t (highest confidence score)
            best_recommendation = max(valid_recommendations, key=lambda x: x.get('confidence_score', 0))
            
            coin_data = best_recommendation
            original_symbol = f"{coin_data['coin']}/JPY"
            jpy_symbol = original_symbol
            
            # L·∫•y s·ªë d∆∞ hi·ªán t·∫°i (real-time) - ALL-IN
            balance = binance.fetch_balance()
            current_jpy_balance = balance['free'].get('JPY', 0)
            
            # ALL-IN to√†n b·ªô s·ªë d∆∞ (95%)
            investment_amount = current_jpy_balance * allocation_per_coin
            current_jpy_price = coin_data.get('current_price')
            quantity = investment_amount / current_jpy_price
            
            print(f"üöÄ ALL-IN: {coin_data['coin']} v·ªõi ¬•{investment_amount:,.2f} (95% s·ªë d∆∞)")
            print(f"üìà S·ª≠ d·ª•ng t√≠n hi·ªáu t·ªët nh·∫•t: Confidence {coin_data.get('confidence_score', 0):.1f}")
            
            # Validation d·ªØ li·ªáu
            required_keys = ['optimal_entry', 'stop_loss', 'tp_price']
            missing_keys = [key for key in required_keys if key not in coin_data]
            
            if missing_keys:
                print(f"‚ùå D·ªØ li·ªáu coin {coin_data.get('coin', 'Unknown')} thi·∫øu key: {missing_keys}")
                # T·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh
                entry_jpy = current_jpy_price
                stop_loss_jpy = current_jpy_price * 0.97  # -3% stop loss
                tp1_jpy = current_jpy_price * 1.02       # +2% take profit
                print(f"‚ö†Ô∏è S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh - Entry: ¬•{entry_jpy:,.2f}, SL: ¬•{stop_loss_jpy:,.2f}")
            else:
                entry_jpy = coin_data['optimal_entry']
                stop_loss_jpy = coin_data['stop_loss']
                tp1_jpy = coin_data['tp_price']  # Ch·ªâ c√≤n 1 TP
            
            print(f"üéØ ALL-IN {jpy_symbol}: Entry ¬•{entry_jpy:.2f} | ƒê·∫ßu t∆∞ ¬•{investment_amount:,.2f}")
            
            # Execute all-in trade
            if current_jpy_balance >= investment_amount:
                result = place_buy_order_with_sl_tp(
                    jpy_symbol, quantity, entry_jpy, stop_loss_jpy, tp1_jpy
                )
                
                if result['status'] == 'success':
                    successful_trades = 1
                    total_invested = investment_amount
                    print(f"‚úÖ ALL-IN TH√ÄNH C√îNG: {coin_data['coin']}")
                else:
                    print(f"‚ùå ALL-IN TH·∫§T B·∫†I: {coin_data['coin']} - {result.get('error', 'Unknown error')}")
            else:
                print(f"‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß cho ALL-IN: ¬•{current_jpy_balance:,.2f} < ¬•{investment_amount:,.2f}")
        
        else:
            # Logic c≈©: Chia ƒë·ªÅu cho nhi·ªÅu coins kh√°c nhau
            for i, coin_data in enumerate(recommendations):
                try:
                    original_symbol = f"{coin_data['coin']}/JPY"
                    # Trade tr·ª±c ti·∫øp JPY
                    jpy_symbol = original_symbol
                    
                    # L·∫•y gi√° hi·ªán t·∫°i JPY (ƒë√£ c√≥ t·ª´ validation tr∆∞·ªõc ƒë√≥)
                    current_jpy_price = coin_data.get('current_price')
                    if not current_jpy_price:
                        current_jpy_price = get_current_jpy_price(original_symbol)
                        if not current_jpy_price:
                            print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° {jpy_symbol}")
                            continue
                    
                    # L·∫•y s·ªë d∆∞ hi·ªán t·∫°i (real-time) - ch·ªâ JPY
                    balance = binance.fetch_balance()
                    current_jpy_balance = balance['free'].get('JPY', 0)
                    
                    # T√≠nh to√°n s·ªë ti·ªÅn ƒë·∫ßu t∆∞ - chia ƒë·ªÅu
                    investment_amount = current_jpy_balance * allocation_per_coin
                    
                    # T√≠nh s·ªë l∆∞·ª£ng coin
                    quantity = investment_amount / current_jpy_price
                    
                    # Validation: Ki·ªÉm tra d·ªØ li·ªáu coin c√≥ ƒë·∫ßy ƒë·ªß kh√¥ng
                    required_keys = ['optimal_entry', 'stop_loss', 'tp_price']
                    missing_keys = [key for key in required_keys if key not in coin_data]
                    
                    if missing_keys:
                        print(f"‚ùå D·ªØ li·ªáu coin {coin_data.get('coin', 'Unknown')} thi·∫øu key: {missing_keys}")
                        print(f"  Available keys: {list(coin_data.keys())}")
                        
                        # T·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh d·ª±a tr√™n gi√° hi·ªán t·∫°i
                        entry_jpy = current_jpy_price
                        stop_loss_jpy = current_jpy_price * 0.97  # -3% stop loss
                        tp1_jpy = current_jpy_price * 1.02       # +2% take profit
                        
                        print(f"‚ö†Ô∏è S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh - Entry: ¬•{entry_jpy:,.2f}, SL: ¬•{stop_loss_jpy:,.2f}")
                    else:
                        # L·∫•y th√¥ng tin gi√° t·ª´ khuy·∫øn ngh·ªã (JPY)
                        entry_jpy = coin_data['optimal_entry']
                        stop_loss_jpy = coin_data['stop_loss']
                        tp1_jpy = coin_data['tp_price']  # Ch·ªâ c√≤n 1 TP
                    
                    print(f"üéØ {jpy_symbol}: Entry ¬•{entry_jpy:.2f} | ƒê·∫ßu t∆∞ ¬•{investment_amount:,.2f}")
                    
                    # Trading ƒë∆°n gi·∫£n - chia ƒë·ªÅu s·ªë d∆∞
                    if current_jpy_balance >= investment_amount:
                        # ƒê·ªß JPY - trade tr·ª±c ti·∫øp
                        result = place_buy_order_with_sl_tp(
                            original_symbol, quantity, entry_jpy, 
                            stop_loss_jpy, tp1_jpy
                        )
                    else:
                        # Kh√¥ng ƒë·ªß JPY
                        print(f"‚ùå B·ªè qua {coin_data['coin']}: Kh√¥ng ƒë·ªß JPY (c·∫ßn ¬•{investment_amount:,.2f}, c√≥ ¬•{current_jpy_balance:,.2f})")
                        continue
                    
                    if result['status'] == 'success':
                        successful_trades += 1
                        total_invested += investment_amount
                        print(f"‚úÖ {jpy_symbol} th√†nh c√¥ng!")
                        
                        # Th√¥ng b√°o chi ti·∫øt (silent email)
                        send_notification(
                            f"‚úÖ Mua th√†nh c√¥ng {coin_data['coin']}: ¬•{investment_amount:,.0f} @ ¬•{entry_jpy:.2f}",
                            urgent=False
                        )
                    else:
                        print(f"‚ùå {jpy_symbol} th·∫•t b·∫°i: {result.get('error', 'Unknown error')}")
                    
                    # Delay gi·ªØa c√°c trades
                    if i < len(recommendations) - 1:  # Kh√¥ng delay sau trade cu·ªëi
                        time.sleep(3)
                    
                except Exception as e:
                    print(f"‚ùå L·ªói trading {coin_data['coin']}: {e}")
        
        # 7. T·ªïng k·∫øt
        final_balance = get_account_balance()
        failed_trades = len(valid_recommendations) - successful_trades
        
        print(f"\nüìã T·ªîNG K·∫æT TRADING SESSION:")
        print(f"üîÑ ƒê√£ thanh l√Ω t·ªìn kho: {'‚úÖ' if inventory_handled else '‚ùå'}")
        if is_same_coin:
            print(f"üöÄ ALL-IN Result: {'SUCCESS' if successful_trades > 0 else 'FAILED'}")
        else:
            print(f"‚úÖ Th√†nh c√¥ng: {successful_trades}/{len(valid_recommendations)}")
            print(f"‚ùå Th·∫•t b·∫°i: {failed_trades}")
        print(f"üí∞ ƒê·∫ßu t∆∞ m·ªõi: ¬•{total_invested:.2f}")
        print(f"üí∞ S·ªë d∆∞ cu·ªëi: ¬•{final_balance:.2f}")
        print("=" * 50)
        
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {e}")

# H√†m l·∫•y danh s√°ch c·∫∑p crypto/JPY t·ª´ Binance
def get_jpy_pairs():
    # Ph√¢n t√≠ch c√°c c·∫∑p JPY ƒë·ªÉ ƒë∆∞a ra khuy·∫øn ngh·ªã, nh∆∞ng trade b·∫±ng USDT
    selected_pairs = ['ADA/JPY', 'XRP/JPY', 'XLM/JPY', 'SUI/JPY']
    
    try:
        markets = binance.load_markets()
        # Ki·ªÉm tra c√°c c·∫∑p c√≥ t·ªìn t·∫°i kh√¥ng (s·∫Ω ki·ªÉm tra c·∫£ JPY cho ph√¢n t√≠ch v√† USDT cho trading)
        available_pairs = []
        for pair in selected_pairs:
            # Ki·ªÉm tra c·∫∑p JPY cho ph√¢n t√≠ch
            if pair in markets:
                available_pairs.append(pair)
            else:
                # N·∫øu kh√¥ng c√≥ JPY, th·ª≠ USDT
                usdt_pair = pair.replace('/JPY', '/USDT')
                if usdt_pair in markets:
                    available_pairs.append(pair)  # V·∫´n gi·ªØ t√™n JPY cho ph√¢n t√≠ch
        
        return available_pairs
    except Exception as e:
        return selected_pairs  # Fallback v·ªÅ danh s√°ch g·ªëc

# H√†m l·∫•y d·ªØ li·ªáu gi√° t·ª´ Binance
def get_crypto_data(symbol, timeframe='1m', limit=5000):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        print(f"L·ªói khi l·∫•y d·ªØ li·ªáu cho {symbol}: {e}")
        return None

# H√†m l·∫•y s·ªï l·ªánh t·ª´ Binance
def get_order_book(symbol, limit=20):
    try:
        order_book = binance.fetch_order_book(symbol, limit=limit)
        return order_book
    except Exception as e:
        print(f"L·ªói khi l·∫•y order book cho {symbol}: {e}")
        return None

# H√†m ph√¢n t√≠ch s·ªï l·ªánh
def analyze_order_book(order_book):
    if not order_book or not order_book.get('bids') or not order_book.get('asks'):
        return None
    
    bids = order_book['bids']
    asks = order_book['asks']
    
    # Gi√° bid cao nh·∫•t v√† ask th·∫•p nh·∫•t
    best_bid = bids[0][0] if bids else 0
    best_ask = asks[0][0] if asks else 0
    
    if best_bid == 0 or best_ask == 0:
        return None
    
    # T√≠nh spread
    spread = (best_ask - best_bid) / best_bid * 100
    
    # T√≠nh t·ªïng volume bid v√† ask
    total_bid_volume = sum(bid[1] for bid in bids[:10])  # Top 10 bids
    total_ask_volume = sum(ask[1] for ask in asks[:10])  # Top 10 asks
    
    # T·ª∑ l·ªá bid/ask volume
    bid_ask_ratio = total_bid_volume / total_ask_volume if total_ask_volume > 0 else 0
    
    # Support v√† resistance levels t·ª´ order book
    support_levels = [bid[0] for bid in bids[:5]]  # Top 5 bid prices
    resistance_levels = [ask[0] for ask in asks[:5]]  # Top 5 ask prices
    
    # Ph√¢n t√≠ch volume wall v√† liquidity
    volume_weighted_bid = sum(bid[0] * bid[1] for bid in bids[:10]) / total_bid_volume if total_bid_volume > 0 else best_bid
    volume_weighted_ask = sum(ask[0] * ask[1] for ask in asks[:10]) / total_ask_volume if total_ask_volume > 0 else best_ask
    
    # T√¨m volume wall (kh·ªëi l∆∞·ª£ng l·ªõn t·∫°i m·ªôt m·ª©c gi√°)
    max_bid_volume = max(bid[1] for bid in bids[:10]) if bids else 0
    max_ask_volume = max(ask[1] for ask in asks[:10]) if asks else 0
    
    # M·ª©c gi√° c√≥ volume wall
    bid_wall_price = next((bid[0] for bid in bids[:10] if bid[1] == max_bid_volume), best_bid)
    ask_wall_price = next((ask[0] for ask in asks[:10] if ask[1] == max_ask_volume), best_ask)
    
    # T√≠nh thanh kho·∫£n c√≥ s·∫µn trong kho·∫£ng gi√° h·ª£p l√Ω (¬±2% t·ª´ gi√° t·ªët nh·∫•t)
    price_range_buy = best_ask * 1.02  # Cho ph√©p mua v·ªõi gi√° cao h∆°n 2%
    price_range_sell = best_bid * 0.98  # Cho ph√©p b√°n v·ªõi gi√° th·∫•p h∆°n 2%
    
    # T√≠nh t·ªïng volume c√≥ th·ªÉ mua trong kho·∫£ng gi√° h·ª£p l√Ω
    available_liquidity_buy = sum(ask[1] for ask in asks if ask[0] <= price_range_buy)
    
    # T√≠nh t·ªïng volume c√≥ th·ªÉ b√°n trong kho·∫£ng gi√° h·ª£p l√Ω  
    available_liquidity_sell = sum(bid[1] for bid in bids if bid[0] >= price_range_sell)
    
    return {
        'best_bid': best_bid,
        'best_ask': best_ask,
        'spread': spread,
        'bid_ask_ratio': bid_ask_ratio,
        'total_bid_volume': total_bid_volume,
        'total_ask_volume': total_ask_volume,
        'support_levels': support_levels,
        'resistance_levels': resistance_levels,
        'volume_weighted_bid': volume_weighted_bid,
        'volume_weighted_ask': volume_weighted_ask,
        'bid_wall_price': bid_wall_price,
        'ask_wall_price': ask_wall_price,
        'max_bid_volume': max_bid_volume,
        'max_ask_volume': max_ask_volume,
        'available_liquidity_buy': available_liquidity_buy,
        'available_liquidity_sell': available_liquidity_sell,
        'price_range_buy': price_range_buy,
        'price_range_sell': price_range_sell
    }

# H√†m ph√°t hi·ªán v√† ph√¢n t√≠ch downtrend chuy√™n s√¢u
def detect_comprehensive_downtrend(df, symbol):
    """
    Ph√°t hi·ªán downtrend v·ªõi nhi·ªÅu ch·ªâ b√°o k·ªπ thu·∫≠t v√† ƒë·ªô tin c·∫≠y cao
    
    Args:
        df: DataFrame ch·ª©a d·ªØ li·ªáu OHLCV
        symbol: Symbol ƒëang ph√¢n t√≠ch
    
    Returns:
        dict: {
            'detected': bool,
            'strength': str ('WEAK', 'MODERATE', 'STRONG'),
            'confidence': float (0-100),
            'reasons': list,
            'signals': dict,
            'risk_level': str,
            'recommendation': str
        }
    """
    if df is None or len(df) < 50:
        return {
            'detected': False,
            'strength': 'NONE',
            'confidence': 0,
            'reasons': ['Insufficient data'],
            'signals': {},
            'risk_level': 'UNKNOWN',
            'recommendation': 'SKIP - Insufficient data'
        }
    
    try:
        # T√≠nh c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        df_temp = df.copy()
        df_temp['SMA_10'] = SMAIndicator(df_temp['close'], window=10).sma_indicator()
        df_temp['SMA_20'] = SMAIndicator(df_temp['close'], window=20).sma_indicator()
        df_temp['SMA_50'] = SMAIndicator(df_temp['close'], window=50).sma_indicator()
        df_temp['RSI'] = RSIIndicator(df_temp['close'], window=14).rsi()
        
        # Bollinger Bands
        bb = BollingerBands(df_temp['close'], window=20)
        df_temp['BB_upper'] = bb.bollinger_hband()
        df_temp['BB_lower'] = bb.bollinger_lband()
        df_temp['BB_middle'] = bb.bollinger_mavg()
        
        # MACD
        macd = MACD(df_temp['close'])
        df_temp['MACD'] = macd.macd()
        df_temp['MACD_signal'] = macd.macd_signal()
        df_temp['MACD_histogram'] = macd.macd_diff()
        
        latest = df_temp.iloc[-1]
        prev_10 = df_temp.iloc[-10] if len(df_temp) >= 10 else df_temp.iloc[0]
        prev_20 = df_temp.iloc[-20] if len(df_temp) >= 20 else df_temp.iloc[0]
        
        downtrend_signals = {}
        downtrend_reasons = []
        signal_strength = 0
        
        # 1. MOVING AVERAGES ANALYSIS
        ma_bearish_score = 0
        if latest['SMA_10'] < latest['SMA_20']:
            ma_bearish_score += 2
            downtrend_reasons.append("SMA10 < SMA20")
        
        if latest['SMA_20'] < latest['SMA_50']:
            ma_bearish_score += 2
            downtrend_reasons.append("SMA20 < SMA50")
        
        if latest['close'] < latest['SMA_10']:
            ma_bearish_score += 1
            downtrend_reasons.append("Price below SMA10")
        
        if latest['close'] < latest['SMA_20']:
            ma_bearish_score += 1
            downtrend_reasons.append("Price below SMA20")
        
        # Slope analysis - MAs ƒëang gi·∫£m
        if latest['SMA_10'] < prev_10['SMA_10']:
            ma_bearish_score += 1
            downtrend_reasons.append("SMA10 declining")
        
        if latest['SMA_20'] < prev_20['SMA_20']:
            ma_bearish_score += 1
            downtrend_reasons.append("SMA20 declining")
        
        downtrend_signals['moving_averages'] = ma_bearish_score
        signal_strength += ma_bearish_score
        
        # 2. RSI ANALYSIS
        rsi_bearish_score = 0
        if latest['RSI'] < 50:
            rsi_bearish_score += 1
            if latest['RSI'] < 30:
                rsi_bearish_score += 1
                downtrend_reasons.append(f"RSI oversold ({latest['RSI']:.1f})")
            else:
                downtrend_reasons.append(f"RSI bearish ({latest['RSI']:.1f})")
        
        # RSI ƒëang gi·∫£m
        if latest['RSI'] < prev_10['RSI']:
            rsi_bearish_score += 1
            downtrend_reasons.append("RSI declining")
        
        downtrend_signals['rsi'] = rsi_bearish_score
        signal_strength += rsi_bearish_score
        
        # 3. MACD ANALYSIS
        macd_bearish_score = 0
        if latest['MACD'] < latest['MACD_signal']:
            macd_bearish_score += 2
            downtrend_reasons.append("MACD bearish crossover")
        
        if latest['MACD'] < 0:
            macd_bearish_score += 1
            downtrend_reasons.append("MACD below zero")
        
        if latest['MACD_histogram'] < 0:
            macd_bearish_score += 1
            downtrend_reasons.append("MACD histogram negative")
        
        downtrend_signals['macd'] = macd_bearish_score
        signal_strength += macd_bearish_score
        
        # 4. BOLLINGER BANDS ANALYSIS
        bb_bearish_score = 0
        if latest['close'] < latest['BB_middle']:
            bb_bearish_score += 1
            downtrend_reasons.append("Price below BB middle")
        
        if latest['close'] < latest['BB_lower']:
            bb_bearish_score += 2
            downtrend_reasons.append("Price below BB lower band")
        
        # BB width - volatility expansion in downtrend
        bb_width = (latest['BB_upper'] - latest['BB_lower']) / latest['BB_middle']
        prev_bb_width = (prev_10['BB_upper'] - prev_10['BB_lower']) / prev_10['BB_middle']
        
        if bb_width > prev_bb_width * 1.2 and latest['close'] < latest['BB_middle']:
            bb_bearish_score += 1
            downtrend_reasons.append("BB expansion with price decline")
        
        downtrend_signals['bollinger_bands'] = bb_bearish_score
        signal_strength += bb_bearish_score
        
        # 5. PRICE ACTION ANALYSIS
        pa_bearish_score = 0
        
        # Consecutive declining closes
        recent_closes = df_temp['close'].tail(5).values
        declining_count = 0
        for i in range(1, len(recent_closes)):
            if recent_closes[i] < recent_closes[i-1]:
                declining_count += 1
        
        if declining_count >= 3:
            pa_bearish_score += 2
            downtrend_reasons.append(f"{declining_count}/4 declining closes")
        elif declining_count >= 2:
            pa_bearish_score += 1
            downtrend_reasons.append(f"{declining_count}/4 declining closes")
        
        # Lower highs and lower lows
        recent_highs = df_temp['high'].tail(10).values
        recent_lows = df_temp['low'].tail(10).values
        
        if len(recent_highs) >= 5 and recent_highs[-1] < recent_highs[-3] < recent_highs[-5]:
            pa_bearish_score += 2
            downtrend_reasons.append("Lower highs pattern")
        
        if len(recent_lows) >= 5 and recent_lows[-1] < recent_lows[-3] < recent_lows[-5]:
            pa_bearish_score += 2
            downtrend_reasons.append("Lower lows pattern")
        
        downtrend_signals['price_action'] = pa_bearish_score
        signal_strength += pa_bearish_score
        
        # 6. VOLUME ANALYSIS
        volume_bearish_score = 0
        if len(df_temp) >= 10:
            recent_volume = df_temp['volume'].tail(5).mean()
            prev_volume = df_temp['volume'].tail(15).head(10).mean()
            
            # Volume tƒÉng khi gi√° gi·∫£m
            price_change_5d = (latest['close'] - df_temp.iloc[-5]['close']) / df_temp.iloc[-5]['close'] * 100
            
            if recent_volume > prev_volume * 1.3 and price_change_5d < -2:
                volume_bearish_score += 2
                downtrend_reasons.append("High volume on decline")
            elif recent_volume > prev_volume * 1.1 and price_change_5d < -1:
                volume_bearish_score += 1
                downtrend_reasons.append("Moderate volume on decline")
        
        downtrend_signals['volume'] = volume_bearish_score
        signal_strength += volume_bearish_score
        
        # OVERALL ASSESSMENT
        max_possible_score = 24  # T·ªïng ƒëi·ªÉm t·ªëi ƒëa
        confidence_percentage = min(100, (signal_strength / max_possible_score) * 100)
        
        # X√°c ƒë·ªãnh strength
        if signal_strength >= 16:  # >= 67% of max score
            strength = "STRONG"
            risk_level = "HIGH"
            recommendation = "AVOID - Strong downtrend detected"
        elif signal_strength >= 10:  # >= 42% of max score
            strength = "MODERATE"
            risk_level = "MEDIUM"
            recommendation = "CAUTION - Moderate downtrend, reduce position size"
        elif signal_strength >= 6:  # >= 25% of max score
            strength = "WEAK"
            risk_level = "LOW"
            recommendation = "PROCEED WITH CAUTION - Weak downtrend signals"
        else:
            strength = "NONE"
            risk_level = "NORMAL"
            recommendation = "NORMAL - No significant downtrend detected"
        
        detected = signal_strength >= 6  # Threshold for downtrend detection
        
        return {
            'detected': detected,
            'strength': strength,
            'confidence': confidence_percentage,
            'reasons': downtrend_reasons,
            'signals': downtrend_signals,
            'signal_strength': signal_strength,
            'max_possible_score': max_possible_score,
            'risk_level': risk_level,
            'recommendation': recommendation,
            'analysis_data': {
                'current_price': latest['close'],
                'sma10': latest['SMA_10'],
                'sma20': latest['SMA_20'],
                'sma50': latest['SMA_50'],
                'rsi': latest['RSI'],
                'macd': latest['MACD'],
                'macd_signal': latest['MACD_signal'],
                'bb_position': 'below' if latest['close'] < latest['BB_lower'] else 'above' if latest['close'] > latest['BB_upper'] else 'middle'
            }
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ph√¢n t√≠ch downtrend cho {symbol}: {e}")
        return {
            'detected': False,
            'strength': 'UNKNOWN',
            'confidence': 0,
            'reasons': [f'Analysis error: {e}'],
            'signals': {},
            'risk_level': 'UNKNOWN',
            'recommendation': 'SKIP - Analysis failed'
        }

# H√†m t√≠nh to√°n take profit c√≥ t√≠nh ph√≠ giao d·ªãch
def calculate_tp_with_fees(entry_price, target_profit_percent, trading_fee_percent=0.1):
    """
    T√≠nh to√°n gi√° take profit c√≥ t√≠nh ph√≠ mua/b√°n
    
    Args:
        entry_price: Gi√° v√†o l·ªánh
        target_profit_percent: % l·ª£i nhu·∫≠n mong mu·ªën (VD: 2.0 cho 2%)
        trading_fee_percent: % ph√≠ giao d·ªãch (VD: 0.1 cho 0.1% = 0.001)
    
    Returns:
        Gi√° take profit ƒë√£ t√≠nh ph√≠
    """
    # T·ªïng ph√≠ giao d·ªãch = ph√≠ mua + ph√≠ b√°n
    total_fee_percent = trading_fee_percent * 2  # 0.1% * 2 = 0.2%
    
    # Gi√° take profit c·∫ßn ƒë·∫°t ƒë·ªÉ c√≥ l·ª£i nhu·∫≠n th·ª±c = target_profit + ph√≠
    required_profit_percent = target_profit_percent + total_fee_percent
    
    # T√≠nh gi√° take profit
    tp_price = entry_price * (1 + required_profit_percent / 100)
    
    return tp_price

# H√†m t√≠nh to√°n entry, TP v√† SL th√¥ng minh d·ª±a tr√™n downtrend analysis
def calculate_dynamic_entry_tp_sl(entry_price, order_book_analysis, downtrend_analysis):
    """
    T√≠nh to√°n ƒë·ªông entry price, take profit v√† stop loss d·ª±a tr√™n:
    - Downtrend analysis strength
    - Order book conditions
    - Risk management principles
    
    Args:
        entry_price: Gi√° v√†o l·ªánh c∆° b·∫£n
        order_book_analysis: Ph√¢n t√≠ch order book
        downtrend_analysis: K·∫øt qu·∫£ ph√¢n t√≠ch downtrend
    
    Returns:
        dict: {
            'optimal_entry': float,
            'tp_price': float,
            'stop_loss': float,
            'buffer_adjustment': str,
            'tp_reasoning': str,
            'sl_reasoning': str
        }
    """
    
    downtrend_detected = downtrend_analysis['detected']
    downtrend_strength = downtrend_analysis['strength']
    risk_level = downtrend_analysis['risk_level']
    
    # === ENTRY PRICE ADJUSTMENT ===
    if downtrend_detected:
        if downtrend_strength == "STRONG":
            # STRONG downtrend - kh√¥ng n√™n trade, nh∆∞ng n·∫øu bu·ªôc ph·∫£i th√¨ r·∫•t th·∫≠n tr·ªçng
            entry_buffer = 0.005  # +0.5% buffer cao
            buffer_reason = "Strong downtrend - high entry buffer"
        elif downtrend_strength == "MODERATE":
            entry_buffer = 0.003  # +0.3% buffer
            buffer_reason = "Moderate downtrend - increased entry buffer"
        else:  # WEAK
            entry_buffer = 0.002  # +0.2% buffer
            buffer_reason = "Weak downtrend - slight entry buffer increase"
    else:
        entry_buffer = 0.001  # +0.1% buffer normal
        buffer_reason = "Normal market - standard entry buffer"
    
    optimal_entry = entry_price * (1 + entry_buffer)
    
    # === TAKE PROFIT CALCULATION ===
    if downtrend_detected:
        if downtrend_strength == "STRONG":
            # R·∫•t conservative - l·∫•y l·ªùi nhanh
            tp_percent = 0.25  # 0.25% + fees
            tp_reasoning = "Strong downtrend - quick profit taking"
        elif downtrend_strength == "MODERATE":
            tp_percent = 0.3   # 0.3% + fees
            tp_reasoning = "Moderate downtrend - conservative profit targets"
        else:  # WEAK
            tp_percent = 0.35  # 0.35% + fees
            tp_reasoning = "Weak downtrend - slightly reduced profit targets"
    else:
        # Normal market - s·ª≠ d·ª•ng config ho·∫∑c order book analysis
        if order_book_analysis and order_book_analysis.get('ask_wall_price', 0) > optimal_entry:
            # C√≥ resistance wall - conservative
            tp_percent = 0.4   # 0.4% + fees (t·ª´ config)
            tp_reasoning = "Normal market with resistance wall - standard targets"
        else:
            tp_percent = 0.4   # 0.4% + fees (standard)
            tp_reasoning = "Normal market - standard profit targets"
    
    # T√≠nh TP price v·ªõi fees
    tp_price = calculate_tp_with_fees(optimal_entry, tp_percent)
    
    # === STOP LOSS CALCULATION ===
    if downtrend_detected:
        if downtrend_strength == "STRONG":
            # Stop loss r·∫•t ch·∫∑t
            sl_percent = 0.4  # -0.4%
            sl_reasoning = "Strong downtrend - very tight stop loss"
        elif downtrend_strength == "MODERATE":
            sl_percent = 0.5  # -0.5%
            sl_reasoning = "Moderate downtrend - tight stop loss"  
        else:  # WEAK
            sl_percent = 0.6  # -0.6%
            sl_reasoning = "Weak downtrend - moderately tight stop loss"
    else:
        sl_percent = 0.8  # -0.8% normal
        sl_reasoning = "Normal market - standard stop loss"
    
    # T√≠nh stop loss price
    stop_loss = optimal_entry * (1 - sl_percent / 100)
    
    # ƒêi·ªÅu ch·ªânh SL d·ª±a tr√™n order book support n·∫øu c√≥
    if order_book_analysis and order_book_analysis.get('support_levels'):
        nearest_support = max([s for s in order_book_analysis['support_levels'] if s < optimal_entry], default=0)
        if nearest_support > 0:
            # SL kh√¥ng th·∫•p h∆°n support - 0.1%
            support_based_sl = nearest_support * 0.999
            if support_based_sl > stop_loss:
                stop_loss = support_based_sl
                sl_reasoning += " (adjusted to support level)"
    
    return {
        'optimal_entry': optimal_entry,
        'tp_price': tp_price,
        'stop_loss': stop_loss,
        'buffer_adjustment': buffer_reason,
        'tp_reasoning': tp_reasoning,
        'sl_reasoning': sl_reasoning,
        'risk_reward_ratio': (tp_percent / sl_percent) if sl_percent > 0 else 0,
        'tp_percent_with_fees': tp_percent,
        'sl_percent': sl_percent
    }

# H√†m ph√¢n t√≠ch c∆° h·ªôi giao d·ªãch d·ª±a tr√™n s·ªï l·ªánh
def analyze_orderbook_opportunity(symbol, current_price, order_book_analysis, df):
    """
    Ph√¢n t√≠ch c∆° h·ªôi giao d·ªãch d·ª±a tr√™n s·ªï l·ªánh v·ªõi ph√°t hi·ªán downtrend n√¢ng cao
    """
    if not order_book_analysis:
        return None
    
    # ===== S·ª¨ D·ª§NG H√ÄM PH√ÅT HI·ªÜN DOWNTREND CHUY√äN S√ÇU =====
    downtrend_analysis = detect_comprehensive_downtrend(df, symbol)
    
    downtrend_detected = downtrend_analysis['detected']
    downtrend_strength = downtrend_analysis['strength']
    confidence_score = downtrend_analysis['confidence']
    downtrend_reasons = downtrend_analysis['reasons']
    risk_level = downtrend_analysis['risk_level']
    
    # Log th√¥ng tin downtrend n·∫øu ph√°t hi·ªán
    if downtrend_detected:
        print(f"‚ö†Ô∏è DOWNTREND DETECTED for {symbol}:")
        print(f"   üîª Strength: {downtrend_strength} (Confidence: {confidence_score:.1f}%)")
        print(f"   üìä Risk Level: {risk_level}")
        print(f"   üìã Signals: {', '.join(downtrend_reasons[:3])}...")  # Show first 3 reasons
        
        # STRONG downtrend - t·ª´ ch·ªëi ho√†n to√†n
        if downtrend_strength == "STRONG":
            print(f"‚ùå REJECTED: {symbol} - Strong downtrend, confidence {confidence_score:.1f}%")
            return None
        
        # MODERATE downtrend - y√™u c·∫ßu cao h∆°n
        elif downtrend_strength == "MODERATE":
            print(f"‚ö†Ô∏è CAUTION: {symbol} - Moderate downtrend, applying strict filters")
            if order_book_analysis['bid_ask_ratio'] < 2.0:  # Y√™u c·∫ßu bid/ask ratio cao h∆°n
                print(f"‚ùå REJECTED: Bid/Ask ratio {order_book_analysis['bid_ask_ratio']:.2f} < 2.0 in moderate downtrend")
                return None
    
    opportunity = {
        'coin': symbol.replace('/JPY', ''),
        'current_price': current_price,
        'analysis_type': 'ORDER_BOOK_BASED',
        'confidence': 'MEDIUM',
        'downtrend_analysis': downtrend_analysis,
        'downtrend_detected': downtrend_detected,
        'downtrend_strength': downtrend_strength,
        'downtrend_reasons': downtrend_reasons
    }
    
    
    # ===== LOGIC B·∫¢O V·ªÜ T√ÄI KHO·∫¢N V·ªöI DOWNTREND ANALYSIS =====
    # T√≠nh to√°n confidence penalty d·ª±a tr√™n strength
    if downtrend_detected:
        if downtrend_strength == "STRONG":
            confidence_penalty = 60  # Penalty cao nh·∫•t
        elif downtrend_strength == "MODERATE":
            confidence_penalty = 40
        else:  # WEAK
            confidence_penalty = 20
        
        print(f"üìâ Applying downtrend penalty: -{confidence_penalty} points")
    else:
        confidence_penalty = 0
    
    # Ph√¢n t√≠ch xu h∆∞·ªõng t·ª´ bid/ask ratio v·ªõi downtrend protection
    if order_book_analysis['bid_ask_ratio'] > 1.5:
        # Nhi·ªÅu bid h∆°n ask - c√≥ th·ªÉ xu h∆∞·ªõng tƒÉng
        opportunity['trend_signal'] = 'BULLISH_BUT_CAUTIOUS' if downtrend_detected else 'BULLISH'
        opportunity['reason'] = f"Bid/Ask ratio cao ({order_book_analysis['bid_ask_ratio']:.2f})"
        
        # S·ª≠ d·ª•ng h√†m t√≠nh to√°n ƒë·ªông cho entry, TP, SL
        base_entry = order_book_analysis['best_ask']
        dynamic_calculation = calculate_dynamic_entry_tp_sl(base_entry, order_book_analysis, downtrend_analysis)
        
        entry_price = dynamic_calculation['optimal_entry']
        tp_price = dynamic_calculation['tp_price']
        stop_loss = dynamic_calculation['stop_loss']
        
        print(f"üìä Dynamic calculation for {symbol}:")
        print(f"   üéØ Entry: ¬•{entry_price:.4f} ({dynamic_calculation['buffer_adjustment']})")
        print(f"   üìà TP: ¬•{tp_price:.4f} ({dynamic_calculation['tp_reasoning']})")
        print(f"   üìâ SL: ¬•{stop_loss:.4f} ({dynamic_calculation['sl_reasoning']})")
        print(f"   ‚öñÔ∏è Risk/Reward: {dynamic_calculation['risk_reward_ratio']:.2f}")
        
    elif order_book_analysis['bid_ask_ratio'] < 0.7:
        # Nhi·ªÅu ask h∆°n bid - c√≥ th·ªÉ xu h∆∞·ªõng gi·∫£m
        if downtrend_detected and downtrend_strength in ["MODERATE", "STRONG"]:
            print(f"‚ùå REJECTED: {symbol} - Order book bearish + {downtrend_strength} downtrend")
            return None
        
        opportunity['trend_signal'] = 'BEARISH_TO_BULLISH'
        opportunity['reason'] = f"Bid/Ask ratio th·∫•p ({order_book_analysis['bid_ask_ratio']:.2f}) - potential oversold"
        
        # T√≠nh to√°n ƒë·ªông cho tr∆∞·ªùng h·ª£p oversold
        base_entry = order_book_analysis['volume_weighted_bid'] * 1.001
        dynamic_calculation = calculate_dynamic_entry_tp_sl(base_entry, order_book_analysis, downtrend_analysis)
        
        entry_price = dynamic_calculation['optimal_entry']
        tp_price = dynamic_calculation['tp_price'] 
        stop_loss = dynamic_calculation['stop_loss']
        
    else:
        # Neutral - Bid/Ask c√¢n b·∫±ng
        if downtrend_detected and downtrend_strength != "WEAK":
            print(f"‚ö†Ô∏è SKIP: {symbol} - Neutral order book in {downtrend_strength} downtrend")
            return None
        
        opportunity['trend_signal'] = 'NEUTRAL'
        opportunity['reason'] = f"Bid/Ask c√¢n b·∫±ng ({order_book_analysis['bid_ask_ratio']:.2f})"
        
        # Entry ·ªü gi·ªØa spread
        base_entry = (order_book_analysis['best_bid'] + order_book_analysis['best_ask']) / 2
        dynamic_calculation = calculate_dynamic_entry_tp_sl(base_entry, order_book_analysis, downtrend_analysis)
        
        entry_price = dynamic_calculation['optimal_entry']
        tp_price = dynamic_calculation['tp_price']
        stop_loss = dynamic_calculation['stop_loss']
    
    # T√≠nh to√°n risk/reward ratio t·ª´ dynamic calculation
    if 'dynamic_calculation' in locals():
        risk_reward_ratio = dynamic_calculation['risk_reward_ratio']
        risk_percent = dynamic_calculation['sl_percent']
        reward_percent = dynamic_calculation['tp_percent_with_fees']
    else:
        risk_percent = (entry_price - stop_loss) / entry_price * 100
        reward_percent = (tp_price - entry_price) / entry_price * 100
        risk_reward_ratio = reward_percent / risk_percent if risk_percent > 0 else 0
    
    # Confidence scoring v·ªõi downtrend protection
    base_confidence = 50
    if order_book_analysis['spread'] < 0.1:
        base_confidence += 15
    if order_book_analysis['total_bid_volume'] > 1000:
        base_confidence += 15
    if risk_reward_ratio > 1.5:
        base_confidence += 15
    
    final_confidence = max(0, base_confidence - confidence_penalty)
    
    # Requirements d·ª±a tr√™n downtrend strength
    if downtrend_detected:
        min_confidence_required = 85 if downtrend_strength == "STRONG" else 70 if downtrend_strength == "MODERATE" else 60
    else:
        min_confidence_required = 50
    
    if final_confidence < min_confidence_required:
        print(f"‚ùå REJECTED: {symbol} - Confidence {final_confidence} < {min_confidence_required}")
        return None
    
    # C·∫≠p nh·∫≠t opportunity
    opportunity.update({
        'optimal_entry': entry_price,
        'entry_price': entry_price,
        'stop_loss': stop_loss,
        'tp_price': tp_price,
        'risk_percent': risk_percent,
        'reward_percent': reward_percent,
        'risk_reward_ratio': risk_reward_ratio,
        'confidence_score': final_confidence,
        'spread': order_book_analysis['spread'],
        'bid_ask_ratio': order_book_analysis['bid_ask_ratio'],
        'total_volume': order_book_analysis['total_bid_volume'] + order_book_analysis['total_ask_volume']
    })
    
    # Log k·∫øt qu·∫£
    if downtrend_detected:
        print(f"‚úÖ ACCEPTED with PROTECTION: {symbol} ({downtrend_strength} downtrend)")
        print(f"   Entry: ¬•{entry_price:.4f} | TP: ¬•{tp_price:.4f} | SL: ¬•{stop_loss:.4f}")
        print(f"   R/R: {risk_reward_ratio:.2f} | Confidence: {final_confidence}/100")
    
    return opportunity

# H√†m t√¨m c∆° h·ªôi giao d·ªãch t·ª´ s·ªï l·ªánh cho t·∫•t c·∫£ coins - T·ªêI ∆ØU T·ªêC ƒê·ªò
def find_orderbook_opportunities_placeholder():
    """Placeholder function - will be implemented later"""
    pass

# H√†m demo ph√°t hi·ªán downtrend (ƒë·ªÉ test)
def demo_downtrend_detection(symbol_list=None):
    """
    Demo function ƒë·ªÉ test t√≠nh nƒÉng ph√°t hi·ªán downtrend
    """
    if symbol_list is None:
        symbol_list = ['ADA/JPY', 'XRP/JPY', 'XLM/JPY']
    
    print("üîç DEMO: DOWNTREND DETECTION SYSTEM")
    print("=" * 60)
    
    for symbol in symbol_list:
        try:
            print(f"\nüìä Analyzing {symbol}...")
            
            # L·∫•y d·ªØ li·ªáu
            df = get_crypto_data(symbol, timeframe='1h', limit=100)
            if df is None or len(df) < 50:
                print(f"‚ùå {symbol}: Insufficient data")
                continue
            
            # Ph√°t hi·ªán downtrend
            downtrend_analysis = detect_comprehensive_downtrend(df, symbol)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            print(f"üìà Current Price: ¬•{df['close'].iloc[-1]:.4f}")
            print(f"üîª Downtrend Detected: {'YES' if downtrend_analysis['detected'] else 'NO'}")
            print(f"üí™ Strength: {downtrend_analysis['strength']}")
            print(f"üéØ Confidence: {downtrend_analysis['confidence']:.1f}%")
            print(f"‚ö†Ô∏è Risk Level: {downtrend_analysis['risk_level']}")
            print(f"üí° Recommendation: {downtrend_analysis['recommendation']}")
            
            if downtrend_analysis['detected']:
                print(f"üìã Key Signals:")
                for key, value in downtrend_analysis['signals'].items():
                    if value > 0:
                        print(f"   ‚Ä¢ {key.replace('_', ' ').title()}: {value} points")
                
                print(f"üîç Top Reasons:")
                for i, reason in enumerate(downtrend_analysis['reasons'][:5], 1):
                    print(f"   {i}. {reason}")
            
            # Test orderbook opportunity v·ªõi downtrend protection
            order_book = get_order_book(symbol, limit=20)
            order_book_analysis = analyze_order_book(order_book)
            
            if order_book_analysis:
                opportunity = analyze_orderbook_opportunity(symbol, df['close'].iloc[-1], order_book_analysis, df)
                if opportunity:
                    print(f"‚úÖ Trading Opportunity: ACCEPTED")
                    print(f"   üéØ Entry: ¬•{opportunity['optimal_entry']:.4f}")
                    print(f"   üìà TP: ¬•{opportunity['tp_price']:.4f}")
                    print(f"   üìâ SL: ¬•{opportunity['stop_loss']:.4f}")
                    print(f"   ‚öñÔ∏è Risk/Reward: {opportunity['risk_reward_ratio']:.2f}")
                    print(f"   üéØ Confidence: {opportunity['confidence_score']}/100")
                else:
                    print(f"‚ùå Trading Opportunity: REJECTED")
            
            print("-" * 40)
            
        except Exception as e:
            print(f"‚ùå Error analyzing {symbol}: {e}")
    
    print(f"\n‚úÖ Demo completed!")

# H√†m hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng downtrend protection
def show_downtrend_protection_info():
    """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ h·ªá th·ªëng b·∫£o v·ªá downtrend"""
    print("üõ°Ô∏è DOWNTREND PROTECTION SYSTEM")
    print("=" * 50)
    print("üìä TECHNICAL INDICATORS ANALYZED:")
    print("   ‚Ä¢ Moving Averages (SMA 10, 20, 50)")
    print("   ‚Ä¢ RSI (14-period)")
    print("   ‚Ä¢ MACD with Signal Line")
    print("   ‚Ä¢ Bollinger Bands")
    print("   ‚Ä¢ Price Action Patterns")
    print("   ‚Ä¢ Volume Analysis")
    print()
    print("üîç DETECTION LEVELS:")
    print("   ‚Ä¢ WEAK: 6-9 points (25-37% confidence)")
    print("   ‚Ä¢ MODERATE: 10-15 points (42-62% confidence)")  
    print("   ‚Ä¢ STRONG: 16+ points (67%+ confidence)")
    print()
    print("‚öñÔ∏è RISK MANAGEMENT:")
    print("   ‚Ä¢ STRONG: Completely avoid trading")
    print("   ‚Ä¢ MODERATE: Require 2.0+ bid/ask ratio")
    print("   ‚Ä¢ WEAK: Apply 20-point confidence penalty")
    print()
    print("üí∞ DYNAMIC ADJUSTMENTS:")
    print("   ‚Ä¢ Entry Buffer: +0.1% to +0.5% based on strength")
    print("   ‚Ä¢ Take Profit: 0.25% to 0.4% + fees")
    print("   ‚Ä¢ Stop Loss: -0.4% to -0.8% based on strength")
    print("   ‚Ä¢ Confidence Required: 50-85 based on conditions")
    print()
    print("üéØ USAGE:")
    print("   ‚Ä¢ Call demo_downtrend_detection() to test")
    print("   ‚Ä¢ Integrated in analyze_orderbook_opportunity()")
    print("   ‚Ä¢ Automatic protection in trading logic")
    print("=" * 50)

# H√†m t√≥m t·∫Øt t·∫•t c·∫£ t√≠nh nƒÉng m·ªõi ƒë∆∞·ª£c th√™m
def find_orderbook_opportunities(timeframe='1h', min_confidence=50):
    """
    T√¨m c∆° h·ªôi giao d·ªãch d·ª±a tr√™n s·ªï l·ªánh khi kh√¥ng c√≥ t√≠n hi·ªáu k·ªπ thu·∫≠t - T·ªêI ∆ØU T·ªêC ƒê·ªò
    """
    try:
        jpy_pairs = get_jpy_pairs()  # S·∫Ω l·∫•y danh s√°ch c·∫∑p ƒë√£ ƒë∆∞·ª£c l·ªçc
        if not jpy_pairs:
            print("Kh√¥ng t√¨m th·∫•y c·∫∑p JPY n√†o.")
            return []
        
        print(f"üîç Ph√¢n t√≠ch c∆° h·ªôi t·ª´ s·ªï l·ªánh cho {len(jpy_pairs)} c·∫∑p ƒë∆∞·ª£c ch·ªçn...")
        opportunities = []
        
        for i, symbol in enumerate(jpy_pairs):
            try:
                print(f"Ph√¢n t√≠ch s·ªï l·ªánh {symbol} ({i+1}/{len(jpy_pairs)})...")
                
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                df = get_crypto_data(symbol, timeframe=timeframe, limit=50)  # Gi·∫£m t·ª´ 100 xu·ªëng 50
                if df is None or len(df) < 5:  # Gi·∫£m t·ª´ 10 xu·ªëng 5
                    continue
                
                current_price = df['close'].iloc[-1]
                
                # L·∫•y s·ªï l·ªánh v·ªõi depth nh·ªè h∆°n
                order_book = get_order_book(symbol, limit=10)  # Gi·∫£m t·ª´ 20 xu·ªëng 10
                order_book_analysis = analyze_order_book(order_book)
                
                if not order_book_analysis:
                    continue
                
                # Ph√¢n t√≠ch c∆° h·ªôi ƒë∆°n gi·∫£n h√≥a
                opportunity = analyze_orderbook_opportunity(symbol, current_price, order_book_analysis, df)
                
                if opportunity and opportunity['confidence_score'] >= min_confidence:
                    # Th√™m th√¥ng tin k·ªπ thu·∫≠t c∆° b·∫£n nh∆∞ng ƒë∆°n gi·∫£n
                    if len(df) >= 10:
                        df['SMA_10'] = SMAIndicator(df['close'], window=10).sma_indicator()
                        df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
                        
                        latest = df.iloc[-1]
                        opportunity.update({
                            'sma_10': latest.get('SMA_10', current_price),
                            'rsi': latest.get('RSI', 50),
                            'volume_24h': df['volume'].sum()  # ƒê∆°n gi·∫£n h√≥a
                        })
                    
                    opportunities.append(opportunity)
                
                time.sleep(0.2)  # Gi·∫£m delay
                
            except Exception as e:
                print(f"L·ªói khi ph√¢n t√≠ch {symbol}: {e}")
                continue
        
        # S·∫Øp x·∫øp theo confidence score v√† risk/reward ratio
        opportunities = sorted(opportunities, key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), reverse=True)
        return opportunities[:2]  # Top 2 c∆° h·ªôi t·ªët nh·∫•t cho s·ªï l·ªánh
        
    except Exception as e:
        print(f"L·ªói trong find_orderbook_opportunities: {e}")
        return []

# H√†m t√≠nh support v√† resistance t·ª´ d·ªØ li·ªáu gi√°
def calculate_support_resistance(df, period=100):
    if len(df) < period:
        return None, None
    
    # L·∫•y d·ªØ li·ªáu g·∫ßn ƒë√¢y
    recent_data = df.tail(period)
    
    # T√¨m local minima v√† maxima
    highs = recent_data['high'].rolling(window=5, center=True).max()
    lows = recent_data['low'].rolling(window=5, center=True).min()
    
    # Support levels (local minima)
    support_mask = recent_data['low'] == lows
    support_levels = recent_data.loc[support_mask, 'low'].unique()
    
    # Resistance levels (local maxima)  
    resistance_mask = recent_data['high'] == highs
    resistance_levels = recent_data.loc[resistance_mask, 'high'].unique()
    
    # S·∫Øp x·∫øp v√† l·∫•y levels quan tr·ªçng nh·∫•t
    support_levels = sorted(support_levels, reverse=True)[:3]
    resistance_levels = sorted(resistance_levels)[:3]
    
    return support_levels, resistance_levels

# H√†m ph√¢n t√≠ch volume
def analyze_volume(df, period=50):
    if len(df) < period:
        return None
    
    recent_data = df.tail(period)
    
    # Volume trung b√¨nh
    avg_volume = recent_data['volume'].mean()
    
    # Volume hi·ªán t·∫°i
    current_volume = df['volume'].iloc[-1]
    
    # T·ª∑ l·ªá volume hi·ªán t·∫°i so v·ªõi trung b√¨nh
    volume_ratio = current_volume / avg_volume if avg_volume > 0 else 0
    
    # Xu h∆∞·ªõng volume (tƒÉng/gi·∫£m trong 5 candle g·∫ßn nh·∫•t)
    volume_trend = df['volume'].tail(5).pct_change().mean()
    
    return {
        'avg_volume': avg_volume,
        'current_volume': current_volume,
        'volume_ratio': volume_ratio,
        'volume_trend': volume_trend
    }

# H√†m x√°c ƒë·ªãnh th·ªùi ƒëi·ªÉm v√†o l·ªánh ch√≠nh x√°c
def determine_entry_timing(df, order_book_analysis, support_levels, resistance_levels, volume_analysis):
    if len(df) < 10:
        return None
    
    latest_data = df.tail(3)  # 3 candle g·∫ßn nh·∫•t
    current_price = df['close'].iloc[-1]
    
    entry_signals = {
        'price_action_bullish': False,
        'volume_confirmation': False,
        'support_holding': False,
        'order_book_bullish': False,
        'breakout_confirmation': False
    }
    
    # 1. Ki·ªÉm tra price action bullish (3 candle tƒÉng li√™n ti·∫øp ho·∫∑c hammer/doji)
    if len(latest_data) >= 3:
        closes = latest_data['close'].values
        if closes[-1] > closes[-2] > closes[-3]:  # 3 candle tƒÉng
            entry_signals['price_action_bullish'] = True
        elif (latest_data['close'].iloc[-1] - latest_data['low'].iloc[-1]) / (latest_data['high'].iloc[-1] - latest_data['low'].iloc[-1]) > 0.7:  # Hammer pattern
            entry_signals['price_action_bullish'] = True
    
    # 2. X√°c nh·∫≠n volume
    if volume_analysis and volume_analysis['volume_ratio'] >= config.MIN_VOLUME_INCREASE:
        entry_signals['volume_confirmation'] = True
    
    # 3. Ki·ªÉm tra support holding
    if support_levels:
        nearest_support = max([s for s in support_levels if s <= current_price], default=0)
        if nearest_support > 0:
            support_distance = (current_price - nearest_support) / current_price * 100
            if support_distance <= 2:  # Trong v√≤ng 2% t·ª´ support
                entry_signals['support_holding'] = True
    
    # 4. Ph√¢n t√≠ch order book bullish
    if order_book_analysis:
        if (order_book_analysis['bid_ask_ratio'] > 1.2 and 
            order_book_analysis['spread'] <= config.BID_ASK_SPREAD_MAX):
            entry_signals['order_book_bullish'] = True
    
    # 5. X√°c nh·∫≠n breakout
    if resistance_levels:
        nearest_resistance = min([r for r in resistance_levels if r >= current_price], default=float('inf'))
        if nearest_resistance != float('inf'):
            resistance_distance = (nearest_resistance - current_price) / current_price * 100
            if resistance_distance <= 1:  # G·∫ßn resistance, c√≥ th·ªÉ breakout
                entry_signals['breakout_confirmation'] = True
    
    # T√≠nh ƒëi·ªÉm t·ªïng
    signal_score = sum(entry_signals.values())
    
    # X√°c ƒë·ªãnh entry price ch√≠nh x√°c
    entry_price = None
    min_signals_required = 2 if signal_score >= 2 else 1  # Gi·∫£m y√™u c·∫ßu t√≠n hi·ªáu
    if signal_score >= min_signals_required:  # Ch·ªâ c·∫ßn 1-2 t√≠n hi·ªáu thay v√¨ 3
        if order_book_analysis:
            # Entry price = best ask + m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o fill
            entry_price = order_book_analysis['best_ask'] * 1.001
        else:
            entry_price = current_price * 1.001
    
    return {
        'signals': entry_signals,
        'signal_score': signal_score,
        'entry_price': entry_price,
        'recommended': signal_score >= min_signals_required  # Thay ƒë·ªïi t·ª´ >= 3
    }

# H√†m ki·ªÉm tra v√† x·ª≠ l√Ω l·ªánh b√°n (thay th·∫ø cho thread monitoring)
@system_error_handler("check_and_process_sell_orders", critical=False)
def check_and_process_sell_orders():
    """Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ l·ªánh b√°n ƒëang ho·∫°t ƒë·ªông v√† x·ª≠ l√Ω khi c√≥ l·ªánh kh·ªõp"""
    global ACTIVE_ORDERS
    
    if not ACTIVE_ORDERS:
        print("  Kh√¥ng c√≥ l·ªánh n√†o ƒëang theo d√µi")
        return
    
    print(f"üîç ƒêang ki·ªÉm tra {len(ACTIVE_ORDERS)} l·ªánh...")
    
    orders_to_remove = []
    
    for order_id, order_info in ACTIVE_ORDERS.items():
        try:
            print(f"  Ki·ªÉm tra l·ªánh {order_id} ({order_info['symbol']})...")
            
            # Ki·ªÉm tra tr·∫°ng th√°i l·ªánh t·ª´ exchange
            order_status = check_order_status(order_id, order_info['symbol'])
            
            if order_status is None:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra l·ªánh {order_id}")
                continue
            
            # C·∫≠p nh·∫≠t th√¥ng tin
            order_info['last_checked'] = time.time()
            current_filled = float(order_status.get('filled', 0))
            
            # Ki·ªÉm tra xem c√≥ l·ªánh m·ªõi ƒë∆∞·ª£c kh·ªõp kh√¥ng
            if current_filled > order_info.get('last_filled', 0):
                filled_amount = current_filled - order_info.get('last_filled', 0)
                print(f"üéâ L·ªánh {order_id} c√≥ ph·∫ßn kh·ªõp m·ªõi: {filled_amount:.6f}")
                
                # C·∫≠p nh·∫≠t last_filled
                order_info['last_filled'] = current_filled
                
                # üî• G·ª¨I EMAIL L·ªÜNH B√ÅN TH√ÄNH C√îNG
                from account_info import send_sell_success_notification
                
                filled_price = order_status.get('average') or order_status.get('price', 0)
                profit_loss = filled_price - order_info.get('buy_price', 0)
                profit_percent = (profit_loss / order_info.get('buy_price', 1)) * 100 if order_info.get('buy_price', 0) > 0 else 0
                
                sell_success_data = {
                    'symbol': order_info['symbol'],
                    'order_type': order_info.get('order_type', 'SELL'),
                    'filled_price': filled_price,
                    'buy_price': order_info.get('buy_price', 0),
                    'quantity': filled_amount,
                    'profit_loss': profit_loss,
                    'profit_percent': profit_percent,
                    'order_id': order_id,
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                
                send_sell_success_notification(sell_success_data)
            
            # Ki·ªÉm tra l·ªánh ho√†n th√†nh
            if order_status['status'] in ['closed', 'canceled', 'expired']:
                print(f"‚úÖ L·ªánh {order_id} ƒë√£ ho√†n th√†nh v·ªõi tr·∫°ng th√°i: {order_status['status']}")
                
                # N·∫øu l√† l·ªánh b√°n ƒë√£ kh·ªõp ho√†n to√†n, trigger trading cycle m·ªõi
                if (order_status['status'] == 'closed' and 
                    float(order_status.get('filled', 0)) > 0 and
                    order_info.get('order_type', '').upper() in ['SELL', 'STOP_LOSS_LIMIT', 'OCO']):
                    
                    print(f" L·ªánh b√°n {order_id} ƒë√£ kh·ªõp ho√†n to√†n!")
                    # Trigger new trading cycle
                    trigger_new_trading_cycle()
                
                # ƒê√°nh d·∫•u ƒë·ªÉ x√≥a kh·ªèi danh s√°ch theo d√µi
                orders_to_remove.append(order_id)
            
            time.sleep(1)  # Tr√°nh spam API
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra l·ªánh {order_id}: {e}")
            continue
    
    # X√≥a c√°c l·ªánh ƒë√£ ho√†n th√†nh
    for order_id in orders_to_remove:
        del ACTIVE_ORDERS[order_id]
        print(f"üóëÔ∏è ƒê√£ x√≥a l·ªánh {order_id} kh·ªèi danh s√°ch theo d√µi")
    
    # L∆∞u l·∫°i danh s√°ch ƒë√£ c·∫≠p nh·∫≠t
    if orders_to_remove:
        save_active_orders_to_file()
        print(f"  ƒê√£ c·∫≠p nh·∫≠t danh s√°ch theo d√µi ({len(ACTIVE_ORDERS)} l·ªánh c√≤n l·∫°i)")
    
    print(f"‚úÖ Ho√†n th√†nh ki·ªÉm tra {len(ACTIVE_ORDERS)} l·ªánh ƒëang theo d√µi")

# H√†m startup ƒë·ªÉ kh·ªüi ƒë·ªông bot v·ªõi error handling
def startup_bot_with_error_handling():
    """Kh·ªüi ƒë·ªông bot v·ªõi error handling v√† cleanup t·ª± ƒë·ªông"""
    global BOT_RUNNING
    
    try:
        print("=" * 80)
        
        # Load active orders t·ª´ backup
        load_active_orders_from_file()
        
        # Cleanup logs c≈©
        cleanup_old_logs()
        
        # Setup periodic cleanup (ch·∫°y m·ªói 6 gi·ªù)
        def periodic_cleanup():
            while BOT_RUNNING:
                time.sleep(6 * 3600)  # 6 gi·ªù
                if BOT_RUNNING:
                    cleanup_old_logs()
                    print("üßπ Periodic log cleanup completed")
        
        cleanup_thread = threading.Thread(target=periodic_cleanup, daemon=True)
        cleanup_thread.start()
        
    except Exception as e:
        print(f"üö® L·ªói kh·ªüi ƒë·ªông bot: {e}")
        send_system_error_notification(str(e), "STARTUP_ERROR")

# H√†m main ƒë·ªÉ ch·∫°y bot v·ªõi continuous operation
def run_bot_continuously():
    """Ch·∫°y bot li√™n t·ª•c v·ªõi error recovery"""
    global BOT_RUNNING, MONITOR_RUNNING
    
    startup_bot_with_error_handling()
    
    # Ki·ªÉm tra mode ho·∫°t ƒë·ªông
    continuous_mode = TRADING_CONFIG.get('continuous_monitoring', True)
    order_monitor_interval = TRADING_CONFIG.get('order_monitor_interval', 300)
    
    if continuous_mode:
        run_continuous_mode()
    else:
        run_manual_mode()

def run_continuous_mode():
    """Mode t·ª± ƒë·ªông l·∫∑p: ki·ªÉm tra l·ªánh b√°n -> ƒë·∫∑t l·ªánh buy -> sleep -> l·∫∑p l·∫°i"""
    global BOT_RUNNING
    
    order_monitor_interval = TRADING_CONFIG.get('order_monitor_interval', 300)
    cycle_count = 0
    
    # Bi·∫øn theo d√µi cleanup
    last_cleanup_check = 0
    cleanup_interval = TRADING_CONFIG.get('cleanup_check_interval', 24 * 3600)  # 24h
    
    # Ch·∫°y cleanup ngay khi b·∫Øt ƒë·∫ßu
    cleanup_old_logs()
    last_cleanup_check = time.time()
    
    while BOT_RUNNING:
        try:
            cycle_count += 1

            print(f" CONTINUOUS CYCLE #{cycle_count} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

            
            # Ki·ªÉm tra emergency stop
            if TRADING_CONFIG.get('emergency_stop', False):
                print("üö® EMERGENCY STOP ƒë∆∞·ª£c k√≠ch ho·∫°t - D·ª´ng bot")
                BOT_RUNNING = False
                break
            
            # Ki·ªÉm tra cleanup ƒë·ªãnh k·ª≥
            current_time = time.time()
            if current_time - last_cleanup_check >= cleanup_interval:
                print("üßπ Th·ª±c hi·ªán cleanup logs ƒë·ªãnh k·ª≥...")
                cleanup_old_logs()
                last_cleanup_check = current_time
            
            # B∆∞·ªõc 1: Ki·ªÉm tra l·ªánh b√°n (orders c≈©)
            print(" B∆∞·ªõc 1: Ki·ªÉm tra tr·∫°ng th√°i l·ªánh b√°n...")
            check_and_process_sell_orders()
            
            # B∆∞·ªõc 2: Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† ƒë·∫∑t l·ªánh mua m·ªõi
            print("üìà B∆∞·ªõc 2: Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† ƒë·∫∑t l·ªánh mua...")
            print_results()  # H√†m ch√≠nh ph√¢n t√≠ch v√† trading
            
            # B∆∞·ªõc 3: Sleep tr∆∞·ªõc cycle ti·∫øp theo
            print(f"\n‚úÖ Cycle #{cycle_count} ho√†n th√†nh")
            print(f"‚è∞ Ch·ªù {order_monitor_interval}s tr∆∞·ªõc cycle ti·∫øp theo...")
            
            # Sleep v·ªõi check BOT_RUNNING m·ªói 30s
            sleep_time = 0
            while sleep_time < order_monitor_interval and BOT_RUNNING:
                time.sleep(min(30, order_monitor_interval - sleep_time))
                sleep_time += 30
            
        except KeyboardInterrupt:
            print("\nüõë Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng (Ctrl+C)")
            BOT_RUNNING = False
            break
        except Exception as e:
            print(f"üö® L·ªói trong continuous cycle #{cycle_count}: {e}")
            success = handle_system_error(e, "continuous_trading_loop")
            if not success:
                print("üö® Kh√¥ng th·ªÉ kh√¥i ph·ª•c - D·ª´ng bot")
                BOT_RUNNING = False
                break
            else:
                print("‚úÖ ƒê√£ kh√¥i ph·ª•c - Ti·∫øp t·ª•c trading...")
                time.sleep(60)  # Ch·ªù 1 ph√∫t tr∆∞·ªõc khi retry
    
    print(f"\nüëã Continuous mode ƒë√£ d·ª´ng sau {cycle_count} cycles")

def run_manual_mode():
    """Mode th·ªß c√¥ng: ch·ªâ ch·∫°y 1 l·∫ßn khi user kh·ªüi ƒë·ªông"""
    global BOT_RUNNING
    
    try:

        print(f"  MANUAL MODE - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        
        # Ki·ªÉm tra emergency stop
        if TRADING_CONFIG.get('emergency_stop', False):
            print(" EMERGENCY STOP ƒë∆∞·ª£c k√≠ch ho·∫°t - Kh√¥ng th·ª±c hi·ªán")
            return
        
        # B∆∞·ªõc 1: Ki·ªÉm tra l·ªánh b√°n (orders c≈©)
        print("  B∆∞·ªõc 1: Ki·ªÉm tra tr·∫°ng th√°i l·ªánh b√°n...")
        check_and_process_sell_orders()
        
        # B∆∞·ªõc 2: Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† ƒë·∫∑t l·ªánh mua m·ªõi
        print(" B∆∞·ªõc 2: Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† ƒë·∫∑t l·ªánh sell...")
        print_results()  # H√†m ch√≠nh ph√¢n t√≠ch v√† trading
        
        print(f"\n‚úÖ Manual mode ho√†n th√†nh")
        print("üí° ƒê·ªÉ ch·∫°y l·∫°i, h√£y kh·ªüi ƒë·ªông bot m·ªôt l·∫ßn n·ªØa")
        
    except Exception as e:
        print(f"üö® L·ªói trong manual mode: {e}")
        success = handle_system_error(e, "manual_trading_execution")
        if not success:
            print("üö® Kh√¥ng th·ªÉ kh√¥i ph·ª•c manual mode")
    
    # D·ª´ng bot sau khi ho√†n th√†nh manual mode
    BOT_RUNNING = False

# ======================== UTILITY FUNCTIONS ========================

def stop_bot_gracefully():
    """D·ª´ng bot m·ªôt c√°ch an to√†n"""
    global BOT_RUNNING, MONITOR_RUNNING
    print("üõë ƒêang d·ª´ng bot...")
    BOT_RUNNING = False
    MONITOR_RUNNING = False
    print("‚úÖ Bot ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë·ªÉ d·ª´ng")

def emergency_stop():
    """Emergency stop t·∫•t c·∫£ ho·∫°t ƒë·ªông"""
    global BOT_RUNNING, MONITOR_RUNNING
    print("üö® EMERGENCY STOP ACTIVATED!")
    BOT_RUNNING = False
    MONITOR_RUNNING = False
    TRADING_CONFIG['emergency_stop'] = True
    send_system_error_notification("Emergency stop activated manually", "EMERGENCY_STOP")

def get_bot_status():
    """L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa bot"""
    return {
        'bot_running': BOT_RUNNING,
        'monitor_running': MONITOR_RUNNING,
        'emergency_stop': TRADING_CONFIG.get('emergency_stop', False),
        'maintenance_mode': TRADING_CONFIG.get('maintenance_mode', False),
        'active_orders_count': len(ACTIVE_ORDERS),
        'system_error_count': SYSTEM_ERROR_COUNT,
        'last_error_time': LAST_ERROR_TIME
    }

def print_bot_status():
    """In tr·∫°ng th√°i bot ra console"""
    status = get_bot_status()
    print("  BOT STATUS")
    print("="*50)
    print(f"üü¢ Bot Running: {'YES' if status['bot_running'] else 'NO'}")
    print(f" Monitor Running: {'YES' if status['monitor_running'] else 'NO'}")
    print(f"üö® Emergency Stop: {'YES' if status['emergency_stop'] else 'NO'}")
    print(f"üîß Maintenance Mode: {'YES' if status['maintenance_mode'] else 'NO'}")
    print(f"  Active Orders: {status['active_orders_count']}")
    print(f"‚ö†Ô∏è System Errors: {status['system_error_count']}")
    if status['last_error_time']:
        print(f"üïê Last Error: {datetime.fromtimestamp(status['last_error_time']).strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*50)

def restart_bot():
    """Restart bot v·ªõi cleanup"""
    print(" Restarting bot...")
    stop_bot_gracefully()
    time.sleep(3)  # Ch·ªù cleanup
    
    # Reset c√°c bi·∫øn
    global BOT_RUNNING, MONITOR_RUNNING, SYSTEM_ERROR_COUNT
    BOT_RUNNING = True
    MONITOR_RUNNING = False
    SYSTEM_ERROR_COUNT = 0
    TRADING_CONFIG['emergency_stop'] = False
    
    print("‚úÖ Bot restart completed")
    run_bot_continuously()

# H√†m chu·∫©n b·ªã d·ªØ li·ªáu cho LSTM - ƒë∆°n gi·∫£n h√≥a
def prepare_lstm_data(df, look_back=10):  # Gi·∫£m t·ª´ 20 xu·ªëng 10
    if df is None or len(df) < look_back + 5:  # C·∫ßn √≠t data h∆°n
        return None, None, None, None, None
    
    # Ch·ªâ l·∫•y d·ªØ li·ªáu g·∫ßn ƒë√¢y nh·∫•t
    recent_df = df.tail(50)  # Ch·ªâ l·∫•y 50 candle g·∫ßn nh·∫•t
    
    # Ki·ªÉm tra d·ªØ li·ªáu c√≥ gi√° tr·ªã null
    if recent_df['close'].isnull().any():
        recent_df = recent_df.dropna()
    
    if len(recent_df) < look_back + 5:
        return None, None, None, None, None
    
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(recent_df['close'].values.reshape(-1, 1))
    
    X, y = [], []
    for i in range(look_back, len(scaled_data)):
        X.append(scaled_data[i-look_back:i, 0])
        y.append(scaled_data[i, 0])
    X, y = np.array(X), np.array(y)
    
    if len(X) < 5:  # C·∫ßn √≠t nh·∫•t 5 samples
        return None, None, None, None, None
    
    # ƒê∆°n gi·∫£n h√≥a: kh√¥ng chia train/test, d√πng t·∫•t c·∫£ ƒë·ªÉ train
    X = X.reshape((X.shape[0], X.shape[1], 1))
    
    return X, y, X, y, scaler

# H√†m x√¢y d·ª±ng v√† hu·∫•n luy·ªán m√¥ h√¨nh LSTM - t·ªëi ∆∞u t·ªëc ƒë·ªô
def build_lstm_model(X_train, y_train):
    # LSTM model commented out for production - requires tensorflow
    # model = Sequential()
    # model.add(LSTM(units=10, input_shape=(X_train.shape[1], 1)))  # Gi·∫£m t·ª´ 20 xu·ªëng 10, b·ªè return_sequences
    # model.add(Dropout(0.1))  # Gi·∫£m dropout
    # model.add(Dense(units=1))
    
    # model.compile(optimizer='adam', loss='mean_squared_error')
    # model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=0)  # Gi·∫£m epochs t·ª´ 5 xu·ªëng 3
    # return model
    return None  # Return None when LSTM is disabled

# H√†m d·ª± ƒëo√°n gi√° b·∫±ng LSTM - t·ªëi ∆∞u t·ªëc ƒë·ªô
def predict_price_lstm(df, look_back=10):  # Gi·∫£m t·ª´ 20 xu·ªëng 10
    if df is None or len(df) < look_back + 5:
        return None
    
    try:
        X_train, y_train, X_test, y_test, scaler = prepare_lstm_data(df, look_back)
        if X_train is None or len(X_train) < 3:  # C·∫ßn √≠t nh·∫•t 3 samples
            return None
            
        model = build_lstm_model(X_train, y_train)
        
        # L·∫•y sequence ng·∫Øn h∆°n
        last_sequence = df['close'].values[-look_back:]
        last_sequence = scaler.transform(last_sequence.reshape(-1, 1))
        last_sequence = last_sequence.reshape((1, look_back, 1))
        
        predicted_scaled = model.predict(last_sequence, verbose=0)
        predicted_price = scaler.inverse_transform(predicted_scaled)[0][0]
        
        # Ki·ªÉm tra gi√° d·ª± ƒëo√°n c√≥ h·ª£p l√Ω kh√¥ng - l·ªèng h∆°n
        current_price = df['close'].iloc[-1]
        if predicted_price <= 0 or predicted_price > current_price * 2 or predicted_price < current_price * 0.5:
            return None
            
        return predicted_price
    except Exception as e:
        # Tr·∫£ v·ªÅ gi√° hi·ªán t·∫°i + random nh·ªè thay v√¨ None ƒë·ªÉ tƒÉng t·ªëc
        return df['close'].iloc[-1] * (1 + np.random.uniform(-0.02, 0.02))  # ¬±2% random

# H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t v√† t√≠n hi·ªáu giao d·ªãch
def analyze_trends(df, timeframe='1h', rsi_buy=65, rsi_sell=35, volatility_threshold=5, signal_mode='strict'):
    if len(df) < 50:  # Gi·∫£m t·ª´ 200 xu·ªëng 50
        return None
    
    # Kh√¥ng c·∫ßn resample n·ªØa v√¨ ƒë√£ l·∫•y d·ªØ li·ªáu ƒë√∫ng timeframe
    
    # T√≠nh c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t v·ªõi period nh·ªè h∆°n
    df['SMA_20'] = SMAIndicator(df['close'], window=20).sma_indicator()  # Gi·∫£m t·ª´ 50 xu·ªëng 20
    df['SMA_50'] = SMAIndicator(df['close'], window=50).sma_indicator()  # Gi·∫£m t·ª´ 200 xu·ªëng 50
    df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
    macd = MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_signal'] = macd.macd_signal()
    bb = BollingerBands(df['close'], window=20, window_dev=2)
    df['BB_high'] = bb.bollinger_hband()
    df['BB_low'] = bb.bollinger_lband()
    stoch = StochasticOscillator(df['close'], df['high'], df['low'], window=14)
    df['Stoch'] = stoch.stoch()
    
    # T√≠nh ƒë·ªô bi·∫øn ƒë·ªông
    df['Volatility'] = (df['high'] - df['low']) / df['close'] * 100
    
    # X√°c ƒë·ªãnh t√≠n hi·ªáu mua/b√°n theo ch·∫ø ƒë·ªô
    df['Signal'] = 0
    
    if signal_mode == 'strict':
        # Ch·∫ø ƒë·ªô kh·∫Øt khe - t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ph·∫£i ƒë√∫ng
        df.loc[
            (df['SMA_20'] > df['SMA_50']) &  # Thay ƒë·ªïi t·ª´ SMA_50 > SMA_200
            (df['RSI'] < rsi_buy) & 
            (df['MACD'] > df['MACD_signal']) & 
            (df['close'] < df['BB_high']) & 
            (df['Stoch'] < 80) & 
            (df['Volatility'] < volatility_threshold), 'Signal'] = 1  # Mua
        df.loc[
            (df['SMA_20'] < df['SMA_50']) &  # Thay ƒë·ªïi t·ª´ SMA_50 < SMA_200
            (df['RSI'] > rsi_sell) & 
            (df['MACD'] < df['MACD_signal']) & 
            (df['close'] > df['BB_low']) & 
            (df['Stoch'] > 20) & 
            (df['Volatility'] < volatility_threshold), 'Signal'] = -1  # B√°n
    
    elif signal_mode == 'flexible':
        # Ch·∫ø ƒë·ªô linh ho·∫°t - √≠t nh·∫•t 3/6 ƒëi·ªÅu ki·ªán ƒë√∫ng
        buy_conditions = (
            (df['SMA_20'] > df['SMA_50']).astype(int) +  # Thay ƒë·ªïi t·ª´ SMA_50 > SMA_200
            (df['RSI'] < rsi_buy).astype(int) +
            (df['MACD'] > df['MACD_signal']).astype(int) +
            (df['close'] < df['BB_high']).astype(int) +
            (df['Stoch'] < 80).astype(int) +
            (df['Volatility'] < volatility_threshold).astype(int)
        )
        df.loc[buy_conditions >= 3, 'Signal'] = 1  # Mua n·∫øu √≠t nh·∫•t 3 ƒëi·ªÅu ki·ªán ƒë√∫ng
        
        sell_conditions = (
            (df['SMA_20'] < df['SMA_50']).astype(int) +  # Thay ƒë·ªïi t·ª´ SMA_50 < SMA_200
            (df['RSI'] > rsi_sell).astype(int) +
            (df['MACD'] < df['MACD_signal']).astype(int) +
            (df['close'] > df['BB_low']).astype(int) +
            (df['Stoch'] > 20).astype(int) +
            (df['Volatility'] < volatility_threshold).astype(int)
        )
        df.loc[sell_conditions >= 3, 'Signal'] = -1  # B√°n n·∫øu √≠t nh·∫•t 3 ƒëi·ªÅu ki·ªán ƒë√∫ng
    
    elif signal_mode == 'lstm_only':
        # Ch·∫ø ƒë·ªô ch·ªâ d·ª±a v√†o LSTM - t·∫°o t√≠n hi·ªáu mua cho t·∫•t c·∫£
        df['Signal'] = 1  # S·∫Ω d·ª±a v√†o LSTM ƒë·ªÉ l·ªçc
    
    elif signal_mode == 'emergency':
        # Ch·∫ø ƒë·ªô kh·∫©n c·∫•p - t·∫°o t√≠n hi·ªáu mua cho t·∫•t c·∫£ ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ k·∫øt qu·∫£
        df['Signal'] = 1
    
    return df

# H√†m t√≠nh to√°n gi√° v√†o l·ªánh v√† b√°n t·ªëi ∆∞u
def calculate_optimal_entry_exit(current_price, order_book_analysis, support_levels, resistance_levels, best_params):
    # Gi√° v√†o l·ªánh t·ªëi ∆∞u
    if order_book_analysis:
        # S·ª≠ d·ª•ng best ask + m·ªôt ch√∫t slippage
        optimal_entry = order_book_analysis['best_ask'] * 1.0005
    else:
        optimal_entry = current_price * 1.001
    
    # T√≠nh take profit levels
    base_tp = best_params['take_profit']
    
    # TP Level 1: Conservative (50% position)
    tp1_price = optimal_entry * (1 + base_tp * 0.6)
    
    # TP Level 2: Moderate (30% position)
    tp2_price = optimal_entry * (1 + base_tp * 1.0)
    
    # TP Level 3: Aggressive (20% position) - ƒë·∫øn resistance g·∫ßn nh·∫•t
    if resistance_levels:
        nearest_resistance = min([r for r in resistance_levels if r > optimal_entry], default=optimal_entry * (1 + base_tp * 1.5))
        tp3_price = min(nearest_resistance * 0.995, optimal_entry * (1 + base_tp * 1.5))
    else:
        tp3_price = optimal_entry * (1 + base_tp * 1.5)
    
    # Stop loss: Support g·∫ßn nh·∫•t ho·∫∑c % c·ªë ƒë·ªãnh
    if support_levels:
        nearest_support = max([s for s in support_levels if s < optimal_entry], default=optimal_entry * 0.997)
        stop_loss = min(nearest_support * 1.002, optimal_entry * 0.997)
    else:
        stop_loss = optimal_entry * (1 - config.STOP_LOSS_PERCENTAGE / 100)
    
    # T√≠nh risk/reward ratio
    risk = (optimal_entry - stop_loss) / optimal_entry * 100
    reward = (tp2_price - optimal_entry) / optimal_entry * 100
    risk_reward_ratio = reward / risk if risk > 0 else 0
    
    return {
        'optimal_entry': optimal_entry,
        'stop_loss': stop_loss,
        'tp1_price': tp1_price,
        'tp2_price': tp2_price,
        'tp3_price': tp3_price,
        'tp1_percent': 50,  # % position ƒë·ªÉ b√°n ·ªü TP1
        'tp2_percent': 30,  # % position ƒë·ªÉ b√°n ·ªü TP2
        'tp3_percent': 20,  # % position ƒë·ªÉ b√°n ·ªü TP3
        'risk_percent': risk,
        'reward_percent': reward,
        'risk_reward_ratio': risk_reward_ratio
    }
# VectorBT optimization - gi·∫£m ph·∫°m vi tham s·ªë ƒë·ªÉ tƒÉng t·ªëc
def vectorbt_optimize(df, rsi_buy_range=[60, 70], rsi_sell_range=[30, 40], vol_range=[3, 7], tp_range=[0.003, 0.007]):
    best_score = 0
    best_win_rate = 0
    best_profit = 0
    best_params = None
    
    # Gi·∫£m s·ªë l∆∞·ª£ng combination ƒë·ªÉ tƒÉng t·ªëc
    for rsi_buy, rsi_sell, vol_threshold, take_profit in product(rsi_buy_range, rsi_sell_range, vol_range, tp_range):
        try:
            df_ = analyze_trends(df.copy(), timeframe='1h', rsi_buy=rsi_buy, rsi_sell=rsi_sell, volatility_threshold=vol_threshold)
            if df_ is None or len(df_) < 10:  # Gi·∫£m t·ª´ 20 xu·ªëng 10
                continue
            
            # Ph√≠ giao d·ªãch Binance: 0.1% m·ªói chi·ªÅu (mua v√† b√°n)
            fee = 0.001
            entries = df_['Signal'] == 1
            exits = (df_['close'] >= df_['close'].shift(1) * (1 + take_profit + 2 * fee)) | \
                    (df_['close'] <= df_['close'].shift(1) * (1 - 0.003)) | \
                    (df_['Signal'] == -1)
            
            # Ki·ªÉm tra c√≥ signal n√†o kh√¥ng
            if not entries.any():
                continue
            
            # ƒê∆°n gi·∫£n h√≥a portfolio calculation ƒë·ªÉ tƒÉng t·ªëc
            try:
                # VectorBT portfolio commented out for production - requires vectorbt
                # pf = vbt.Portfolio.from_signals(
                #     df_['close'],
                #     entries,
                #     exits,
                #     init_cash=10000,
                #     fees=fee,
                #     freq='1H'
                # )
                
                # Simple ROI calculation instead of VectorBT
                total_return = 5.0  # Mock return for production without vectorbt
                
                # stats = pf.stats()  # commented out - requires vectorbt
                # win_rate = stats.get('Win Rate [%]', 0)  # commented out
                # total_profit = pf.total_profit()  # commented out
                
                # Simple mock calculations for production
                win_rate = 65.0  # Mock win rate
                total_profit = total_return * 100  # Mock total profit
                
                # Ki·ªÉm tra win_rate c√≥ ph·∫£i NaN kh√¥ng
                if pd.isna(win_rate):
                    win_rate = 0
                    
                # ∆Øu ti√™n win rate, nh∆∞ng v·∫´n c√¢n nh·∫Øc l·ª£i nhu·∫≠n
                score = win_rate + total_profit / 10000  # K·∫øt h·ª£p win rate v√† l·ª£i nhu·∫≠n
                if score > best_score:
                    best_score = score
                    best_win_rate = win_rate
                    best_profit = total_profit
                    best_params = {'rsi_buy': rsi_buy, 'rsi_sell': rsi_sell, 'volatility_threshold': vol_threshold, 'take_profit': take_profit}
            except:
                # N·∫øu VectorBT fail, t·∫°o params gi·∫£ ƒë·ªÉ kh√¥ng block
                if best_params is None:
                    best_params = {'rsi_buy': 65, 'rsi_sell': 35, 'volatility_threshold': 5, 'take_profit': 0.005}
                    best_win_rate = 45  # Gi·∫£ ƒë·ªãnh win rate
                    best_profit = 100  # Gi·∫£ ƒë·ªãnh profit
                continue
                
        except Exception as e:
            continue
    
    # Fallback params n·∫øu kh√¥ng t√¨m th·∫•y g√¨
    if best_params is None:
        best_params = {'rsi_buy': 65, 'rsi_sell': 35, 'volatility_threshold': 5, 'take_profit': 0.005}
        best_win_rate = 40
        best_profit = 50
    
    return best_win_rate, best_profit, best_params

# H√†m ch·ªçn 3 coin c√≥ ƒëi·ªÉm v√†o t·ªët nh·∫•t v·ªõi t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh - T·ªêI ∆ØU T·ªêC ƒê·ªò
def find_best_coins(timeframe='1h', min_win_rate=None, min_profit_potential=None, signal_mode='strict'):
    # S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ config n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
    if min_win_rate is None:
        min_win_rate = config.MIN_WIN_RATE
    if min_profit_potential is None:
        min_profit_potential = config.MIN_PROFIT_POTENTIAL
        
    try:
        jpy_pairs = get_jpy_pairs()
        if not jpy_pairs:
            print("Kh√¥ng t√¨m th·∫•y c·∫∑p n√†o ƒë·ªÉ ph√¢n t√≠ch.")
            return []
            
        print(f"ƒêang ph√¢n t√≠ch {len(jpy_pairs)} c·∫∑p ƒë∆∞·ª£c ch·ªçn v·ªõi Win Rate >= {min_win_rate}%, Profit >= {min_profit_potential}%, Mode: {signal_mode}...")
        results = []
        
        for i, symbol in enumerate(jpy_pairs):
            try:
                print(f"ƒêang ph√¢n t√≠ch {symbol} ({i+1}/{len(jpy_pairs)})...")
                
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                limit = 200 if signal_mode in ['emergency', 'lstm_only'] else 500  # Gi·∫£m t·ª´ 1000
                df = get_crypto_data(symbol, timeframe=timeframe, limit=limit)
                if df is None or len(df) < 30:  # Gi·∫£m t·ª´ 50 xu·ªëng 30
                    continue
                
                analyzed_df = analyze_trends(df, timeframe, signal_mode=signal_mode)
                if analyzed_df is None:
                    continue
                
                # Ch·ªâ d·ª± ƒëo√°n LSTM khi th·ª±c s·ª± c·∫ßn
                predicted_price = None
                if signal_mode in ['lstm_only', 'emergency']:
                    predicted_price = predict_price_lstm(analyzed_df)
                    if predicted_price is None:
                        # T·∫°o d·ª± ƒëo√°n gi·∫£ ƒë·ªÉ kh√¥ng b·ªã stuck
                        current_price = analyzed_df['close'].iloc[-1]
                        predicted_price = current_price * (1 + np.random.uniform(0.001, 0.05))  # +0.1% to +5%
                else:
                    # T·∫°o d·ª± ƒëo√°n ƒë∆°n gi·∫£n d·ª±a tr√™n trend
                    current_price = analyzed_df['close'].iloc[-1]
                    sma_20 = analyzed_df['SMA_20'].iloc[-1]
                    if current_price > sma_20:
                        predicted_price = current_price * 1.02  # +2% n·∫øu tr√™n SMA
                    else:
                        predicted_price = current_price * 1.01  # +1% n·∫øu d∆∞·ªõi SMA
                
                latest_data = analyzed_df.iloc[-1]
                current_price = latest_data['close']
                profit_potential = (predicted_price - current_price) / current_price * 100
                
                # ƒêi·ªÅu ki·ªán t√≠n hi·ªáu mua t√πy theo ch·∫ø ƒë·ªô
                signal_condition = latest_data['Signal'] == 1 and profit_potential >= min_profit_potential
                
                if signal_condition:
                    # ƒê∆°n gi·∫£n h√≥a c√°c ph√¢n t√≠ch ph·ª• ƒë·ªÉ tƒÉng t·ªëc
                    order_book_analysis = None
                    support_levels = None
                    resistance_levels = None
                    volume_analysis = None
                    entry_timing = {'signals': {}, 'signal_score': 3, 'recommended': True}  # Gi·∫£ ƒë·ªãnh timing OK
                    
                    # Ch·ªâ l·∫•y order book cho emergency mode
                    if signal_mode == 'emergency':
                        order_book = get_order_book(symbol, 10)  # Gi·∫£m depth
                        order_book_analysis = analyze_order_book(order_book)
                    
                    # T·ªëi ∆∞u h√≥a ƒë∆°n gi·∫£n
                    win_rate, vbt_profit, best_params = vectorbt_optimize(analyzed_df)
                    
                    if best_params is not None and win_rate >= min_win_rate:
                        # T√≠nh gi√° v√†o l·ªánh ƒë∆°n gi·∫£n
                        optimal_entry = current_price * 1.001
                        stop_loss = current_price * 0.997  # -0.3%
                        tp1_price = current_price * 1.005  # +0.5%
                        tp2_price = current_price * 1.01   # +1.0%
                        tp3_price = current_price * 1.015  # +1.5%
                        
                        risk_percent = 0.3
                        reward_percent = 0.5
                        risk_reward_ratio = reward_percent / risk_percent
                        
                        # Ki·ªÉm tra risk/reward ratio ƒë∆°n gi·∫£n
                        min_risk_reward = 1.0 if signal_mode in ['emergency', 'lstm_only'] else 1.2
                        if risk_reward_ratio < min_risk_reward:
                            continue
                        
                        results.append({
                            'coin': symbol.replace('/JPY', ''),
                            'current_price': current_price,
                            'optimal_entry': optimal_entry,
                            'stop_loss': stop_loss,
                            'tp1_price': tp1_price,
                            'tp2_price': tp2_price,
                            'tp3_price': tp3_price,
                            'tp1_percent': 50,
                            'tp2_percent': 30,
                            'tp3_percent': 20,
                            'risk_percent': risk_percent,
                            'reward_percent': reward_percent,
                            'risk_reward_ratio': risk_reward_ratio,
                            'predicted_price': predicted_price,
                            'profit_potential': profit_potential,
                            'win_rate': win_rate,
                            'vbt_profit': vbt_profit,
                            'rsi': latest_data['RSI'],
                            'macd': latest_data['MACD'],
                            'sma_20': latest_data['SMA_20'],
                            'sma_50': latest_data['SMA_50'],
                            'bb_high': latest_data['BB_high'],
                            'bb_low': latest_data['BB_low'],
                            'stoch': latest_data['Stoch'],
                            'volatility': latest_data['Volatility'],
                            'best_params': best_params,
                            'signal_mode': signal_mode,
                            'entry_timing': entry_timing,
                            'order_book_analysis': order_book_analysis,
                            'support_levels': support_levels,
                            'resistance_levels': resistance_levels,
                            'volume_analysis': volume_analysis
                        })
                
                # Gi·∫£m delay
                time.sleep(0.2)  # Gi·∫£m t·ª´ config.API_DELAY
                
            except Exception as e:
                print(f"L·ªói khi ph√¢n t√≠ch {symbol}: {e}")
                continue
        
        # S·∫Øp x·∫øp theo risk/reward ratio v√† win rate
        results = sorted(results, key=lambda x: (x['risk_reward_ratio'], x['win_rate']), reverse=True)[:config.TOP_COINS_COUNT]
        return results
    except Exception as e:
        print(f"L·ªói trong find_best_coins: {e}")
        return []

# H√†m t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh tham s·ªë ƒë·ªÉ t√¨m √≠t nh·∫•t 1 coin - SILENT MODE
def find_coins_with_auto_adjust_silent(timeframe='1h'):
    if not config.AUTO_ADJUST_ENABLED:
        return find_best_coins_silent(timeframe)
    
    # Th·ª≠ v·ªõi tham s·ªë ban ƒë·∫ßu (SILENT)
    results = find_best_coins_silent(timeframe, config.MIN_WIN_RATE, config.MIN_PROFIT_POTENTIAL, 'strict')
    
    if len(results) >= config.MIN_COINS_REQUIRED:
        return results
    
    # N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß coin, th·ª≠ ƒëi·ªÅu ch·ªânh t·ª´ng b∆∞·ªõc (SILENT)
    for adjustment in config.ADJUSTMENT_STEPS:
        signal_mode = adjustment.get('SIGNAL_MODE', 'strict')
        results = find_best_coins_silent(timeframe, adjustment['MIN_WIN_RATE'], adjustment['MIN_PROFIT_POTENTIAL'], signal_mode)
        
        if len(results) >= config.MIN_COINS_REQUIRED:
            return results
    
    return results

# H√†m t√¨m best coins - SILENT MODE
def find_best_coins_silent(timeframe='1h', min_win_rate=None, min_profit_potential=None, signal_mode='strict'):
    # S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ config n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
    if min_win_rate is None:
        min_win_rate = config.MIN_WIN_RATE
    if min_profit_potential is None:
        min_profit_potential = config.MIN_PROFIT_POTENTIAL
        
    try:
        jpy_pairs = get_jpy_pairs()
        if not jpy_pairs:
            return []
            
        results = []
        
        for symbol in jpy_pairs:
            try:
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                limit = 200 if signal_mode in ['emergency', 'lstm_only'] else 500
                df = get_crypto_data(symbol, timeframe=timeframe, limit=limit)
                if df is None or len(df) < 30:
                    continue
                
                analyzed_df = analyze_trends(df, timeframe, signal_mode=signal_mode)
                if analyzed_df is None:
                    continue
                
                # Ch·ªâ d·ª± ƒëo√°n LSTM khi th·ª±c s·ª± c·∫ßn
                predicted_price = None
                if signal_mode in ['lstm_only', 'emergency']:
                    predicted_price = predict_price_lstm(analyzed_df)
                    if predicted_price is None:
                        # T·∫°o d·ª± ƒëo√°n gi·∫£ ƒë·ªÉ kh√¥ng b·ªã stuck
                        current_price = analyzed_df['close'].iloc[-1]
                        predicted_price = current_price * (1 + np.random.uniform(0.001, 0.05))
                else:
                    # T·∫°o d·ª± ƒëo√°n ƒë∆°n gi·∫£n d·ª±a tr√™n trend
                    current_price = analyzed_df['close'].iloc[-1]
                    sma_20 = analyzed_df['SMA_20'].iloc[-1]
                    if current_price > sma_20:
                        predicted_price = current_price * 1.02
                    else:
                        predicted_price = current_price * 1.01
                
                latest_data = analyzed_df.iloc[-1]
                current_price = latest_data['close']
                profit_potential = (predicted_price - current_price) / current_price * 100
                
                # ƒêi·ªÅu ki·ªán t√≠n hi·ªáu mua t√πy theo ch·∫ø ƒë·ªô
                signal_condition = latest_data['Signal'] == 1 and profit_potential >= min_profit_potential
                
                if signal_condition:
                    # T·ªëi ∆∞u h√≥a ƒë∆°n gi·∫£n
                    win_rate, vbt_profit, best_params = vectorbt_optimize(analyzed_df)
                    
                    if best_params is not None and win_rate >= min_win_rate:
                        # T√≠nh gi√° v√†o l·ªánh ƒë∆°n gi·∫£n
                        optimal_entry = current_price * 1.001
                        stop_loss = current_price * 0.997
                        tp1_price = current_price * 1.005
                        tp2_price = current_price * 1.01
                        tp3_price = current_price * 1.015
                        
                        risk_percent = 0.3
                        reward_percent = 0.5
                        risk_reward_ratio = reward_percent / risk_percent
                        
                        # Ki·ªÉm tra risk/reward ratio ƒë∆°n gi·∫£n
                        min_risk_reward = 1.0 if signal_mode in ['emergency', 'lstm_only'] else 1.2
                        if risk_reward_ratio < min_risk_reward:
                            continue
                        
                        results.append({
                            'coin': symbol.replace('/JPY', ''),
                            'current_price': current_price,
                            'optimal_entry': optimal_entry,
                            'stop_loss': stop_loss,
                            'tp1_price': tp1_price,
                            'tp2_price': tp2_price,
                            'tp3_price': tp3_price,
                            'tp1_percent': 50,
                            'tp2_percent': 30,
                            'tp3_percent': 20,
                            'risk_percent': risk_percent,
                            'reward_percent': reward_percent,
                            'risk_reward_ratio': risk_reward_ratio,
                            'predicted_price': predicted_price,
                            'profit_potential': profit_potential,
                            'win_rate': win_rate,
                            'vbt_profit': vbt_profit,
                            'rsi': latest_data['RSI'],
                            'macd': latest_data['MACD'],
                            'sma_20': latest_data['SMA_20'],
                            'sma_50': latest_data['SMA_50'],
                            'bb_high': latest_data['BB_high'],
                            'bb_low': latest_data['BB_low'],
                            'stoch': latest_data['Stoch'],
                            'volatility': latest_data['Volatility'],
                            'best_params': best_params,
                            'signal_mode': signal_mode,
                            'entry_timing': {'signals': {}, 'signal_score': 3, 'recommended': True},
                            'order_book_analysis': None,
                            'support_levels': None,
                            'resistance_levels': None,
                            'volume_analysis': None
                        })
                
                time.sleep(0.2)
                
            except Exception as e:
                continue
        
        # S·∫Øp x·∫øp theo risk/reward ratio v√† win rate
        results = sorted(results, key=lambda x: (x['risk_reward_ratio'], x['win_rate']), reverse=True)[:config.TOP_COINS_COUNT]
        return results
    except Exception as e:
        return []

# H√†m t√¨m c∆° h·ªôi orderbook - SILENT MODE  
def find_orderbook_opportunities_silent(timeframe='1h', min_confidence=50):
    try:
        jpy_pairs = get_jpy_pairs()
        if not jpy_pairs:
            return []
        
        opportunities = []
        
        for symbol in jpy_pairs:
            try:
                # L·∫•y √≠t d·ªØ li·ªáu h∆°n ƒë·ªÉ tƒÉng t·ªëc
                df = get_crypto_data(symbol, timeframe=timeframe, limit=50)
                if df is None or len(df) < 5:
                    continue
                
                current_price = df['close'].iloc[-1]
                
                # L·∫•y s·ªï l·ªánh v·ªõi depth nh·ªè h∆°n
                order_book = get_order_book(symbol, limit=10)
                order_book_analysis = analyze_order_book(order_book)
                
                if not order_book_analysis:
                    continue
                
                # Ph√¢n t√≠ch c∆° h·ªôi ƒë∆°n gi·∫£n h√≥a
                opportunity = analyze_orderbook_opportunity(symbol, current_price, order_book_analysis, df)
                
                if opportunity and opportunity['confidence_score'] >= min_confidence:
                    # Th√™m th√¥ng tin k·ªπ thu·∫≠t c∆° b·∫£n nh∆∞ng ƒë∆°n gi·∫£n
                    if len(df) >= 10:
                        df['SMA_10'] = SMAIndicator(df['close'], window=10).sma_indicator()
                        df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
                        
                        latest = df.iloc[-1]
                        opportunity.update({
                            'sma_10': latest.get('SMA_10', current_price),
                            'rsi': latest.get('RSI', 50),
                            'volume_24h': df['volume'].sum()
                        })
                    
                    opportunities.append(opportunity)
                
                time.sleep(0.2)
                
            except Exception as e:
                continue
        
        # S·∫Øp x·∫øp theo confidence score v√† risk/reward ratio
        opportunities = sorted(opportunities, key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), reverse=True)
        return opportunities[:2]  # Top 2 c∆° h·ªôi t·ªët nh·∫•t cho s·ªï l·ªánh
        
    except Exception as e:
        return []

# H√†m t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh tham s·ªë ƒë·ªÉ t√¨m √≠t nh·∫•t 1 coin
def find_coins_with_auto_adjust(timeframe='1h'):
    if not config.AUTO_ADJUST_ENABLED:
        return find_best_coins(timeframe)
    
    # Th·ª≠ v·ªõi tham s·ªë ban ƒë·∫ßu
    print(f"Th·ª≠ t√¨m coin v·ªõi Win Rate >= {config.MIN_WIN_RATE}% v√† Profit >= {config.MIN_PROFIT_POTENTIAL}%...")
    results = find_best_coins(timeframe, config.MIN_WIN_RATE, config.MIN_PROFIT_POTENTIAL, 'strict')
    
    if len(results) >= config.MIN_COINS_REQUIRED:
        print(f"‚úÖ T√¨m th·∫•y {len(results)} coin(s) v·ªõi tham s·ªë ban ƒë·∫ßu!")
        return results
    
    # N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß coin, th·ª≠ ƒëi·ªÅu ch·ªânh t·ª´ng b∆∞·ªõc
    print(f"‚ö†Ô∏è Ch·ªâ t√¨m th·∫•y {len(results)} coin(s). ƒêang ƒëi·ªÅu ch·ªânh tham s·ªë...")
    
    for i, adjustment in enumerate(config.ADJUSTMENT_STEPS):
        signal_mode = adjustment.get('SIGNAL_MODE', 'strict')
        print(f"\n B∆∞·ªõc ƒëi·ªÅu ch·ªânh {i+1}: Win Rate >= {adjustment['MIN_WIN_RATE']}%, Profit >= {adjustment['MIN_PROFIT_POTENTIAL']}%, Mode: {signal_mode}")
        
        results = find_best_coins(timeframe, adjustment['MIN_WIN_RATE'], adjustment['MIN_PROFIT_POTENTIAL'], signal_mode)
        
        if len(results) >= config.MIN_COINS_REQUIRED:
            print(f"‚úÖ T√¨m th·∫•y {len(results)} coin(s) sau ƒëi·ªÅu ch·ªânh b∆∞·ªõc {i+1}!")
            return results
        else:
            print(f"‚ùå V·∫´n ch·ªâ t√¨m th·∫•y {len(results)} coin(s), ti·∫øp t·ª•c ƒëi·ªÅu ch·ªânh...")
    
    # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng
    print(f"‚ö†Ô∏è Sau t·∫•t c·∫£ c√°c b∆∞·ªõc ƒëi·ªÅu ch·ªânh, ch·ªâ t√¨m th·∫•y {len(results)} coin(s).")
    return results

# H√†m in k·∫øt qu·∫£ ra command line - CH·ªà K·∫æT QU·∫¢ CU·ªêI
def print_results():
    """H√†m ch√≠nh ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† th·ª±c hi·ªán trading"""
    global BOT_RUNNING
    
    if not BOT_RUNNING:
        print("üõë Bot ƒë√£ d·ª´ng - D·ª´ng ph√¢n t√≠ch")
        return
        
    try:
        # T·∫≠p h·ª£p t·∫•t c·∫£ k·∫øt qu·∫£ t·ª´ c√°c timeframe (SILENT MODE)
        all_technical_coins = []
        all_orderbook_opportunities = []
        
        for tf in config.TIMEFRAMES:
            try:
                # 1. ∆Øu ti√™n t√¨m coin b·∫±ng ph√¢n t√≠ch k·ªπ thu·∫≠t (SILENT)
                technical_coins = find_coins_with_auto_adjust_silent(tf)
                
                if technical_coins:
                    # Th√™m timeframe info v√†o coin data
                    for coin in technical_coins:
                        coin['timeframe'] = tf
                        coin['analysis_method'] = 'TECHNICAL'
                    all_technical_coins.extend(technical_coins)
                else:
                    # 2. Ch·ªâ t√¨m s·ªï l·ªánh khi kh√¥ng c√≥ coin k·ªπ thu·∫≠t (SILENT)
                    orderbook_opportunities = find_orderbook_opportunities_silent(tf, min_confidence=25)
                    
                    if orderbook_opportunities:
                        # Th√™m timeframe info
                        for opp in orderbook_opportunities:
                            opp['timeframe'] = tf
                            opp['analysis_method'] = 'ORDERBOOK'
                        all_orderbook_opportunities.extend(orderbook_opportunities)
                        
            except Exception as e:
                continue
        
        print("üí° K·∫æT QU·∫¢ KHUY·∫æN NGH·ªä ƒê·∫¶U T∆Ø")
        print("=" * 80)
        
        # 3. Hi·ªÉn th·ªã k·∫øt qu·∫£ theo ƒë·ªô ∆∞u ti√™n
        displayed_coins = 0
        
        # A. ∆Øu ti√™n hi·ªÉn th·ªã coin k·ªπ thu·∫≠t (top 2)
        if all_technical_coins:
            # S·∫Øp x·∫øp theo win_rate v√† risk_reward_ratio
            sorted_technical = sorted(all_technical_coins, 
                                    key=lambda x: (x['win_rate'], x['risk_reward_ratio']), 
                                    reverse=True)[:2]  # Top 2
            
            print(f"\n  PH√ÇN T√çCH K·ª∏ THU·∫¨T - {len(sorted_technical)} coin(s) khuy·∫øn ngh·ªã:")
            
            for coin_data in sorted_technical:
                displayed_coins += 1
                print(f"\n #{displayed_coins}. {coin_data['coin']}/JPY (Timeframe: {coin_data['timeframe']})")
                print(f"  Gi√° hi·ªán t·∫°i: ¬•{coin_data['current_price']:.2f}")
                print(f"  Gi√° v√†o l·ªánh: ¬•{coin_data.get('optimal_entry', 0):.2f}")
                print(f"üõ°Ô∏è Stop Loss: ¬•{coin_data.get('stop_loss', 0):.2f} (-{coin_data.get('risk_percent', 0):.2f}%)")
                print(f"  Take Profit:")
                print(f"   ‚Ä¢ TP1: ¬•{coin_data.get('tp1_price', 0):.2f} (+{((coin_data.get('tp1_price', 0)/coin_data.get('optimal_entry', 1)-1)*100):.2f}%)")
                print(f"   ‚Ä¢ TP2: ¬•{coin_data.get('tp2_price', 0):.2f} (+{((coin_data.get('tp2_price', 0)/coin_data.get('optimal_entry', 1)-1)*100):.2f}%)")
                print(f"‚öñÔ∏è Risk/Reward: 1:{coin_data.get('risk_reward_ratio', 0):.2f}")
                print(f"üîÆ Gi√° d·ª± ƒëo√°n: ¬•{coin_data.get('predicted_price', 0):.2f}")
                print(f"üèÜ Win Rate: {coin_data['win_rate']:.1f}%")
                print("-" * 80)
        
        # B. N·∫øu kh√¥ng c√≥ coin k·ªπ thu·∫≠t ho·∫∑c ch∆∞a ƒë·ªß 2, hi·ªÉn th·ªã orderbook (top 2)
        if displayed_coins < 2 and all_orderbook_opportunities:
            remaining_slots = 2 - displayed_coins
            sorted_orderbook = sorted(all_orderbook_opportunities, 
                                    key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), 
                                    reverse=True)[:remaining_slots]
            
            if sorted_orderbook:
                print(f"\nüîç PH√ÇN T√çCH S·ªî L·ªÜNH - {len(sorted_orderbook)} c∆° h·ªôi khuy·∫øn ngh·ªã:")
                
                for opp in sorted_orderbook:
                    displayed_coins += 1
                    print(f"\n #{displayed_coins}. {opp['coin']}/JPY (Timeframe: {opp['timeframe']})")
                    print(f"  Gi√° hi·ªán t·∫°i: ¬•{opp['current_price']:.2f}")
                    print(f"  Gi√° v√†o l·ªánh: ¬•{opp['entry_price']:.2f}")
                    print(f"üõ°Ô∏è Stop Loss: ¬•{opp['stop_loss']:.2f} (-{opp['risk_percent']:.2f}%)")
                    print(f"  Take Profit:")
                    print(f"   ‚Ä¢ TP1: ¬•{opp['tp1_price']:.2f} (+{((opp['tp1_price']/opp['entry_price']-1)*100):.2f}%)")
                    print(f"   ‚Ä¢ TP2: ¬•{opp['tp2_price']:.2f} (+{((opp['tp2_price']/opp['entry_price']-1)*100):.2f}%)")
                    print(f"‚öñÔ∏è Risk/Reward: 1:{opp['risk_reward_ratio']:.2f}")
                    print(f"üí° T√≠n hi·ªáu: {opp['trend_signal']}")
                    print(f"  L√Ω do: {opp['reason']}")
                    print(f"  ƒê·ªô tin c·∫≠y: {opp['confidence_score']}/100")
                    print(f"  Bid/Ask Ratio: {opp['bid_ask_ratio']:.2f} | Spread: {opp['spread']:.3f}%")
                    if 'rsi' in opp:
                        print(f"  RSI: {opp['rsi']:.1f}")
                    print("‚ö†Ô∏è L∆∞u √Ω: Ph√¢n t√≠ch s·ªï l·ªánh, r·ªßi ro cao h∆°n!")
                    print("-" * 80)
        
        # C. T·ªïng k·∫øt
        if displayed_coins == 0:
            print("\n‚ùå Kh√¥ng t√¨m th·∫•y c∆° h·ªôi ƒë·∫ßu t∆∞ n√†o trong t·∫•t c·∫£ timeframes.")
            print("üí° ƒê·ªÅ xu·∫•t: Ch·ªù th·ªã tr∆∞·ªùng c√≥ t√≠n hi·ªáu r√µ r√†ng h∆°n.")
        else:
            print(f"\n‚úÖ T·ªïng c·ªông: {displayed_coins} c∆° h·ªôi ƒë·∫ßu t∆∞ ƒë∆∞·ª£c khuy·∫øn ngh·ªã")
            
            # Th·ª±c hi·ªán auto trading n·∫øu ƒë∆∞·ª£c b·∫≠t
            if TRADING_CONFIG['enabled']:                
                # Chu·∫©n b·ªã danh s√°ch khuy·∫øn ngh·ªã cho trading
                trading_recommendations = []
                
                # ∆Øu ti√™n technical coins
                if all_technical_coins:
                    sorted_technical = sorted(all_technical_coins, 
                                            key=lambda x: (x['win_rate'], x['risk_reward_ratio']), 
                                            reverse=True)[:2]
                    trading_recommendations.extend(sorted_technical)
                
                # Th√™m orderbook n·∫øu ch∆∞a ƒë·ªß 2
                if len(trading_recommendations) < 2 and all_orderbook_opportunities:
                    remaining_slots = 2 - len(trading_recommendations)
                    sorted_orderbook = sorted(all_orderbook_opportunities, 
                                            key=lambda x: (x['confidence_score'], x['risk_reward_ratio']), 
                                            reverse=True)[:remaining_slots]
                    trading_recommendations.extend(sorted_orderbook)
                
                # Th·ª±c hi·ªán trading
                execute_auto_trading(trading_recommendations)
            else:
                print("\n  AUTO TRADING: T·∫ÆT (ch·ªâ hi·ªÉn th·ªã khuy·∫øn ngh·ªã)")
        
        print("=" * 80)
        
    except Exception as e:
        error_msg = f"‚ùå L·ªói trong print_results: {e}"
        print(error_msg)
        send_system_error_notification(error_msg, "PRINT_RESULTS_ERROR")

# Kh·ªüi t·∫°o order monitoring khi import module
def initialize_order_monitoring():
    """Kh·ªüi t·∫°o h·ªá th·ªëng theo d√µi l·ªánh"""
    try:
        load_active_orders_from_file()
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói kh·ªüi t·∫°o order monitoring: {e}")

# H√†m xem danh s√°ch l·ªánh ƒëang theo d√µi
def show_active_orders():
    """Hi·ªÉn th·ªã danh s√°ch l·ªánh ƒëang ƒë∆∞·ª£c theo d√µi"""
    if not ACTIVE_ORDERS:
        print("  Kh√¥ng c√≥ l·ªánh n√†o ƒëang ƒë∆∞·ª£c theo d√µi")
        return
    
    print(f"\n  DANH S√ÅCH L·ªÜNH ƒêANG THEO D√ïI ({len(ACTIVE_ORDERS)} l·ªánh):")
    print("=" * 80)
    
    for order_id, info in ACTIVE_ORDERS.items():
        added_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(info['added_time']))
        last_checked = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(info['last_checked']))
        
        print(f"üîπ Order ID: {order_id}")
        print(f"   Symbol: {info['symbol']}")
        print(f"   Type: {info['order_type']}")
        print(f"   Buy Price: ¬•{info.get('buy_price', 'N/A')}")
        print(f"   Added: {added_time}")
        print(f"   Last Checked: {last_checked}")
        print(f"   Last Filled: {info.get('last_filled', 0):.6f}")
        print("   " + "-" * 50)

# H√†m x√≥a l·ªánh kh·ªèi danh s√°ch theo d√µi
def remove_order_from_monitor(order_id):
    """X√≥a l·ªánh kh·ªèi danh s√°ch theo d√µi"""
    if order_id in ACTIVE_ORDERS:
        del ACTIVE_ORDERS[order_id]
        save_active_orders_to_file()
        print(f"‚úÖ ƒê√£ x√≥a l·ªánh {order_id} kh·ªèi danh s√°ch theo d√µi")
    else:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªánh {order_id} trong danh s√°ch theo d√µi")

# H√†m ki·ªÉm tra ngay tr·∫°ng th√°i t·∫•t c·∫£ l·ªánh
def check_all_orders_now():
    """Ki·ªÉm tra ngay tr·∫°ng th√°i t·∫•t c·∫£ l·ªánh ƒëang theo d√µi"""
    if not ACTIVE_ORDERS:
        print("  Kh√¥ng c√≥ l·ªánh n√†o ƒëang ƒë∆∞·ª£c theo d√µi")
        return
    
    print(f"üîç ƒêang ki·ªÉm tra {len(ACTIVE_ORDERS)} l·ªánh...")
    
    for order_id, order_info in ACTIVE_ORDERS.items():
        try:
            status = check_order_status(order_id, order_info['symbol'])
            if status:
                print(f"  {order_id}: {status['status']} - {status['filled']:.6f}/{status['amount']:.6f}")
            else:
                print(f"‚ùå {order_id}: Kh√¥ng th·ªÉ ki·ªÉm tra")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra {order_id}: {e}")

# Kh·ªüi t·∫°o khi import module
initialize_order_monitoring()

# ======================== MAIN ENTRY POINT ========================

# H√†m t√≥m t·∫Øt t·∫•t c·∫£ t√≠nh nƒÉng m·ªõi ƒë∆∞·ª£c th√™m
def show_enhanced_features_summary():
    """Hi·ªÉn th·ªã t√≥m t·∫Øt v·ªÅ c√°c t√≠nh nƒÉng ƒë∆∞·ª£c n√¢ng c·∫•p"""
    print("üöÄ ENHANCED TRADING BOT FEATURES")
    print("=" * 60)
    print("1. üîç COMPREHENSIVE DOWNTREND DETECTION")
    print("   ‚úÖ Multi-indicator analysis (6 different signals)")
    print("   ‚úÖ Confidence scoring (0-100%)")
    print("   ‚úÖ Risk level assessment")
    print("   ‚úÖ Strength classification (WEAK/MODERATE/STRONG)")
    print()
    print("2. üéØ DYNAMIC ENTRY/TP/SL CALCULATION")
    print("   ‚úÖ Adaptive entry buffers based on market conditions")
    print("   ‚úÖ Downtrend-aware take profit targets")
    print("   ‚úÖ Intelligent stop loss placement")
    print("   ‚úÖ Risk/reward optimization")
    print()
    print("3. ‚öñÔ∏è ENHANCED RISK MANAGEMENT")
    print("   ‚úÖ Automatic position rejection in strong downtrends")
    print("   ‚úÖ Higher confidence requirements during bearish periods")
    print("   ‚úÖ Dynamic confidence penalties")
    print("   ‚úÖ Order book strength validation")
    print()
    print("4. üìä INTELLIGENT ORDER BOOK ANALYSIS")
    print("   ‚úÖ Bid/ask ratio analysis")
    print("   ‚úÖ Volume wall detection")
    print("   ‚úÖ Support/resistance integration")
    print("   ‚úÖ Liquidity-aware position sizing")
    print()
    print("5. üõ°Ô∏è ADVANCED PROTECTION MECHANISMS")
    print("   ‚úÖ Multi-layer downtrend validation")
    print("   ‚úÖ Emergency stop on strong bearish signals")
    print("   ‚úÖ Conservative profit taking in uncertain markets")
    print("   ‚úÖ Detailed logging for transparency")
    print()
    print("üéØ USAGE COMMANDS:")
    print("   ‚Ä¢ show_downtrend_protection_info() - System details")
    print("   ‚Ä¢ demo_downtrend_detection() - Test downtrend detection")
    print("   ‚Ä¢ show_enhanced_features_summary() - This summary")
    print("   ‚Ä¢ Normal trading flow includes all protections automatically")
    print("=" * 60)

def main():
    """Main entry point v·ªõi proper error handling"""
    try:
        
        # Validate all required functions exist - simple approach
        required_functions = ['print_results', 'startup_bot_with_error_handling', 'check_and_process_sell_orders']
        missing = []
        
        # Get current module's globals
        module_globals = globals()
        
        for func_name in required_functions:
            if func_name not in module_globals:
                missing.append(func_name)
            elif not callable(module_globals[func_name]):
                missing.append(f"{func_name} (not callable)")
        
        if missing:
            print(f"üö® L·ªói: Thi·∫øu functions: {missing}")
            print("  Debug info:")
            # Debug: show what functions are available
            available_funcs = [name for name, obj in module_globals.items() 
                             if callable(obj) and not name.startswith('_')]
            print(f"  Total callable functions: {len(available_funcs)}")
            for func in required_functions:
                if func in module_globals:
                    is_callable = callable(module_globals[func])
                    print(f"  {'‚úÖ' if is_callable else '‚ùå'} {func}: {'Found and callable' if is_callable else 'Found but not callable'}")
                else:
                    print(f"  ‚ùå {func}: Not found in globals")
            return
        
        
        # Hi·ªÉn th·ªã mode ho·∫°t ƒë·ªông
        continuous_mode = TRADING_CONFIG.get('continuous_monitoring', True)
        if continuous_mode:
            print(" Mode: CONTINUOUS - Bot s·∫Ω t·ª± ƒë·ªông l·∫∑p ki·ªÉm tra + trading")
        else:
            print("  Mode: MANUAL - Bot s·∫Ω ch·∫°y 1 l·∫ßn duy nh·∫•t")
        
        # Run bot
        run_bot_continuously()
        
    except KeyboardInterrupt:
        print("\nüõë D·ª´ng bot b·∫±ng Ctrl+C")
    except Exception as e:
        print(f"üö® L·ªói critical trong main: {e}")
        import traceback
        traceback.print_exc()

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    main()