#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script b√°n t·∫•t c·∫£ crypto trong t√†i kho·∫£n ƒë·ªÉ reset v·ªÅ USDT
S·ª≠ d·ª•ng ƒë·ªÉ m√¥ ph·ªèng vi·ªác trade t·ª´ ban ƒë·∫ßu
"""

import ccxt
import trading_config
import time

def sell_all_crypto():
    """B√°n t·∫•t c·∫£ crypto v·ªÅ USDT"""
    try:
        # Kh·ªüi t·∫°o Binance API
        binance = ccxt.binance(trading_config.BINANCE_CONFIG)
        
        # T·∫Øt c·∫£nh b√°o
        binance.options["warnOnFetchOpenOrdersWithoutSymbol"] = False
        
        print("üîÑ ƒêANG B√ÅN T·∫§T C·∫¢ CRYPTO V·ªÄ USDT...")
        print("=" * 60)
        
        # L·∫•y balance hi·ªán t·∫°i
        balance = binance.fetch_balance()
        
        # Danh s√°ch ti·ªÅn t·ªá fiat kh√¥ng b√°n
        fiat_currencies = ['USDT', 'JPY', 'USD', 'EUR', 'BTC', 'ETH']  # Gi·ªØ l·∫°i m·ªôt s·ªë coin ch√≠nh
        
        # Danh s√°ch crypto c·∫ßn b√°n
        crypto_to_sell = []
        total_value_estimate = 0
        
        print("üìä PH√ÇN T√çCH T√ÄI KHO·∫¢N:")
        for symbol, amount in balance['total'].items():
            if amount > 0 and symbol not in ['USDT']:  # Ch·ªâ gi·ªØ l·∫°i USDT
                crypto_to_sell.append({
                    'symbol': symbol,
                    'amount': amount
                })
                print(f"   ‚Ä¢ {symbol}: {amount:.6f}")
        
        if not crypto_to_sell:
            print("‚úÖ Kh√¥ng c√≥ crypto n√†o ƒë·ªÉ b√°n. T√†i kho·∫£n ƒë√£ s·∫°ch.")
            return
        
        print(f"\nüéØ S·∫º B√ÅN {len(crypto_to_sell)} LO·∫†I CRYPTO")
        print("-" * 40)
        
        successful_sales = 0
        failed_sales = 0
        
        for crypto in crypto_to_sell:
            symbol = crypto['symbol']
            amount = crypto['amount']
            
            try:
                # Th·ª≠ b√°n v·ªÅ USDT tr∆∞·ªõc
                trading_pair = f"{symbol}/USDT"
                
                # Ki·ªÉm tra xem pair c√≥ t·ªìn t·∫°i kh√¥ng
                markets = binance.load_markets()
                if trading_pair not in markets:
                    print(f"‚ö†Ô∏è {trading_pair} kh√¥ng t·ªìn t·∫°i, th·ª≠ JPY...")
                    trading_pair = f"{symbol}/JPY"
                    if trading_pair not in markets:
                        print(f"‚ùå Kh√¥ng t√¨m th·∫•y pair cho {symbol}")
                        failed_sales += 1
                        continue
                
                # L·∫•y th√¥ng tin market
                market = markets[trading_pair]
                min_amount = market['limits']['amount']['min']
                
                # Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu
                if amount < min_amount:
                    print(f"‚ö†Ô∏è {symbol}: S·ªë l∆∞·ª£ng {amount:.6f} < minimum {min_amount:.6f}")
                    failed_sales += 1
                    continue
                
                # L·∫•y gi√° hi·ªán t·∫°i
                ticker = binance.fetch_ticker(trading_pair)
                current_price = ticker['last']
                estimated_value = amount * current_price
                
                print(f"üîÑ ƒêang b√°n {symbol}:")
                print(f"   ‚Ä¢ S·ªë l∆∞·ª£ng: {amount:.6f}")
                print(f"   ‚Ä¢ Pair: {trading_pair}")
                print(f"   ‚Ä¢ Gi√° hi·ªán t·∫°i: {current_price:.4f}")
                print(f"   ‚Ä¢ Gi√° tr·ªã ∆∞·ªõc t√≠nh: {estimated_value:.2f}")
                
                # ƒê·∫∑t l·ªánh b√°n market
                order = binance.create_market_sell_order(trading_pair, amount)
                
                print(f"‚úÖ ƒê√£ b√°n {symbol} th√†nh c√¥ng!")
                print(f"   ‚Ä¢ Order ID: {order['id']}")
                print(f"   ‚Ä¢ Gi√° th·ª±c t·∫ø: {order.get('average', 'N/A')}")
                print(f"   ‚Ä¢ S·ªë l∆∞·ª£ng b√°n: {order.get('filled', amount)}")
                
                successful_sales += 1
                total_value_estimate += estimated_value
                
                # Ngh·ªâ m·ªôt ch√∫t gi·ªØa c√°c l·ªánh
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå L·ªói b√°n {symbol}: {e}")
                failed_sales += 1
                continue
        
        print("\n" + "=" * 60)
        print("üìä K·∫æT QU·∫¢ B√ÅN CRYPTO:")
        print(f"‚úÖ Th√†nh c√¥ng: {successful_sales} coins")
        print(f"‚ùå Th·∫•t b·∫°i: {failed_sales} coins")
        print(f"üí∞ T·ªïng gi√° tr·ªã ∆∞·ªõc t√≠nh ƒë√£ b√°n: {total_value_estimate:.2f}")
        
        # Ki·ªÉm tra balance sau khi b√°n
        print("\nüîç KI·ªÇM TRA BALANCE SAU KHI B√ÅN:")
        new_balance = binance.fetch_balance()
        usdt_balance = new_balance['USDT']['free'] if 'USDT' in new_balance else 0
        jpy_balance = new_balance['JPY']['free'] if 'JPY' in new_balance else 0
        
        print(f"üí∞ USDT kh·∫£ d·ª•ng: {usdt_balance:,.2f}")
        print(f"üí∞ JPY kh·∫£ d·ª•ng: {jpy_balance:,.2f}")
        
        # Ki·ªÉm tra crypto c√≤n l·∫°i
        remaining_crypto = []
        for symbol, amount in new_balance['total'].items():
            if amount > 0.001 and symbol not in ['USDT', 'JPY']:  # Threshold ƒë·ªÉ b·ªè qua dust
                remaining_crypto.append(f"{symbol}: {amount:.6f}")
        
        if remaining_crypto:
            print(f"\n‚ö†Ô∏è CRYPTO C√íN L·∫†I:")
            for crypto in remaining_crypto:
                print(f"   ‚Ä¢ {crypto}")
        else:
            print(f"\n‚úÖ T√ÄI KHO·∫¢N ƒê√É S·∫†CH - CH·ªà C√íN FIAT")
        
        print("\nüéâ HO√ÄN TH√ÄNH RESET T√ÄI KHO·∫¢N!")
        print("B√¢y gi·ªù b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu trade t·ª´ ƒë·∫ßu v·ªõi s·ªë d∆∞ USDT/JPY.")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh b√°n crypto: {e}")

def confirm_sell_all():
    """X√°c nh·∫≠n tr∆∞·ªõc khi b√°n t·∫•t c·∫£"""
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: B√ÅN T·∫§T C·∫¢ CRYPTO")
    print("=" * 50)
    print("Script n√†y s·∫Ω b√°n T·∫§T C·∫¢ crypto trong t√†i kho·∫£n v·ªÅ USDT/JPY")
    print("ƒêi·ªÅu n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!")
    print()
    print("Ch·ªâ s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng TESTNET ƒë·ªÉ test!")
    print()
    
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (g√µ 'YES' ƒë·ªÉ x√°c nh·∫≠n): ")
    
    if confirm.upper() == 'YES':
        print("\n‚úÖ ƒê√£ x√°c nh·∫≠n. B·∫Øt ƒë·∫ßu b√°n...")
        return True
    else:
        print("\n‚ùå ƒê√£ h·ªßy. Kh√¥ng b√°n crypto n√†o.")
        return False

if __name__ == "__main__":
    print("üöÄ SCRIPT RESET T√ÄI KHO·∫¢N - B√ÅN T·∫§T C·∫¢ CRYPTO")
    print()
    
    # X√°c nh·∫≠n tr∆∞·ªõc khi th·ª±c hi·ªán
    if confirm_sell_all():
        sell_all_crypto()
    else:
        print("Tho√°t script.")
