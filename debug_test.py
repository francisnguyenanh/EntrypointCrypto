import os
import ccxt
import pandas as pd
import numpy as np
from ta.trend import SMAIndicator, MACD
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import warnings

# T·∫Øt warnings
warnings.filterwarnings('ignore')
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
tf.get_logger().setLevel('ERROR')

# Kh·ªüi t·∫°o Binance API
binance = ccxt.binance()

def test_single_coin():
    try:
        print("üîç Test debug cho 1 coin...")
        
        # L·∫•y d·ªØ li·ªáu BTC/JPY
        symbol = 'BTC/JPY'
        ohlcv = binance.fetch_ohlcv(symbol, '1m', limit=1000)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        print(f"‚úÖ L·∫•y ƒë∆∞·ª£c {len(df)} d√≤ng d·ªØ li·ªáu cho {symbol}")
        print(f"Gi√° hi·ªán t·∫°i: ¬•{df['close'].iloc[-1]:.2f}")
        
        # Test LSTM
        if len(df) < 200:
            print("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu")
            return
            
        # Chu·∫©n b·ªã d·ªØ li·ªáu LSTM
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(df['close'].values.reshape(-1, 1))
        
        X, y = [], []
        look_back = 60
        for i in range(look_back, len(scaled_data)):
            X.append(scaled_data[i-look_back:i, 0])
            y.append(scaled_data[i, 0])
        X, y = np.array(X), np.array(y)
        
        print(f"‚úÖ Chu·∫©n b·ªã LSTM: {len(X)} samples")
        
        if len(X) == 0:
            print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu training")
            return
            
        train_size = int(len(X) * 0.8)
        X_train, y_train = X[:train_size], y[:train_size]
        X_test, y_test = X[train_size:], y[train_size:]
        
        X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
        X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))
        
        print(f"‚úÖ Train shape: {X_train.shape}, Test shape: {X_test.shape}")
        
        # X√¢y d·ª±ng m√¥ h√¨nh LSTM
        model = Sequential()
        model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
        model.add(Dropout(0.2))
        model.add(LSTM(units=50))
        model.add(Dropout(0.2))
        model.add(Dense(units=1))
        
        model.compile(optimizer='adam', loss='mean_squared_error')
        print("üß† ƒêang training LSTM...")
        model.fit(X_train, y_train, epochs=5, batch_size=32, verbose=1)
        
        # D·ª± ƒëo√°n
        last_sequence = df['close'].values[-look_back:]
        last_sequence = scaler.transform(last_sequence.reshape(-1, 1))
        last_sequence = last_sequence.reshape((1, look_back, 1))
        
        predicted_scaled = model.predict(last_sequence, verbose=0)
        predicted_price = scaler.inverse_transform(predicted_scaled)[0][0]
        
        current_price = df['close'].iloc[-1]
        profit_potential = (predicted_price - current_price) / current_price * 100
        
        print(f"üîÆ D·ª± ƒëo√°n LSTM:")
        print(f"   Gi√° hi·ªán t·∫°i: ¬•{current_price:.2f}")
        print(f"   Gi√° d·ª± ƒëo√°n: ¬•{predicted_price:.2f}")
        print(f"   Ti·ªÅm nƒÉng l·ª£i nhu·∫≠n: {profit_potential:.2f}%")
        
        # Test technical indicators
        df_resample = df.resample('1H').agg({'open': 'first', 'high': 'max', 'low': 'min', 'close': 'last', 'volume': 'sum'}).dropna()
        
        print(f"‚úÖ Resampled data: {len(df_resample)} rows")
        
        if len(df_resample) < 200:
            print("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho technical indicators")
            return
            
        # T√≠nh c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t
        df_resample['SMA_50'] = SMAIndicator(df_resample['close'], window=50).sma_indicator()
        df_resample['SMA_200'] = SMAIndicator(df_resample['close'], window=200).sma_indicator()
        df_resample['RSI'] = RSIIndicator(df_resample['close'], window=14).rsi()
        macd = MACD(df_resample['close'])
        df_resample['MACD'] = macd.macd()
        df_resample['MACD_signal'] = macd.macd_signal()
        bb = BollingerBands(df_resample['close'], window=20, window_dev=2)
        df_resample['BB_high'] = bb.bollinger_hband()
        df_resample['BB_low'] = bb.bollinger_lband()
        stoch = StochasticOscillator(df_resample['close'], df_resample['high'], df_resample['low'], window=14)
        df_resample['Stoch'] = stoch.stoch()
        df_resample['Volatility'] = (df_resample['high'] - df_resample['low']) / df_resample['close'] * 100
        
        # T√≠n hi·ªáu mua/b√°n
        latest_data = df_resample.iloc[-1]
        
        print(f"üìä Technical Indicators:")
        print(f"   SMA 50: ¬•{latest_data['SMA_50']:.2f}")
        print(f"   SMA 200: ¬•{latest_data['SMA_200']:.2f}")
        print(f"   RSI: {latest_data['RSI']:.2f}")
        print(f"   MACD: {latest_data['MACD']:.4f}")
        print(f"   MACD Signal: {latest_data['MACD_signal']:.4f}")
        print(f"   BB High: ¬•{latest_data['BB_high']:.2f}")
        print(f"   BB Low: ¬•{latest_data['BB_low']:.2f}")
        print(f"   Stochastic: {latest_data['Stoch']:.2f}")
        print(f"   Volatility: {latest_data['Volatility']:.2f}%")
        
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán t√≠n hi·ªáu mua
        conditions = {
            'SMA_50 > SMA_200': latest_data['SMA_50'] > latest_data['SMA_200'],
            'RSI < 65': latest_data['RSI'] < 65,
            'MACD > MACD_signal': latest_data['MACD'] > latest_data['MACD_signal'],
            'Close < BB_high': latest_data['close'] < latest_data['BB_high'],
            'Stoch < 80': latest_data['Stoch'] < 80,
            'Volatility < 5': latest_data['Volatility'] < 5
        }
        
        print(f"üö¶ ƒêi·ªÅu ki·ªán t√≠n hi·ªáu mua:")
        for condition, result in conditions.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"   {status} {condition}: {result}")
        
        buy_signal = all(conditions.values())
        print(f"üéØ T√≠n hi·ªáu mua: {'C√ì' if buy_signal else 'KH√îNG'}")
        
        if buy_signal and profit_potential >= 0.1:
            print("üöÄ Coin n√†y c√≥ th·ªÉ v√†o l·ªánh!")
        else:
            print("‚è≥ Coin n√†y ch∆∞a ph√π h·ª£p ƒë·ªÉ v√†o l·ªánh")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_single_coin()
