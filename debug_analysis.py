import os
import ccxt
import pandas as pd
import numpy as np
from ta.trend import SMAIndicator, MACD
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.volatility import BollingerBands
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import warnings
import config

# T·∫Øt t·∫•t c·∫£ warnings
warnings.filterwarnings('ignore')
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
tf.get_logger().setLevel('ERROR')
tf.autograph.set_verbosity(0)

# Kh·ªüi t·∫°o Binance API
binance = ccxt.binance()

def debug_single_coin(symbol='BTC/JPY', timeframe='1h'):
    """Debug ph√¢n t√≠ch m·ªôt coin c·ª• th·ªÉ"""
    print(f"üîç DEBUG: Ph√¢n t√≠ch chi ti·∫øt {symbol}")
    print("=" * 60)
    
    try:
        # L·∫•y d·ªØ li·ªáu
        print("1. L·∫•y d·ªØ li·ªáu...")
        # L·∫•y d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ timeframe 1h thay v√¨ resample t·ª´ 1m
        ohlcv = binance.fetch_ohlcv(symbol, timeframe, limit=1000)  # L·∫•y tr·ª±c ti·∫øp 1h data
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        print(f"   ‚úÖ C√≥ {len(df)} candles d·ªØ li·ªáu cho {timeframe}")
        print(f"   üí∞ Gi√° hi·ªán t·∫°i: ¬•{df['close'].iloc[-1]:.2f}")
        
        if len(df) < 50:  # Gi·∫£m t·ª´ 200 xu·ªëng 50
            print("   ‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu (c·∫ßn >= 50 candles)")
            return False
        
        # T√≠nh c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t
        print("\n2. T√≠nh ch·ªâ s·ªë k·ªπ thu·∫≠t...")
        df['SMA_20'] = SMAIndicator(df['close'], window=20).sma_indicator()
        df['SMA_50'] = SMAIndicator(df['close'], window=50).sma_indicator()
        df['RSI'] = RSIIndicator(df['close'], window=14).rsi()
        macd = MACD(df['close'])
        df['MACD'] = macd.macd()
        df['MACD_signal'] = macd.macd_signal()
        bb = BollingerBands(df['close'], window=20, window_dev=2)
        df['BB_high'] = bb.bollinger_hband()
        df['BB_low'] = bb.bollinger_lband()
        stoch = StochasticOscillator(df['close'], df['high'], df['low'], window=14)
        df['Stoch'] = stoch.stoch()
        df['Volatility'] = (df['high'] - df['low']) / df['close'] * 100
        
        # Ki·ªÉm tra gi√° tr·ªã cu·ªëi
        latest = df.iloc[-1]
        print(f"   üìä RSI: {latest['RSI']:.2f}")
        print(f"   üìä MACD: {latest['MACD']:.4f} vs Signal: {latest['MACD_signal']:.4f}")
        print(f"   üìä SMA 20: ¬•{latest['SMA_20']:.2f} vs SMA 50: ¬•{latest['SMA_50']:.2f}")
        print(f"   üìä Stochastic: {latest['Stoch']:.2f}")
        print(f"   üìä Volatility: {latest['Volatility']:.2f}%")
        
        # Test c√°c ƒëi·ªÅu ki·ªán t√≠n hi·ªáu ·ªü c√°c m·ª©c ƒë·ªô kh√°c nhau
        print("\n3. Ki·ªÉm tra ƒëi·ªÅu ki·ªán t√≠n hi·ªáu...")
        
        # Test strict mode
        strict_conditions = [
            ("SMA 20 > SMA 50", latest['SMA_20'] > latest['SMA_50']),
            ("RSI < 65", latest['RSI'] < 65),
            ("MACD > Signal", latest['MACD'] > latest['MACD_signal']),
            ("Close < BB High", latest['close'] < latest['BB_high']),
            ("Stoch < 80", latest['Stoch'] < 80),
            ("Volatility < 5", latest['Volatility'] < 5)
        ]
        
        print("   üî∏ Strict Mode:")
        strict_count = 0
        for condition, result in strict_conditions:
            status = "‚úÖ" if result else "‚ùå"
            print(f"     {status} {condition}")
            if result:
                strict_count += 1
        print(f"   üéØ Strict Score: {strict_count}/6")
        
        # Test flexible mode (3/6 ƒëi·ªÅu ki·ªán)
        flexible_pass = strict_count >= 3
        print(f"   üî∏ Flexible Mode: {'‚úÖ PASS' if flexible_pass else '‚ùå FAIL'} ({strict_count}/6 >= 3)")
        
        # Test LSTM prediction
        print("\n4. Test d·ª± ƒëo√°n LSTM...")
        try:
            predicted_price = predict_price_simple(df)
            if predicted_price:
                current_price = latest['close']
                profit_potential = (predicted_price - current_price) / current_price * 100
                print(f"   ‚úÖ LSTM d·ª± ƒëo√°n: ¬•{predicted_price:.2f}")
                print(f"   üìà Profit potential: {profit_potential:.3f}%")
                
                # Test v·ªõi c√°c ng∆∞·ª°ng profit kh√°c nhau
                for threshold in [0.01, 0.05, 0.1, 0.15, 0.2, 0.3]:
                    status = "‚úÖ" if profit_potential >= threshold else "‚ùå"
                    print(f"     {status} Profit >= {threshold}%")
            else:
                print("   ‚ùå LSTM prediction failed")
                return False
        except Exception as e:
            print(f"   ‚ùå LSTM error: {e}")
            return False
        
        # Test v·ªõi win rate gi·∫£ ƒë·ªãnh
        print("\n5. Test v·ªõi win rate gi·∫£ ƒë·ªãnh...")
        fake_win_rates = [50, 40, 30, 20, 10, 5, 0]
        for win_rate in fake_win_rates:
            status = "‚úÖ" if win_rate <= 50 else "‚ùå"  # Gi·∫£ ƒë·ªãnh win rate = 50%
            print(f"   {status} Win Rate >= {win_rate}%")
        
        print("\nüéØ K·∫æT LU·∫¨N:")
        if strict_count >= 6:
            print("   ‚úÖ Coin n√†y c√≥ th·ªÉ PASS ·ªü strict mode")
        elif strict_count >= 3:
            print("   ‚ö†Ô∏è Coin n√†y c√≥ th·ªÉ PASS ·ªü flexible mode")
        else:
            print("   ‚ùå Coin n√†y c·∫ßn lstm_only mode")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói debug: {e}")
        return False

def predict_price_simple(df, look_back=20):  # Gi·∫£m t·ª´ 60 xu·ªëng 20
    """Simplified LSTM prediction"""
    try:
        if len(df) < look_back:
            return None
        
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_data = scaler.fit_transform(df['close'].values.reshape(-1, 1))
        
        X, y = [], []
        for i in range(look_back, len(scaled_data)):
            X.append(scaled_data[i-look_back:i, 0])
            y.append(scaled_data[i, 0])
        X, y = np.array(X), np.array(y)
        
        if len(X) == 0:
            return None
        
        train_size = int(len(X) * 0.8)
        if train_size == 0:
            return None
            
        X_train, y_train = X[:train_size], y[:train_size]
        
        X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
        
        # Simplified LSTM model
        model = Sequential()
        model.add(LSTM(units=20, input_shape=(X_train.shape[1], 1)))  # Reduced complexity
        model.add(Dense(units=1))
        
        model.compile(optimizer='adam', loss='mean_squared_error')
        model.fit(X_train, y_train, epochs=5, batch_size=16, verbose=0)  # Reduced epochs
        
        last_sequence = df['close'].values[-look_back:]
        last_sequence = scaler.transform(last_sequence.reshape(-1, 1))
        last_sequence = last_sequence.reshape((1, look_back, 1))
        
        predicted_scaled = model.predict(last_sequence, verbose=0)
        predicted_price = scaler.inverse_transform(predicted_scaled)[0][0]
        
        # Ki·ªÉm tra gi√° d·ª± ƒëo√°n c√≥ h·ª£p l√Ω kh√¥ng
        current_price = df['close'].iloc[-1]
        if predicted_price <= 0 or predicted_price > current_price * 3:  # Relaxed check
            return None
            
        return predicted_price
    except Exception as e:
        print(f"L·ªói LSTM: {e}")
        return None

def test_multiple_coins():
    """Test nhi·ªÅu coins ƒë·ªÉ t√¨m pattern"""
    print("\nüîç TEST NHI·ªÄU COINS")
    print("=" * 60)
    
    try:
        markets = binance.load_markets()
        jpy_pairs = [symbol for symbol in markets if symbol.endswith('/JPY')][:5]  # Test 5 coins ƒë·∫ßu
        
        for symbol in jpy_pairs:
            print(f"\n--- {symbol} ---")
            debug_single_coin(symbol, '1h')
            print()
            
    except Exception as e:
        print(f"L·ªói test multiple coins: {e}")

if __name__ == "__main__":
    print("üöÄ CH·∫†Y DEBUG PH√ÇN T√çCH CRYPTO")
    print("=" * 60)
    
    # Test BTC/JPY tr∆∞·ªõc
    debug_single_coin('BTC/JPY', '1h')
    
    # Uncomment ƒë·ªÉ test nhi·ªÅu coins
    # test_multiple_coins()
