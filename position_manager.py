#!/usr/bin/env python3
"""
Position Manager - Qu·∫£n l√Ω gi√° mua trung b√¨nh cho t·ª´ng coin
"""

import json
import time
from datetime import datetime
import os

class PositionManager:
    def __init__(self, file_path='position_data.json'):
        self.file_path = file_path
        self.positions = {}
        self.load_positions()
    
    def load_positions(self):
        """ƒê·ªçc d·ªØ li·ªáu position t·ª´ file"""
        try:
            if os.path.exists(self.file_path):
                with open(self.file_path, 'r', encoding='utf-8') as f:
                    self.positions = json.load(f)
                print(f"üìÇ ƒê√£ t·∫£i {len(self.positions)} position t·ª´ {self.file_path}")
            else:
                self.positions = {}
                self.save_positions()
                print(f"üìÇ T·∫°o file position m·ªõi: {self.file_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ƒë·ªçc position file: {e}")
            self.positions = {}
    
    def save_positions(self):
        """L∆∞u d·ªØ li·ªáu position v√†o file"""
        try:
            with open(self.file_path, 'w', encoding='utf-8') as f:
                json.dump(self.positions, f, indent=2, ensure_ascii=False, default=str)
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói l∆∞u position file: {e}")
    
    def add_buy_order(self, symbol, quantity, price, order_id=None):
        """
        Th√™m l·ªánh mua m·ªõi v√† c·∫≠p nh·∫≠t gi√° trung b√¨nh
        
        Args:
            symbol: Symbol coin (VD: 'ADA/JPY')
            quantity: S·ªë l∆∞·ª£ng mua
            price: Gi√° mua
            order_id: ID l·ªánh (optional)
        
        Returns:
            dict: Th√¥ng tin position c·∫≠p nh·∫≠t
        """
        try:
            coin = symbol.split('/')[0]  # L·∫•y ADA t·ª´ ADA/JPY
            
            if coin not in self.positions:
                # Position m·ªõi
                self.positions[coin] = {
                    'symbol': symbol,
                    'total_quantity': quantity,
                    'total_cost': quantity * price,
                    'average_price': price,
                    'buy_orders': [],
                    'created_at': datetime.now().isoformat(),
                    'updated_at': datetime.now().isoformat()
                }
            else:
                # C·∫≠p nh·∫≠t position hi·ªán c√≥
                current_pos = self.positions[coin]
                
                # T√≠nh to√°n gi√° trung b√¨nh m·ªõi
                old_total_cost = current_pos['total_cost']
                old_total_quantity = current_pos['total_quantity']
                
                new_total_quantity = old_total_quantity + quantity
                new_total_cost = old_total_cost + (quantity * price)
                new_average_price = new_total_cost / new_total_quantity
                
                # C·∫≠p nh·∫≠t position
                current_pos['total_quantity'] = new_total_quantity
                current_pos['total_cost'] = new_total_cost
                current_pos['average_price'] = new_average_price
                current_pos['updated_at'] = datetime.now().isoformat()
            
            # L∆∞u th√¥ng tin l·ªánh mua
            buy_order_info = {
                'quantity': quantity,
                'price': price,
                'timestamp': datetime.now().isoformat(),
                'order_id': order_id
            }
            self.positions[coin]['buy_orders'].append(buy_order_info)
            
            # L∆∞u v√†o file
            self.save_positions()
            
            position_info = self.positions[coin]
            print(f"üìä C·∫≠p nh·∫≠t position {coin}:")
            print(f"   üí∞ Gi√° trung b√¨nh: ¬•{position_info['average_price']:.4f}")
            print(f"   üì¶ T·ªïng quantity: {position_info['total_quantity']:.6f}")
            print(f"   üí∏ T·ªïng chi ph√≠: ¬•{position_info['total_cost']:.2f}")
            
            return position_info
            
        except Exception as e:
            print(f"‚ùå L·ªói th√™m buy order: {e}")
            return None
    
    def get_position(self, symbol):
        """
        L·∫•y th√¥ng tin position c·ªßa coin
        
        Args:
            symbol: Symbol coin (VD: 'ADA/JPY')
        
        Returns:
            dict: Th√¥ng tin position ho·∫∑c None
        """
        coin = symbol.split('/')[0]
        return self.positions.get(coin, None)
    
    def remove_position(self, symbol, quantity_sold=None):
        """
        X√≥a ho·∫∑c gi·∫£m position khi b√°n coin
        
        Args:
            symbol: Symbol coin
            quantity_sold: S·ªë l∆∞·ª£ng b√°n (None = b√°n h·∫øt)
        
        Returns:
            dict: Th√¥ng tin position c√≤n l·∫°i ho·∫∑c None
        """
        try:
            coin = symbol.split('/')[0]
            
            if coin not in self.positions:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y position cho {coin}")
                return None
            
            if quantity_sold is None:
                # B√°n h·∫øt
                removed_position = self.positions.pop(coin)
                print(f"üóëÔ∏è ƒê√£ x√≥a position {coin} (b√°n h·∫øt)")
                self.save_positions()
                return None
            else:
                # B√°n m·ªôt ph·∫ßn
                current_pos = self.positions[coin]
                remaining_quantity = current_pos['total_quantity'] - quantity_sold
                
                if remaining_quantity <= 0:
                    # B√°n h·∫øt
                    removed_position = self.positions.pop(coin)
                    print(f"üóëÔ∏è ƒê√£ x√≥a position {coin} (b√°n h·∫øt)")
                    self.save_positions()
                    return None
                else:
                    # C√≤n l·∫°i m·ªôt ph·∫ßn
                    # T√≠nh l·∫°i cost (gi·ªØ nguy√™n average price)
                    current_pos['total_quantity'] = remaining_quantity
                    current_pos['total_cost'] = remaining_quantity * current_pos['average_price']
                    current_pos['updated_at'] = datetime.now().isoformat()
                    
                    print(f"üìâ Gi·∫£m position {coin}:")
                    print(f"   üì¶ C√≤n l·∫°i: {remaining_quantity:.6f}")
                    print(f"   üí∞ Gi√° TB: ¬•{current_pos['average_price']:.4f}")
                    
                    self.save_positions()
                    return current_pos
                    
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a position: {e}")
            return None
    
    def calculate_sl_tp_prices(self, symbol, sl_percent=3, tp1_percent=2, tp2_percent=5):
        """
        T√≠nh to√°n gi√° SL v√† TP d·ª±a tr√™n gi√° trung b√¨nh
        
        Args:
            symbol: Symbol coin
            sl_percent: % stop loss (default 3%)
            tp1_percent: % take profit 1 (default 2%)  
            tp2_percent: % take profit 2 (default 5%)
        
        Returns:
            dict: Gi√° SL, TP1, TP2
        """
        try:
            position = self.get_position(symbol)
            if not position:
                return None
            
            avg_price = position['average_price']
            
            # T√≠nh gi√° c√≥ t√≠nh ph√≠ giao d·ªãch (0.1% m·ªói l·ªánh)
            trading_fee = 0.001  # 0.1%
            
            sl_price = avg_price * (1 - sl_percent / 100)
            tp1_price = avg_price * (1 + (tp1_percent + trading_fee * 2 * 100) / 100)  # +ph√≠
            tp2_price = avg_price * (1 + (tp2_percent + trading_fee * 2 * 100) / 100)  # +ph√≠
            
            return {
                'average_entry': avg_price,
                'stop_loss': sl_price,
                'tp1_price': tp1_price,
                'tp2_price': tp2_price,
                'total_quantity': position['total_quantity'],
                'total_cost': position['total_cost']
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói t√≠nh SL/TP: {e}")
            return None
    
    def get_all_positions(self):
        """L·∫•y t·∫•t c·∫£ positions hi·ªán c√≥"""
        return self.positions
    
    def get_position_summary(self):
        """T√≥m t·∫Øt t·∫•t c·∫£ positions"""
        if not self.positions:
            return "‚úÖ Kh√¥ng c√≥ position n√†o"
        
        summary = f"üìä T·ªîNG QUAN POSITIONS ({len(self.positions)} coin):\n"
        total_value = 0
        
        for coin, pos in self.positions.items():
            value = pos['total_cost']
            total_value += value
            summary += f"   üí∞ {coin}: {pos['total_quantity']:.6f} @ ¬•{pos['average_price']:.4f} = ¬•{value:.2f}\n"
        
        summary += f"üí∏ T·ªïng gi√° tr·ªã: ¬•{total_value:.2f}"
        return summary
    
    def cleanup_old_positions(self, days=30):
        """D·ªçn d·∫πp positions c≈© kh√¥ng ho·∫°t ƒë·ªông"""
        try:
            current_time = datetime.now()
            positions_to_remove = []
            
            for coin, pos in self.positions.items():
                updated_at = datetime.fromisoformat(pos['updated_at'])
                days_diff = (current_time - updated_at).days
                
                if days_diff > days:
                    positions_to_remove.append(coin)
            
            for coin in positions_to_remove:
                self.positions.pop(coin)
                print(f"üóëÔ∏è D·ªçn d·∫πp position c≈©: {coin}")
            
            if positions_to_remove:
                self.save_positions()
                return len(positions_to_remove)
            
            return 0
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói d·ªçn d·∫πp positions: {e}")
            return 0

# Kh·ªüi t·∫°o global position manager
position_manager = PositionManager()

if __name__ == "__main__":
    # Test position manager
    print("üß™ Testing Position Manager")
    print("=" * 40)
    
    # Test th√™m l·ªánh mua
    position_manager.add_buy_order('ADA/JPY', 100, 110.5, 'order_1')
    position_manager.add_buy_order('ADA/JPY', 50, 115.0, 'order_2')  # Gi√° cao h∆°n
    
    # Test t√≠nh SL/TP
    sl_tp = position_manager.calculate_sl_tp_prices('ADA/JPY')
    if sl_tp:
        print(f"\nüìä SL/TP cho ADA:")
        print(f"   üéØ Entry TB: ¬•{sl_tp['average_entry']:.4f}")
        print(f"   üõ°Ô∏è Stop Loss: ¬•{sl_tp['stop_loss']:.4f}")
        print(f"   üéØ TP1: ¬•{sl_tp['tp1_price']:.4f}")
        print(f"   üéØ TP2: ¬•{sl_tp['tp2_price']:.4f}")
    
    # Test summary
    print(f"\n{position_manager.get_position_summary()}")
