#!/usr/bin/env python3
"""
Position Manager - Qu·∫£n l√Ω gi√° mua trung b√¨nh cho t·ª´ng coin
"""

import json
import time
from datetime import datetime
import os

class PositionManager:
    def __init__(self, file_path='position_data.json'):
        self.file_path = file_path
        self.positions = {}
        self.load_positions()
    
    def load_positions(self):
        """ƒê·ªçc d·ªØ li·ªáu position t·ª´ file"""
        try:
            if os.path.exists(self.file_path):
                with open(self.file_path, 'r', encoding='utf-8') as f:
                    self.positions = json.load(f)
                print(f"üìÇ ƒê√£ t·∫£i {len(self.positions)} position t·ª´ {self.file_path}")
                
                # Ki·ªÉm tra k√≠ch th∆∞·ªõc file v√† t·ª± ƒë·ªông maintenance n·∫øu c·∫ßn
                file_size_kb = os.path.getsize(self.file_path) / 1024
                if file_size_kb > 50:  # N·∫øu file > 50KB th√¨ cleanup
                    print(f"‚ö†Ô∏è File position l·ªõn ({file_size_kb:.1f} KB) - Ch·∫°y auto maintenance...")
                    self.auto_maintenance()
                
            else:
                self.positions = {}
                self.save_positions()
                print(f"üìÇ T·∫°o file position m·ªõi: {self.file_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ƒë·ªçc position file: {e}")
            self.positions = {}
    
    def save_positions(self):
        """L∆∞u d·ªØ li·ªáu position v√†o file"""
        try:
            with open(self.file_path, 'w', encoding='utf-8') as f:
                json.dump(self.positions, f, indent=2, ensure_ascii=False, default=str)
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói l∆∞u position file: {e}")
    
    def add_buy_order(self, symbol, quantity, price, order_id=None):
        """
        Th√™m l·ªánh mua m·ªõi v√† c·∫≠p nh·∫≠t gi√° trung b√¨nh
        
        Args:
            symbol: Symbol coin (VD: 'ADA/JPY')
            quantity: S·ªë l∆∞·ª£ng mua
            price: Gi√° mua
            order_id: ID l·ªánh (optional)
        
        Returns:
            dict: Th√¥ng tin position c·∫≠p nh·∫≠t
        """
        try:
            coin = symbol.split('/')[0]  # L·∫•y ADA t·ª´ ADA/JPY
            
            if coin not in self.positions:
                # Position m·ªõi
                self.positions[coin] = {
                    'symbol': symbol,
                    'total_quantity': quantity,
                    'total_cost': quantity * price,
                    'average_price': price,
                    'buy_orders': [],
                    'active_sell_orders': [],  # Track active sell orders
                    'created_at': datetime.now().isoformat(),
                    'updated_at': datetime.now().isoformat()
                }
            else:
                # C·∫≠p nh·∫≠t position hi·ªán c√≥
                current_pos = self.positions[coin]
                
                # T√≠nh to√°n gi√° trung b√¨nh m·ªõi
                old_total_cost = current_pos['total_cost']
                old_total_quantity = current_pos['total_quantity']
                
                new_total_quantity = old_total_quantity + quantity
                new_total_cost = old_total_cost + (quantity * price)
                new_average_price = new_total_cost / new_total_quantity
                
                # C·∫≠p nh·∫≠t position
                current_pos['total_quantity'] = new_total_quantity
                current_pos['total_cost'] = new_total_cost
                current_pos['average_price'] = new_average_price
                current_pos['updated_at'] = datetime.now().isoformat()
            
            # L∆∞u th√¥ng tin l·ªánh mua (CH·ªà GI·ªÆ 10 L·ªÜNH G·∫¶N NH·∫§T)
            buy_order_info = {
                'quantity': quantity,
                'price': price,
                'timestamp': datetime.now().isoformat(),
                'order_id': order_id
            }
            
            # Th√™m l·ªánh m·ªõi v√† gi·ªØ t·ªëi ƒëa 10 l·ªánh g·∫ßn nh·∫•t
            self.positions[coin]['buy_orders'].append(buy_order_info)
            if len(self.positions[coin]['buy_orders']) > 10:
                # X√≥a l·ªánh c≈© nh·∫•t, gi·ªØ 10 l·ªánh m·ªõi nh·∫•t
                self.positions[coin]['buy_orders'] = self.positions[coin]['buy_orders'][-10:]
                print(f"üßπ ƒê√£ cleanup buy_orders c≈© cho {coin}, gi·ªØ 10 l·ªánh m·ªõi nh·∫•t")
            
            # L∆∞u v√†o file
            self.save_positions()
            
            position_info = self.positions[coin]
            print(f"üìä C·∫≠p nh·∫≠t position {coin}:")
            print(f"   üí∞ Gi√° trung b√¨nh: ¬•{position_info['average_price']:.4f}")
            print(f"   üì¶ T·ªïng quantity: {position_info['total_quantity']:.6f}")
            print(f"   üí∏ T·ªïng chi ph√≠: ¬•{position_info['total_cost']:.2f}")
            print(f"   üìã Buy orders l∆∞u tr·ªØ: {len(position_info['buy_orders'])}")
            
            return position_info
            
        except Exception as e:
            print(f"‚ùå L·ªói th√™m buy order: {e}")
            return None
    
    def get_position(self, symbol):
        """
        L·∫•y th√¥ng tin position c·ªßa coin
        
        Args:
            symbol: Symbol coin (VD: 'ADA/JPY')
        
        Returns:
            dict: Th√¥ng tin position ho·∫∑c None
        """
        coin = symbol.split('/')[0]
        return self.positions.get(coin, None)
    
    def remove_position(self, symbol, quantity_sold=None):
        """
        X√≥a ho·∫∑c gi·∫£m position khi b√°n coin
        
        Args:
            symbol: Symbol coin
            quantity_sold: S·ªë l∆∞·ª£ng b√°n (None = b√°n h·∫øt)
        
        Returns:
            dict: Th√¥ng tin position c√≤n l·∫°i ho·∫∑c None
        """
        try:
            coin = symbol.split('/')[0]
            
            if coin not in self.positions:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y position cho {coin}")
                return None
            
            if quantity_sold is None:
                # B√°n h·∫øt
                removed_position = self.positions.pop(coin)
                print(f"üóëÔ∏è ƒê√£ x√≥a position {coin} (b√°n h·∫øt)")
                self.save_positions()
                return None
            else:
                # B√°n m·ªôt ph·∫ßn
                current_pos = self.positions[coin]
                remaining_quantity = current_pos['total_quantity'] - quantity_sold
                
                if remaining_quantity <= 0:
                    # B√°n h·∫øt
                    removed_position = self.positions.pop(coin)
                    print(f"üóëÔ∏è ƒê√£ x√≥a position {coin} (b√°n h·∫øt)")
                    self.save_positions()
                    return None
                else:
                    # C√≤n l·∫°i m·ªôt ph·∫ßn
                    # T√≠nh l·∫°i cost (gi·ªØ nguy√™n average price)
                    current_pos['total_quantity'] = remaining_quantity
                    current_pos['total_cost'] = remaining_quantity * current_pos['average_price']
                    current_pos['updated_at'] = datetime.now().isoformat()
                    
                    print(f"üìâ Gi·∫£m position {coin}:")
                    print(f"   üì¶ C√≤n l·∫°i: {remaining_quantity:.6f}")
                    print(f"   üí∞ Gi√° TB: ¬•{current_pos['average_price']:.4f}")
                    
                    self.save_positions()
                    return current_pos
                    
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a position: {e}")
            return None
    
    def calculate_sl_tp_prices(self, symbol, sl_percent=3, tp1_percent=2, tp2_percent=5):
        """
        T√≠nh to√°n gi√° SL v√† TP d·ª±a tr√™n gi√° trung b√¨nh
        
        Args:
            symbol: Symbol coin
            sl_percent: % stop loss (default 3%)
            tp1_percent: % take profit 1 (default 2%)  
            tp2_percent: % take profit 2 (default 5%)
        
        Returns:
            dict: Gi√° SL, TP1, TP2
        """
        try:
            position = self.get_position(symbol)
            if not position:
                return None
            
            avg_price = position['average_price']
            
            # T√≠nh gi√° c√≥ t√≠nh ph√≠ giao d·ªãch (0.1% m·ªói l·ªánh)
            trading_fee = 0.001  # 0.1%
            
            sl_price = avg_price * (1 - sl_percent / 100)
            tp1_price = avg_price * (1 + (tp1_percent + trading_fee * 2 * 100) / 100)  # +ph√≠
            tp2_price = avg_price * (1 + (tp2_percent + trading_fee * 2 * 100) / 100)  # +ph√≠
            
            return {
                'average_entry': avg_price,
                'stop_loss': sl_price,
                'tp1_price': tp1_price,
                'tp2_price': tp2_price,
                'total_quantity': position['total_quantity'],
                'total_cost': position['total_cost']
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói t√≠nh SL/TP: {e}")
            return None
    
    def calculate_pnl(self, symbol, quantity, current_price):
        """
        T√≠nh P&L cho m·ªôt l∆∞·ª£ng coin v·ªõi gi√° hi·ªán t·∫°i
        
        Args:
            symbol: Symbol coin
            quantity: S·ªë l∆∞·ª£ng coin ƒë·ªÉ t√≠nh P&L
            current_price: Gi√° hi·ªán t·∫°i
        
        Returns:
            dict: Th√¥ng tin P&L
        """
        try:
            position = self.get_position(symbol)
            if not position:
                return None
            
            if quantity > position['total_quantity']:
                quantity = position['total_quantity']
            
            avg_entry_price = position['average_price']
            
            # T√≠nh chi ph√≠ mua
            cost_basis = quantity * avg_entry_price
            
            # T√≠nh gi√° tr·ªã hi·ªán t·∫°i (tr·ª´ ph√≠ giao d·ªãch)
            trading_fee = 0.001  # 0.1% fee
            current_value = quantity * current_price * (1 - trading_fee)
            
            # P&L
            profit_loss = current_value - cost_basis
            profit_loss_percent = (profit_loss / cost_basis) * 100 if cost_basis > 0 else 0
            
            return {
                'symbol': symbol,
                'quantity': quantity,
                'avg_entry_price': avg_entry_price,
                'current_price': current_price,
                'cost_basis': cost_basis,
                'current_value': current_value,
                'profit_loss': profit_loss,
                'profit_loss_percent': profit_loss_percent,
                'trading_fee': quantity * current_price * trading_fee
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói t√≠nh P&L: {e}")
            return None

    def update_position_after_sell(self, symbol, quantity_sold, sell_price):
        """
        C·∫≠p nh·∫≠t position sau khi b√°n coin (FIFO - First In First Out)
        
        Args:
            symbol: Symbol coin
            quantity_sold: S·ªë l∆∞·ª£ng ƒë√£ b√°n
            sell_price: Gi√° b√°n
        """
        try:
            coin = symbol.split('/')[0]
            if coin not in self.positions:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y position cho {coin}")
                return False
            
            position = self.positions[coin]
            remaining_to_sell = quantity_sold
            
            # FIFO: B√°n t·ª´ buy order c≈© nh·∫•t tr∆∞·ªõc
            updated_buy_orders = []
            
            for buy_order in position['buy_orders']:
                if remaining_to_sell <= 0:
                    updated_buy_orders.append(buy_order)
                    continue
                
                if buy_order['quantity'] <= remaining_to_sell:
                    # B√°n h·∫øt order n√†y
                    remaining_to_sell -= buy_order['quantity']
                else:
                    # B√°n m·ªôt ph·∫ßn order n√†y
                    buy_order['quantity'] -= remaining_to_sell
                    buy_order['total_cost'] = buy_order['quantity'] * buy_order['price']
                    updated_buy_orders.append(buy_order)
                    remaining_to_sell = 0
            
            # C·∫≠p nh·∫≠t position
            position['buy_orders'] = updated_buy_orders
            
            # T√≠nh l·∫°i totals
            total_quantity = sum(order['quantity'] for order in updated_buy_orders)
            total_cost = sum(order['quantity'] * order['price'] for order in updated_buy_orders)
            
            if total_quantity > 0:
                position['total_quantity'] = total_quantity
                position['total_cost'] = total_cost
                position['average_price'] = total_cost / total_quantity
                
                print(f"üìä C·∫≠p nh·∫≠t {coin} sau khi b√°n:")
                print(f"   üì§ ƒê√£ b√°n: {quantity_sold:.6f} @ ¬•{sell_price:.4f}")
                print(f"   üì¶ C√≤n l·∫°i: {total_quantity:.6f}")
                print(f"   üí∞ Gi√° TB: ¬•{position['average_price']:.4f}")
            else:
                # X√≥a position n·∫øu b√°n h·∫øt
                del self.positions[coin]
                print(f"‚úÖ ƒê√£ b√°n h·∫øt {coin}, x√≥a position")
            
            # L∆∞u file
            self.save_positions()
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t position sau khi b√°n: {e}")
            return False

    def add_sell_order_tracking(self, symbol, order_id, order_type, quantity, price):
        """
        Th√™m tracking cho sell order (SL/TP)
        
        Args:
            symbol: Symbol coin 
            order_id: ID c·ªßa sell order
            order_type: 'STOP_LOSS' ho·∫∑c 'TAKE_PROFIT_1' ho·∫∑c 'TAKE_PROFIT_2'
            quantity: S·ªë l∆∞·ª£ng b√°n
            price: Gi√° b√°n
        """
        try:
            coin = symbol.split('/')[0]
            if coin not in self.positions:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y position cho {coin}")
                return False
            
            # ƒê·∫£m b·∫£o position c√≥ active_sell_orders field
            if 'active_sell_orders' not in self.positions[coin]:
                self.positions[coin]['active_sell_orders'] = []
            
            sell_order_info = {
                'order_id': str(order_id),
                'order_type': order_type,
                'quantity': quantity,
                'price': price,
                'status': 'ACTIVE',
                'created_at': datetime.now().isoformat()
            }
            
            self.positions[coin]['active_sell_orders'].append(sell_order_info)
            self.positions[coin]['updated_at'] = datetime.now().isoformat()
            
            # L∆∞u file
            self.save_positions()
            
            print(f"üìä ƒê√£ track sell order {order_id} cho {coin}: {order_type} @ ¬•{price}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói track sell order: {e}")
            return False

    def check_and_sync_with_exchange(self, exchange_api):
        """
        Ki·ªÉm tra v√† ƒë·ªìng b·ªô v·ªõi exchange - Handle c·∫£ auto fill v√† manual intervention
        
        Args:
            exchange_api: ƒê·ªëi t∆∞·ª£ng API ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i l·ªánh
        """
        try:
            updated_positions = []
            manual_interventions = []
            
            for coin, position in self.positions.items():
                if not position.get('active_sell_orders'):
                    continue
                
                # Ki·ªÉm tra t·ª´ng sell order
                for sell_order in position['active_sell_orders'][:]:  # Copy list ƒë·ªÉ safe remove
                    if sell_order.get('status') != 'ACTIVE':
                        continue
                    
                    order_id = sell_order['order_id']
                    
                    try:
                        # Ki·ªÉm tra order c√≥ c√≤n t·ªìn t·∫°i tr√™n exchange kh√¥ng
                        order_status = exchange_api.fetch_order(order_id, position['symbol'])
                        
                        if order_status['status'] == 'closed':
                            # Case 1: L·ªánh ƒë√£ t·ª± ƒë·ªông kh·ªõp
                            filled_quantity = sell_order['quantity']
                            filled_price = order_status.get('average', sell_order['price'])
                            
                            print(f"‚úÖ AUTO FILL: {order_id} - {filled_quantity} {coin} @ ¬•{filled_price}")
                            
                            # Update position sau khi b√°n
                            self.update_position_after_sell(
                                position['symbol'], 
                                filled_quantity, 
                                filled_price
                            )
                            
                            # ƒê√°nh d·∫•u order ƒë√£ filled
                            sell_order['status'] = 'FILLED'
                            sell_order['filled_at'] = datetime.now().isoformat()
                            sell_order['filled_price'] = filled_price
                            sell_order['fill_type'] = 'AUTO'
                            
                            updated_positions.append(coin)
                            
                        elif order_status['status'] in ['canceled', 'expired']:
                            # Order b·ªã cancel/expire
                            print(f"‚ö†Ô∏è ORDER CANCELED: {order_id} - {coin}")
                            sell_order['status'] = 'CANCELED'
                            sell_order['canceled_at'] = datetime.now().isoformat()
                            
                    except Exception as order_error:
                        # Case 2: Order kh√¥ng t·ªìn t·∫°i tr√™n exchange = Manual intervention
                        error_msg = str(order_error).lower()
                        if "does not exist" in error_msg or "not found" in error_msg or "order" in error_msg:
                            
                            print(f"üîß MANUAL INTERVENTION DETECTED: Order {order_id} kh√¥ng t·ªìn t·∫°i tr√™n exchange")
                            print(f"   ‚Üí C√≥ th·ªÉ: 1) L·ªánh ƒë√£ kh·ªõp th·ªß c√¥ng, 2) User ƒë√£ h·ªßy l·ªánh")
                            
                            # Ki·ªÉm tra balance ƒë·ªÉ x√°c ƒë·ªãnh c√≥ b√°n hay kh√¥ng
                            try:
                                account_info = exchange_api.get_account()
                                balances = {b['asset']: float(b['free']) for b in account_info['balances']}
                                current_balance = balances.get(coin, 0.0)
                                expected_balance = position['total_quantity']
                                
                                if current_balance < expected_balance:
                                    # Balance gi·∫£m = c√≥ b√°n coin
                                    sold_quantity = expected_balance - current_balance
                                    
                                    print(f"   üí∞ Balance check: ƒê√£ b√°n {sold_quantity} {coin}")
                                    print(f"   üìä Expected: {expected_balance}, Actual: {current_balance}")
                                    
                                    # L·∫•y gi√° hi·ªán t·∫°i l√†m estimate
                                    ticker = exchange_api.get_symbol_ticker(symbol=position['symbol'])
                                    current_price = float(ticker['price'])
                                    
                                    # Update position
                                    self.update_position_after_sell(
                                        position['symbol'],
                                        sold_quantity,
                                        current_price
                                    )
                                    
                                    # ƒê√°nh d·∫•u manual intervention
                                    sell_order['status'] = 'MANUAL_FILLED'
                                    sell_order['filled_at'] = datetime.now().isoformat()
                                    sell_order['filled_price'] = current_price
                                    sell_order['fill_type'] = 'MANUAL'
                                    sell_order['note'] = 'Detected via balance check'
                                    
                                    manual_interventions.append({
                                        'coin': coin,
                                        'action': 'SELL',
                                        'quantity': sold_quantity,
                                        'estimated_price': current_price,
                                        'detection_method': 'balance_check'
                                    })
                                    
                                    updated_positions.append(coin)
                                    
                                else:
                                    # Balance kh√¥ng ƒë·ªïi = ch·ªâ h·ªßy l·ªánh
                                    print(f"   ‚ùå Order b·ªã h·ªßy, kh√¥ng c√≥ giao d·ªãch")
                                    sell_order['status'] = 'MANUAL_CANCELED'
                                    sell_order['canceled_at'] = datetime.now().isoformat()
                                    sell_order['fill_type'] = 'MANUAL'
                                    
                                    manual_interventions.append({
                                        'coin': coin,
                                        'action': 'CANCEL',
                                        'order_id': order_id,
                                        'detection_method': 'order_not_found'
                                    })
                                    
                            except Exception as balance_error:
                                print(f"   ‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra balance: {balance_error}")
                                # Fallback: ƒë√°nh d·∫•u unknown
                                sell_order['status'] = 'UNKNOWN'
                                sell_order['note'] = 'Manual intervention detected but could not verify'
                        else:
                            print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra order {order_id}: {order_error}")
                            continue
            
            # Cleanup v√† save
            self.cleanup_old_sell_orders()
            
            # Report results
            if updated_positions:
                print(f"\nüîÑ POSITIONS UPDATED: {updated_positions}")
            
            if manual_interventions:
                print(f"\nüîß MANUAL INTERVENTIONS DETECTED:")
                for intervention in manual_interventions:
                    print(f"   - {intervention['coin']}: {intervention['action']}")
            
            return {
                'updated_positions': updated_positions,
                'manual_interventions': manual_interventions
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói sync v·ªõi exchange: {e}")
            return {'updated_positions': [], 'manual_interventions': []}

    def check_and_update_filled_orders(self, exchange_api):
        """
        Wrapper method ƒë·ªÉ backward compatibility
        """
        result = self.check_and_sync_with_exchange(exchange_api)
        return result['updated_positions']

    def cleanup_old_sell_orders(self):
        """Cleanup sell orders c≈© (gi·ªØ 10 orders g·∫ßn nh·∫•t)"""
        try:
            for coin, position in self.positions.items():
                sell_orders = position.get('active_sell_orders', [])
                
                if len(sell_orders) > 10:
                    # S·∫Øp x·∫øp theo th·ªùi gian t·∫°o, gi·ªØ 10 orders m·ªõi nh·∫•t
                    sorted_orders = sorted(sell_orders, 
                                         key=lambda x: x.get('created_at', ''), 
                                         reverse=True)
                    position['active_sell_orders'] = sorted_orders[:10]
                    
            self.save_positions()
            
        except Exception as e:
            print(f"‚ùå L·ªói cleanup sell orders: {e}")

    def get_all_positions(self):
        """L·∫•y t·∫•t c·∫£ positions hi·ªán c√≥"""
        return self.positions
    
    def get_position_summary(self):
        """T√≥m t·∫Øt t·∫•t c·∫£ positions"""
        if not self.positions:
            return "‚úÖ Kh√¥ng c√≥ position n√†o"
        
        summary = f"üìä T·ªîNG QUAN POSITIONS ({len(self.positions)} coin):\n"
        total_value = 0
        
        for coin, pos in self.positions.items():
            value = pos['total_cost']
            total_value += value
            summary += f"   üí∞ {coin}: {pos['total_quantity']:.6f} @ ¬•{pos['average_price']:.4f} = ¬•{value:.2f}\n"
        
        summary += f"üí∏ T·ªïng gi√° tr·ªã: ¬•{total_value:.2f}"
        return summary
    
    def cleanup_old_positions(self, days=30):
        """D·ªçn d·∫πp positions c≈© kh√¥ng ho·∫°t ƒë·ªông"""
        try:
            current_time = datetime.now()
            positions_to_remove = []
            
            for coin, pos in self.positions.items():
                updated_at = datetime.fromisoformat(pos['updated_at'])
                days_diff = (current_time - updated_at).days
                
                if days_diff > days:
                    positions_to_remove.append(coin)
            
            for coin in positions_to_remove:
                self.positions.pop(coin)
                print(f"üóëÔ∏è D·ªçn d·∫πp position c≈©: {coin}")
            
            if positions_to_remove:
                self.save_positions()
                return len(positions_to_remove)
            
            return 0
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói d·ªçn d·∫πp positions: {e}")
            return 0
    
    def optimize_file_size(self):
        """T·ªëi ∆∞u h√≥a k√≠ch th∆∞·ªõc file position_data.json"""
        try:
            optimized_count = 0
            
            for coin, pos in self.positions.items():
                # Gi·ªØ t·ªëi ƒëa 5 buy orders g·∫ßn nh·∫•t cho m·ªói position
                if len(pos['buy_orders']) > 5:
                    old_count = len(pos['buy_orders'])
                    pos['buy_orders'] = pos['buy_orders'][-5:]  # Gi·ªØ 5 l·ªánh m·ªõi nh·∫•t
                    optimized_count += old_count - 5
                    print(f"üßπ T·ªëi ∆∞u {coin}: {old_count} ‚Üí 5 buy orders")
            
            if optimized_count > 0:
                self.save_positions()
                print(f"‚úÖ ƒê√£ t·ªëi ∆∞u {optimized_count} buy orders c≈©")
                
                # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
                if os.path.exists(self.file_path):
                    file_size_kb = os.path.getsize(self.file_path) / 1024
                    print(f"üìÅ K√≠ch th∆∞·ªõc file sau t·ªëi ∆∞u: {file_size_kb:.1f} KB")
            
            return optimized_count
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·ªëi ∆∞u file: {e}")
            return 0
    
    def get_file_stats(self):
        """L·∫•y th·ªëng k√™ v·ªÅ file position_data.json"""
        try:
            stats = {
                'exists': os.path.exists(self.file_path),
                'size_kb': 0,
                'total_positions': len(self.positions),
                'total_buy_orders': 0,
                'oldest_position': None,
                'newest_position': None
            }
            
            if stats['exists']:
                stats['size_kb'] = os.path.getsize(self.file_path) / 1024
            
            # ƒê·∫øm t·ªïng s·ªë buy orders
            oldest_date = None
            newest_date = None
            
            for coin, pos in self.positions.items():
                stats['total_buy_orders'] += len(pos['buy_orders'])
                
                # T√¨m position c≈© nh·∫•t v√† m·ªõi nh·∫•t
                created_at = datetime.fromisoformat(pos['created_at'])
                if oldest_date is None or created_at < oldest_date:
                    oldest_date = created_at
                    stats['oldest_position'] = coin
                
                updated_at = datetime.fromisoformat(pos['updated_at'])
                if newest_date is None or updated_at > newest_date:
                    newest_date = updated_at
                    stats['newest_position'] = coin
            
            return stats
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói l·∫•y file stats: {e}")
            return None
    
    def auto_maintenance(self):
        """T·ª± ƒë·ªông b·∫£o tr√¨ file position_data.json"""
        try:
            print("üîß B·∫Øt ƒë·∫ßu auto maintenance...")
            
            # 1. L·∫•y th·ªëng k√™ tr∆∞·ªõc khi cleanup
            stats_before = self.get_file_stats()
            if stats_before:
                print(f"üìä Tr∆∞·ªõc cleanup:")
                print(f"   üìÅ File size: {stats_before['size_kb']:.1f} KB")
                print(f"   üì¶ Positions: {stats_before['total_positions']}")
                print(f"   üìã Buy orders: {stats_before['total_buy_orders']}")
            
            # 2. D·ªçn d·∫πp positions c≈© (30 ng√†y)
            cleaned_positions = self.cleanup_old_positions(30)
            
            # 3. T·ªëi ∆∞u h√≥a buy orders
            optimized_orders = self.optimize_file_size()
            
            # 4. Th·ªëng k√™ sau cleanup
            stats_after = self.get_file_stats()
            if stats_after:
                print(f"üìä Sau cleanup:")
                print(f"   üìÅ File size: {stats_after['size_kb']:.1f} KB")
                print(f"   üì¶ Positions: {stats_after['total_positions']}")
                print(f"   üìã Buy orders: {stats_after['total_buy_orders']}")
                
                if stats_before:
                    size_saved = stats_before['size_kb'] - stats_after['size_kb']
                    if size_saved > 0:
                        print(f"üíæ Ti·∫øt ki·ªám: {size_saved:.1f} KB")
            
            print(f"‚úÖ Auto maintenance ho√†n th√†nh!")
            print(f"   üóëÔ∏è X√≥a {cleaned_positions} positions c≈©")
            print(f"   üßπ T·ªëi ∆∞u {optimized_orders} buy orders")
            
        except Exception as e:
            print(f"‚ùå L·ªói auto maintenance: {e}")

    def cleanup_old_positions(self, days=30):
        """D·ªçn d·∫πp positions c≈© kh√¥ng ho·∫°t ƒë·ªông"""
        try:
            current_time = datetime.now()
            positions_to_remove = []
            
            for coin, pos in self.positions.items():
                updated_at = datetime.fromisoformat(pos['updated_at'])
                days_diff = (current_time - updated_at).days
                
                if days_diff > days:
                    positions_to_remove.append(coin)
            
            for coin in positions_to_remove:
                self.positions.pop(coin)
                print(f"üóëÔ∏è D·ªçn d·∫πp position c≈©: {coin}")
            
            if positions_to_remove:
                self.save_positions()
                return len(positions_to_remove)
            
            return 0
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói d·ªçn d·∫πp positions: {e}")
            return 0

# Kh·ªüi t·∫°o global position manager
position_manager = PositionManager()

if __name__ == "__main__":
    # Test position manager
    print("üß™ Testing Position Manager")
    print("=" * 40)
    
    # Test th√™m l·ªánh mua
    position_manager.add_buy_order('ADA/JPY', 100, 110.5, 'order_1')
    position_manager.add_buy_order('ADA/JPY', 50, 115.0, 'order_2')  # Gi√° cao h∆°n
    
    # Test t√≠nh SL/TP
    sl_tp = position_manager.calculate_sl_tp_prices('ADA/JPY')
    if sl_tp:
        print(f"\nüìä SL/TP cho ADA:")
        print(f"   üéØ Entry TB: ¬•{sl_tp['average_entry']:.4f}")
        print(f"   üõ°Ô∏è Stop Loss: ¬•{sl_tp['stop_loss']:.4f}")
        print(f"   üéØ TP1: ¬•{sl_tp['tp1_price']:.4f}")
        print(f"   üéØ TP2: ¬•{sl_tp['tp2_price']:.4f}")
    
    # Test summary
    print(f"\n{position_manager.get_position_summary()}")
