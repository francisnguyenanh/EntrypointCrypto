#!/usr/bin/env python3
"""
Script d·ªçn d·∫πp workspace t·ª± ƒë·ªông
Ch·∫°y script n√†y ƒë·ªÉ x√≥a c√°c file cache, log c≈© v√† file t·∫°m th·ªùi
"""

import os
import glob
import shutil
from datetime import datetime, timedelta

def cleanup_workspace():
    """D·ªçn d·∫πp workspace"""
    print("üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp workspace...")
    
    # 1. X√≥a __pycache__
    if os.path.exists('__pycache__'):
        shutil.rmtree('__pycache__')
        print("‚úÖ ƒê√£ x√≥a __pycache__/")
    
    # 2. X√≥a .DS_Store
    for ds_store in glob.glob('**/.DS_Store', recursive=True):
        os.remove(ds_store)
        print(f"‚úÖ ƒê√£ x√≥a {ds_store}")
    
    # 3. X√≥a .pyc files
    pyc_files = glob.glob('**/*.pyc', recursive=True)
    for pyc_file in pyc_files:
        os.remove(pyc_file)
        print(f"‚úÖ ƒê√£ x√≥a {pyc_file}")
    
    # 4. D·ªçn d·∫πp log c≈© (gi·ªØ l·∫°i 7 ng√†y g·∫ßn nh·∫•t)
    log_files = glob.glob('*.log') + ['trading_log.txt']
    for log_file in log_files:
        if os.path.exists(log_file):
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            file_size_mb = os.path.getsize(log_file) / (1024 * 1024)
            if file_size_mb > 10:  # N·∫øu > 10MB
                # Backup v√† gi·ªØ l·∫°i 1000 d√≤ng cu·ªëi
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                if len(lines) > 1000:
                    # Backup file c≈©
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    backup_file = f"{log_file}.backup_{timestamp}"
                    os.rename(log_file, backup_file)
                    
                    # T·∫°o file m·ªõi v·ªõi 1000 d√≤ng cu·ªëi
                    with open(log_file, 'w', encoding='utf-8') as f:
                        f.writelines(lines[-1000:])
                    
                    print(f"‚úÖ ƒê√£ d·ªçn d·∫πp {log_file} - backup: {backup_file}")
    
    # 5. X√≥a backup files c≈© h∆°n 30 ng√†y
    cutoff_date = datetime.now() - timedelta(days=30)
    backup_files = glob.glob('*.backup_*')
    for backup_file in backup_files:
        try:
            file_time = datetime.fromtimestamp(os.path.getmtime(backup_file))
            if file_time < cutoff_date:
                os.remove(backup_file)
                print(f"‚úÖ ƒê√£ x√≥a backup c≈© {backup_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x√≥a {backup_file}: {e}")
    
    # 6. X√≥a file t·∫°m th·ªùi
    temp_files = glob.glob('*.tmp') + glob.glob('*.temp') + glob.glob('*~')
    for temp_file in temp_files:
        os.remove(temp_file)
        print(f"‚úÖ ƒê√£ x√≥a {temp_file}")
    
    print("üéâ D·ªçn d·∫πp workspace ho√†n t·∫•t!")
    
    # Hi·ªÉn th·ªã th·ªëng k√™
    total_files = len(glob.glob('*'))
    print(f"üìä Workspace hi·ªán c√≥ {total_files} files")

if __name__ == "__main__":
    cleanup_workspace()
