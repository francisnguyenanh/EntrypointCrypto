#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fixed Trading Functions - Ch·ªâ h·ªó tr·ª£ JPY pairs
"""

def place_buy_order_with_sl_tp_fixed(symbol, quantity, entry_price, stop_loss, tp1_price, tp2_price):
    """
    ƒê·∫∂T L·ªÜNH MUA V·ªöI STOP LOSS V√Ä TAKE PROFIT - JPY ONLY
    
    Bao g·ªìm:
    1. Ki·ªÉm tra s·ªë d∆∞ tr∆∞·ªõc khi mua
    2. ƒê·∫∑t l·ªánh mua
    3. Ki·ªÉm tra l·ªánh mua th√†nh c√¥ng
    4. ƒê·∫∑t stop loss v√† take profit
    """
    import ccxt
    import trading_config
    
    # Kh·ªüi t·∫°o exchange
    binance = ccxt.binance(trading_config.BINANCE_CONFIG)
    
    try:
        trading_symbol = symbol  # Trade tr·ª±c ti·∫øp JPY
        
        print(f"\nüîÑ ƒêang ƒë·∫∑t l·ªánh mua {trading_symbol}...")
        print(f"üìä S·ªë l∆∞·ª£ng: {quantity:.6f}")
        print(f"üí∞ Gi√° entry: ¬•{entry_price:.2f}")
        
        # ===== 1. KI·ªÇM TRA S·ªê D∆Ø TR∆Ø·ªöC KHI MUA =====
        print("üí∞ Ki·ªÉm tra s·ªë d∆∞...")
        balance = binance.fetch_balance()
        
        # Ki·ªÉm tra s·ªë d∆∞ JPY ho·∫∑c USDT
        jpy_balance = balance['free'].get('JPY', 0)
        usdt_balance = balance['free'].get('USDT', 0)
        
        if jpy_balance > 0:
            available_balance = jpy_balance
            currency = 'JPY'
            print(f"üí∞ S·ªë d∆∞ JPY: ¬•{jpy_balance:.2f}")
        elif usdt_balance > 0:
            # Chuy·ªÉn ƒë·ªïi USDT sang JPY ƒë·ªÉ t√≠nh to√°n
            available_balance = usdt_balance * 150  # 1 USD ‚âà 150 JPY
            currency = 'USDT (converted)'
            print(f"üí∞ S·ªë d∆∞ USDT: ${usdt_balance:.2f} ‚âà ¬•{available_balance:.2f}")
        else:
            return {
                'status': 'failed',
                'error': 'Kh√¥ng c√≥ s·ªë d∆∞ JPY ho·∫∑c USDT'
            }
        
        # T√≠nh gi√° tr·ªã l·ªánh c·∫ßn thi·∫øt
        order_value = quantity * entry_price
        print(f"üí∞ Gi√° tr·ªã l·ªánh c·∫ßn: ¬•{order_value:.2f}")
        
        if order_value > available_balance:
            return {
                'status': 'failed',
                'error': f'Kh√¥ng ƒë·ªß s·ªë d∆∞. C·∫ßn ¬•{order_value:.2f}, c√≥ ¬•{available_balance:.2f}'
            }
        
        # ===== 2. ƒê·∫∂T L·ªÜNH MUA =====
        print("üí∏ ƒêang th·ª±c hi·ªán l·ªánh mua...")
        buy_order = binance.create_market_buy_order(trading_symbol, quantity)
        print(f"‚úÖ L·ªánh mua th√†nh c√¥ng - ID: {buy_order['id']}")
        
        # ===== 3. KI·ªÇM TRA L·ªÜNH MUA ƒê√É TH√ÄNH C√îNG =====
        actual_price = float(buy_order['average']) if buy_order['average'] else entry_price
        actual_quantity = float(buy_order['filled'])
        
        if actual_quantity == 0:
            return {
                'status': 'failed',
                'error': 'L·ªánh mua kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán (quantity = 0)'
            }
        
        print(f"üìà Gi√° mua th·ª±c t·∫ø: ¬•{actual_price:.2f}")
        print(f"üìä S·ªë l∆∞·ª£ng th·ª±c t·∫ø: {actual_quantity:.6f}")
        
        # ===== 4. ƒê·∫∂T STOP LOSS V√Ä TAKE PROFIT =====
        orders_placed = []
        
        try:
            # ƒê·∫∑t Stop Loss cho 70% s·ªë l∆∞·ª£ng
            sl_quantity = actual_quantity * 0.7
            print(f"üõ°Ô∏è ƒêang ƒë·∫∑t Stop Loss: ¬•{stop_loss:.2f} cho {sl_quantity:.6f}")
            
            stop_loss_order = binance.create_order(
                symbol=trading_symbol,
                type='STOP_LOSS_LIMIT',
                side='sell',
                amount=sl_quantity,
                price=stop_loss * 0.999,  # Gi√° limit th·∫•p h∆°n stop price
                params={
                    'stopPrice': stop_loss,
                    'timeInForce': 'GTC'
                }
            )
            orders_placed.append(stop_loss_order)
            print(f"‚úÖ Stop Loss ƒë·∫∑t th√†nh c√¥ng")
            
        except Exception as sl_error:
            print(f"‚ö†Ô∏è L·ªói ƒë·∫∑t stop loss: {sl_error}")
        
        try:
            # ƒê·∫∑t Take Profit 1 cho 20% s·ªë l∆∞·ª£ng
            tp1_quantity = actual_quantity * 0.2
            print(f"üéØ ƒêang ƒë·∫∑t Take Profit 1: ¬•{tp1_price:.2f} cho {tp1_quantity:.6f}")
            
            tp1_order = binance.create_limit_sell_order(trading_symbol, tp1_quantity, tp1_price)
            orders_placed.append(tp1_order)
            print(f"‚úÖ Take Profit 1 ƒë·∫∑t th√†nh c√¥ng")
            
        except Exception as tp1_error:
            print(f"‚ö†Ô∏è L·ªói ƒë·∫∑t TP1: {tp1_error}")
        
        try:
            # ƒê·∫∑t Take Profit 2 cho 10% s·ªë l∆∞·ª£ng c√≤n l·∫°i
            if abs(tp2_price - tp1_price) > 1:  # Ch·ªâ ƒë·∫∑t n·∫øu TP2 kh√°c TP1
                tp2_quantity = actual_quantity * 0.1
                tp2_value = tp2_quantity * tp2_price
                
                # Ki·ªÉm tra gi√° tr·ªã t·ªëi thi·ªÉu (th∆∞·ªùng 10-11 USDT)
                if tp2_value < 15:  # Skip n·∫øu order qu√° nh·ªè
                    print(f"‚ö†Ô∏è TP2 order qu√° nh·ªè (¬•{tp2_value:.2f}), b·ªè qua")
                else:
                    print(f"üéØ ƒêang ƒë·∫∑t Take Profit 2: ¬•{tp2_price:.2f} cho {tp2_quantity:.6f}")
                    
                    tp2_order = binance.create_limit_sell_order(trading_symbol, tp2_quantity, tp2_price)
                    orders_placed.append(tp2_order)
                    print(f"‚úÖ Take Profit 2 ƒë·∫∑t th√†nh c√¥ng")
            
        except Exception as tp2_error:
            print(f"‚ö†Ô∏è L·ªói ƒë·∫∑t TP2: {tp2_error}")
        
        # ===== 5. TR·∫¢ V·ªÄ K·∫æT QU·∫¢ =====
        print(f"üéâ Ho√†n th√†nh! ƒê√£ ƒë·∫∑t {len(orders_placed)} orders b·ªï sung")
        
        return {
            'status': 'success',
            'buy_order': buy_order,
            'sl_tp_orders': orders_placed,
            'actual_price': actual_price,
            'actual_quantity': actual_quantity,
            'trading_symbol': trading_symbol,
            'total_orders': len(orders_placed) + 1,
            'breakdown': {
                'stop_loss': f"70% @ ¬•{stop_loss:.2f}",
                'take_profit_1': f"20% @ ¬•{tp1_price:.2f}",
                'take_profit_2': f"10% @ ¬•{tp2_price:.2f}" if abs(tp2_price - tp1_price) > 1 else "Kh√¥ng ƒë·∫∑t"
            }
        }
        
    except Exception as e:
        error_msg = f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}"
        print(f"‚ùå {error_msg}")
        return {
            'status': 'failed',
            'error': error_msg
        }

if __name__ == "__main__":
    print("üß™ Test Fixed Trading Functions")
    
    # Test v·ªõi SUI/JPY
    result = place_buy_order_with_sl_tp_fixed(
        symbol='SUI/JPY',
        quantity=1.0,  # Test nh·ªè
        entry_price=620.0,
        stop_loss=600.0,
        tp1_price=640.0,
        tp2_price=660.0
    )
    
    print(f"\nüìä K·∫øt qu·∫£ test: {result['status']}")
    if result['status'] == 'success':
        print(f"‚úÖ Breakdown: {result['breakdown']}")
    else:
        print(f"‚ùå L·ªói: {result['error']}")
