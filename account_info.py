#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Account Info v√† Notification Functions
"""

import ccxt
import trading_config
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def get_account_info():
    """L·∫•y th√¥ng tin t√†i kho·∫£n chi ti·∫øt"""
    try:
        binance = ccxt.binance(trading_config.BINANCE_CONFIG)
        
        print("=" * 80)
        print("üíº TH√îNG TIN T√ÄI KHO·∫¢N BINANCE")
        print("=" * 80)
        
        # L·∫•y balance
        balance = binance.fetch_balance()
        
        # Hi·ªÉn th·ªã s·ªë d∆∞ ti·ªÅn t·ªá
        print("üí∞ S·ªê D∆Ø TI·ªÄN T·ªÜ:")
        fiat_currencies = ['USDT', 'JPY', 'USD', 'EUR']
        total_fiat_value = 0
        
        for currency in fiat_currencies:
            free_balance = balance['free'].get(currency, 0)
            used_balance = balance['used'].get(currency, 0)
            total_balance = balance['total'].get(currency, 0)
            
            if total_balance > 0:
                print(f"   {currency}:")
                print(f"     ‚Ä¢ Kh·∫£ d·ª•ng: {free_balance:,.2f}")
                print(f"     ‚Ä¢ ƒêang s·ª≠ d·ª•ng: {used_balance:,.2f}")
                print(f"     ‚Ä¢ T·ªïng c·ªông: {total_balance:,.2f}")
                
                if currency == 'USDT':
                    total_fiat_value += total_balance
                elif currency == 'JPY':
                    total_fiat_value += total_balance / 150  # Convert to USD
        
        print(f"\nüíµ T·ªîNG GI√Å TR·ªä FIAT: ${total_fiat_value:,.2f}")
        
        # Hi·ªÉn th·ªã s·ªë d∆∞ crypto
        print("\nü™ô S·ªê D∆Ø CRYPTOCURRENCY:")
        crypto_positions = []
        total_crypto_value = 0
        
        for symbol, amounts in balance['total'].items():
            if amounts > 0 and symbol not in fiat_currencies:
                try:
                    # L·∫•y gi√° hi·ªán t·∫°i
                    ticker = binance.fetch_ticker(f"{symbol}/USDT")
                    current_price = ticker['last']
                    value_usd = amounts * current_price
                    
                    crypto_positions.append({
                        'symbol': symbol,
                        'amount': amounts,
                        'price': current_price,
                        'value': value_usd
                    })
                    total_crypto_value += value_usd
                    
                except:
                    # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° USDT, th·ª≠ JPY
                    try:
                        ticker = binance.fetch_ticker(f"{symbol}/JPY")
                        current_price = ticker['last']
                        value_usd = amounts * current_price / 150  # Convert JPY to USD
                        
                        crypto_positions.append({
                            'symbol': symbol,
                            'amount': amounts,
                            'price': current_price,
                            'value': value_usd,
                            'currency': 'JPY'
                        })
                        total_crypto_value += value_usd
                    except:
                        print(f"   {symbol}: {amounts:.6f} (Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°)")
        
        # S·∫Øp x·∫øp theo gi√° tr·ªã
        crypto_positions.sort(key=lambda x: x['value'], reverse=True)
        
        for pos in crypto_positions:
            currency = pos.get('currency', 'USDT')
            symbol_pair = f"{pos['symbol']}/{currency}"
            if currency == 'JPY':
                print(f"   {pos['symbol']}:")
                print(f"     ‚Ä¢ S·ªë l∆∞·ª£ng: {pos['amount']:.6f}")
                print(f"     ‚Ä¢ Gi√° hi·ªán t·∫°i: ¬•{pos['price']:,.2f}")
                print(f"     ‚Ä¢ Gi√° tr·ªã: ${pos['value']:,.2f}")
            else:
                print(f"   {pos['symbol']}:")
                print(f"     ‚Ä¢ S·ªë l∆∞·ª£ng: {pos['amount']:.6f}")
                print(f"     ‚Ä¢ Gi√° hi·ªán t·∫°i: ${pos['price']:,.4f}")
                print(f"     ‚Ä¢ Gi√° tr·ªã: ${pos['value']:,.2f}")
        
        print(f"\nü™ô T·ªîNG GI√Å TR·ªä CRYPTO: ${total_crypto_value:,.2f}")
        
        # T·ªïng t√†i kho·∫£n
        total_account_value = total_fiat_value + total_crypto_value
        print(f"\nüíé T·ªîNG GI√Å TR·ªä T√ÄI KHO·∫¢N: ${total_account_value:,.2f}")
        
        # Ki·ªÉm tra orders ƒëang m·ªü
        print("\nüìã ORDERS ƒêANG M·ªû:")
        try:
            open_orders = binance.fetch_open_orders()
            if open_orders:
                print(f"   üìä T·ªïng c·ªông: {len(open_orders)} orders")
                for order in open_orders:
                    print(f"   ‚Ä¢ {order['symbol']}: {order['side'].upper()} {order['amount']:.6f} @ {order['price']:.4f}")
            else:
                print("   ‚úÖ Kh√¥ng c√≥ orders ƒëang m·ªü")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin orders: {e}")
        
        print("=" * 80)
        
        return {
            'fiat_value': total_fiat_value,
            'crypto_value': total_crypto_value,
            'total_value': total_account_value,
            'crypto_positions': crypto_positions
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y th√¥ng tin t√†i kho·∫£n: {e}")
        return None

def test_email_notification():
    """Test g·ª≠i email notification"""
    try:
        config = trading_config.NOTIFICATION_CONFIG
        
        if not config['email_enabled']:
            print("üìß Email notification ƒëang T·∫ÆT")
            return False
        
        print("üìß KI·ªÇM TRA EMAIL NOTIFICATION...")
        print(f"   ‚Ä¢ SMTP Server: {config['email_smtp']}:{config['email_port']}")
        print(f"   ‚Ä¢ Email g·ª≠i: {config['email_user']}")
        print(f"   ‚Ä¢ Email nh·∫≠n: {config['email_to']}")
        
        # T·∫°o email test
        msg = MIMEMultipart()
        msg['From'] = config['email_user']
        msg['To'] = config['email_to']
        msg['Subject'] = "üß™ Test Auto Trading Notification"
        
        body = """
üöÄ KI·ªÇM TRA H·ªÜ TH·ªêNG NOTIFICATION

ƒê√¢y l√† email test t·ª´ h·ªá th·ªëng Auto Trading.

üìä Th√¥ng tin:
‚Ä¢ Th·ªùi gian: {}
‚Ä¢ Tr·∫°ng th√°i: Testing
‚Ä¢ Platform: Binance Testnet

‚úÖ N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, h·ªá th·ªëng notification ƒë√£ ho·∫°t ƒë·ªông!

--
Auto Trading System
        """.format("2025-07-27 18:51")
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # G·ª≠i email
        print("üì§ ƒêang g·ª≠i email test...")
        server = smtplib.SMTP(config['email_smtp'], config['email_port'])
        server.starttls()
        server.login(config['email_user'], config['email_password'])
        
        text = msg.as_string()
        server.sendmail(config['email_user'], config['email_to'], text)
        server.quit()
        
        print("‚úÖ Email test ƒë√£ g·ª≠i th√†nh c√¥ng!")
        print(f"üì¨ Ki·ªÉm tra h·ªôp th∆∞: {config['email_to']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói g·ª≠i email: {e}")
        
        # H∆∞·ªõng d·∫´n s·ª≠a l·ªói
        print("\nüí° H∆Ø·ªöNG D·∫™N S·ª¨A L·ªñI:")
        print("1. Ki·ªÉm tra App Password Gmail:")
        print("   - V√†o Google Account Settings")
        print("   - Security > 2-Step Verification > App passwords") 
        print("   - T·∫°o App Password m·ªõi cho 'Mail'")
        print("   - C·∫≠p nh·∫≠t v√†o trading_config.py")
        print("\n2. Ki·ªÉm tra email settings trong trading_config.py")
        print("3. ƒê·∫£m b·∫£o email_enabled = True")
        
        return False

def send_trading_notification(message, urgent=False):
    """G·ª≠i th√¥ng b√°o trading"""
    try:
        config = trading_config.NOTIFICATION_CONFIG
        
        if not config['enabled'] or not config['email_enabled']:
            print(f"üì± Notification: {message}")
            return
        
        # T·∫°o email
        msg = MIMEMultipart()
        msg['From'] = config['email_user']
        msg['To'] = config['email_to']
        
        if urgent:
            msg['Subject'] = "üö® URGENT - Auto Trading Alert"
        else:
            msg['Subject'] = "üìä Auto Trading Update"
        
        body = f"""
ü§ñ AUTO TRADING NOTIFICATION

{message}

üìä Platform: Binance Testnet
‚è∞ Th·ªùi gian: 2025-07-27 18:51

--
Auto Trading System
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # G·ª≠i email
        server = smtplib.SMTP(config['email_smtp'], config['email_port'])
        server.starttls()
        server.login(config['email_user'], config['email_password'])
        
        text = msg.as_string()
        server.sendmail(config['email_user'], config['email_to'], text)
        server.quit()
        
        print(f"üìß ƒê√£ g·ª≠i email: {message[:50]}...")
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói g·ª≠i notification: {e}")
        print(f"üì± Fallback: {message}")

if __name__ == "__main__":
    print("üß™ TEST ACCOUNT INFO & NOTIFICATIONS")
    print()
    
    # Test account info
    account_info = get_account_info()
    
    print()
    
    # Test email notification
    test_email_notification()
